{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/**\r\n * React Hooks for CRM\r\n * Save this as: src/hooks/useLeads.js\r\n */\n\nimport { useState, useEffect } from 'react';\nimport { googleSheetsService, activityLogger } from '../services';\n\n// Main hook for managing leads\nexport const useLeads = () => {\n  _s();\n  const [leads, setLeads] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // For now, start with sample data since we can't read from Sheets with no-cors\n  useEffect(() => {\n    // Sample data to show the CRM is working\n    setLeads([{\n      id: 'sample1',\n      customerName: 'Sample Customer (from local)',\n      phoneNumber: '303-555-0000',\n      address: 'Local Sample Address',\n      quality: 'Hot',\n      disposition: 'Initial Contact',\n      leadSource: 'Door Knock'\n    }]);\n    setLoading(false);\n  }, []);\n  const addLead = async leadData => {\n    try {\n      setLoading(true);\n      console.log('useLeads: Adding new lead:', leadData.customerName);\n\n      // Send to Google Sheets\n      await googleSheetsService.addLead(leadData);\n\n      // Add to local state so it shows immediately\n      const newLead = {\n        ...leadData,\n        id: 'LOCAL_' + Date.now()\n      };\n      setLeads(prev => [...prev, newLead]);\n\n      // Log activity\n      await activityLogger.logActivity('LEAD_CREATED', newLead.id, `New lead created: ${leadData.customerName}`);\n      alert('Lead saved to Google Sheets! Check your spreadsheet.');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error adding lead:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateLead = async leadData => {\n    try {\n      setLoading(true);\n      console.log('useLeads: Updating lead:', leadData.customerName);\n\n      // Send to Google Sheets\n      await googleSheetsService.updateLead(leadData);\n\n      // Update local state\n      setLeads(prev => prev.map(lead => lead.id === leadData.id ? leadData : lead));\n      alert('Lead updated in Google Sheets!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error updating lead:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteLead = async leadId => {\n    try {\n      setLoading(true);\n\n      // Send delete to Google Sheets\n      await googleSheetsService.deleteLead(leadId);\n\n      // Remove from local state\n      setLeads(prev => prev.filter(lead => lead.id !== leadId));\n      alert('Lead deleted from Google Sheets!');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error deleting lead:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    leads,\n    loading,\n    error,\n    addLead,\n    updateLead,\n    deleteLead\n  };\n};\n\n// Placeholder hooks for other features\n_s(useLeads, \"LZEXbIFcwbsTENf0ceNgVNEl1p4=\");\nexport const useAppointments = () => {\n  _s2();\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  return {\n    appointments,\n    loading,\n    error,\n    addAppointment: async apt => console.log('Adding appointment:', apt),\n    updateAppointment: async apt => console.log('Updating appointment:', apt),\n    deleteAppointment: async id => console.log('Deleting appointment:', id)\n  };\n};\n_s2(useAppointments, \"EgvCBC17zFsZcmwx6IxJ1QRLutg=\");\nexport const useDashboardStats = leads => {\n  return {\n    totalLeads: leads.length,\n    hotLeads: leads.filter(l => l.quality === 'Hot').length,\n    warmLeads: leads.filter(l => l.quality === 'Warm').length,\n    coldLeads: leads.filter(l => l.quality === 'Cold').length,\n    quotedLeads: leads.filter(l => l.disposition === 'Quoted').length,\n    closedWon: 0,\n    totalQuoteValue: 0,\n    averageQuoteValue: 0,\n    conversionRate: 0,\n    leadsBySource: {}\n  };\n};\nexport const useNotifications = () => {\n  _s3();\n  const [notifications, setNotifications] = useState([]);\n  const addNotification = (message, type = 'info') => {\n    const newNotification = {\n      id: Date.now().toString(),\n      message,\n      type,\n      timestamp: new Date().toISOString()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\n    }, 5000);\n  };\n  return {\n    notifications,\n    addNotification,\n    removeNotification: id => setNotifications(prev => prev.filter(n => n.id !== id)),\n    clearAllNotifications: () => setNotifications([])\n  };\n};\n_s3(useNotifications, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");","map":{"version":3,"names":["useState","useEffect","googleSheetsService","activityLogger","useLeads","_s","leads","setLeads","loading","setLoading","error","setError","id","customerName","phoneNumber","address","quality","disposition","leadSource","addLead","leadData","console","log","newLead","Date","now","prev","logActivity","alert","success","err","message","updateLead","map","lead","deleteLead","leadId","filter","useAppointments","_s2","appointments","setAppointments","addAppointment","apt","updateAppointment","deleteAppointment","useDashboardStats","totalLeads","length","hotLeads","l","warmLeads","coldLeads","quotedLeads","closedWon","totalQuoteValue","averageQuoteValue","conversionRate","leadsBySource","useNotifications","_s3","notifications","setNotifications","addNotification","type","newNotification","toString","timestamp","toISOString","setTimeout","n","removeNotification","clearAllNotifications"],"sources":["C:/Users/PC_User/Desktop/free-crm/crm-frontend/src/hooks/useLeads.js"],"sourcesContent":["/**\r\n * React Hooks for CRM\r\n * Save this as: src/hooks/useLeads.js\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { googleSheetsService, activityLogger } from '../services';\r\n\r\n// Main hook for managing leads\r\nexport const useLeads = () => {\r\n  const [leads, setLeads] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // For now, start with sample data since we can't read from Sheets with no-cors\r\n  useEffect(() => {\r\n    // Sample data to show the CRM is working\r\n    setLeads([\r\n      {\r\n        id: 'sample1',\r\n        customerName: 'Sample Customer (from local)',\r\n        phoneNumber: '303-555-0000',\r\n        address: 'Local Sample Address',\r\n        quality: 'Hot',\r\n        disposition: 'Initial Contact',\r\n        leadSource: 'Door Knock'\r\n      }\r\n    ]);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const addLead = async (leadData) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('useLeads: Adding new lead:', leadData.customerName);\r\n      \r\n      // Send to Google Sheets\r\n      await googleSheetsService.addLead(leadData);\r\n      \r\n      // Add to local state so it shows immediately\r\n      const newLead = {\r\n        ...leadData,\r\n        id: 'LOCAL_' + Date.now()\r\n      };\r\n      setLeads(prev => [...prev, newLead]);\r\n      \r\n      // Log activity\r\n      await activityLogger.logActivity(\r\n        'LEAD_CREATED',\r\n        newLead.id,\r\n        `New lead created: ${leadData.customerName}`\r\n      );\r\n      \r\n      alert('Lead saved to Google Sheets! Check your spreadsheet.');\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Error adding lead:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateLead = async (leadData) => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('useLeads: Updating lead:', leadData.customerName);\r\n      \r\n      // Send to Google Sheets\r\n      await googleSheetsService.updateLead(leadData);\r\n      \r\n      // Update local state\r\n      setLeads(prev => prev.map(lead => \r\n        lead.id === leadData.id ? leadData : lead\r\n      ));\r\n      \r\n      alert('Lead updated in Google Sheets!');\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Error updating lead:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteLead = async (leadId) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Send delete to Google Sheets\r\n      await googleSheetsService.deleteLead(leadId);\r\n      \r\n      // Remove from local state\r\n      setLeads(prev => prev.filter(lead => lead.id !== leadId));\r\n      \r\n      alert('Lead deleted from Google Sheets!');\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Error deleting lead:', err);\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    leads,\r\n    loading,\r\n    error,\r\n    addLead,\r\n    updateLead,\r\n    deleteLead\r\n  };\r\n};\r\n\r\n// Placeholder hooks for other features\r\nexport const useAppointments = () => {\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  return {\r\n    appointments,\r\n    loading,\r\n    error,\r\n    addAppointment: async (apt) => console.log('Adding appointment:', apt),\r\n    updateAppointment: async (apt) => console.log('Updating appointment:', apt),\r\n    deleteAppointment: async (id) => console.log('Deleting appointment:', id)\r\n  };\r\n};\r\n\r\nexport const useDashboardStats = (leads) => {\r\n  return {\r\n    totalLeads: leads.length,\r\n    hotLeads: leads.filter(l => l.quality === 'Hot').length,\r\n    warmLeads: leads.filter(l => l.quality === 'Warm').length,\r\n    coldLeads: leads.filter(l => l.quality === 'Cold').length,\r\n    quotedLeads: leads.filter(l => l.disposition === 'Quoted').length,\r\n    closedWon: 0,\r\n    totalQuoteValue: 0,\r\n    averageQuoteValue: 0,\r\n    conversionRate: 0,\r\n    leadsBySource: {}\r\n  };\r\n};\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const addNotification = (message, type = 'info') => {\r\n    const newNotification = {\r\n      id: Date.now().toString(),\r\n      message,\r\n      type,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    addNotification,\r\n    removeNotification: (id) => setNotifications(prev => prev.filter(n => n.id !== id)),\r\n    clearAllNotifications: () => setNotifications([])\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}