{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{googleSheetsService}from'../api/googleSheetsService';export function useJobCounts(addNotification){const[jobCounts,setJobCounts]=useState([]);const[loading,setLoading]=useState(true);// Load job counts from API\nconst loadJobCountsData=useCallback(async function(){let isManualRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!isManualRefresh)setLoading(true);try{const response=await googleSheetsService.fetchJobCounts();if(response.success){const processedJobCounts=(response.data||response.jobCounts||[]).map((jobCount,index)=>_objectSpread(_objectSpread({},jobCount),{},{// Ensure we have an ID field\nid:jobCount.id||\"jobcount_\".concat(Date.now(),\"_\").concat(index),// Format name for display\nfullName:jobCount.customerName||\"\".concat(jobCount.firstName||'',\" \").concat(jobCount.lastName||'').trim()||'Unknown Customer'})).sort((a,b)=>new Date(b.date||0)-new Date(a.date||0));setJobCounts(processedJobCounts);const message=isManualRefresh?\"Job counts refreshed. Found \".concat(processedJobCounts.length,\" records.\"):\"Job counts loaded. Found \".concat(processedJobCounts.length,\" records.\");addNotification(message,'success');}else{addNotification(\"Error fetching job counts: \".concat(response.message),'error');}}catch(error){addNotification(\"Error loading job counts: \".concat(error.message),'error');}finally{if(!isManualRefresh)setLoading(false);}},[addNotification]);// Load data on component mount\nuseEffect(()=>{loadJobCountsData();},[loadJobCountsData]);// Add new job count\nconst addJobCount=useCallback(async jobCountData=>{try{const response=await googleSheetsService.addJobCount(jobCountData);if(response.success&&response.jobCount){const newJobCount=_objectSpread(_objectSpread({},response.jobCount),{},{id:response.jobCount.id||\"jobcount_\".concat(Date.now()),fullName:response.jobCount.customerName||\"\".concat(response.jobCount.firstName||'',\" \").concat(response.jobCount.lastName||'').trim()||'Unknown Customer'});setJobCounts(prev=>[newJobCount,...prev].sort((a,b)=>new Date(b.date||0)-new Date(a.date||0)));addNotification(\"Job count added: \".concat(newJobCount.fullName),'success');}else{addNotification(\"Error adding job count: \".concat(response.message),'error');}return response;}catch(error){addNotification(\"Error adding job count: \".concat(error.message),'error');return{success:false,message:error.message};}},[addNotification]);// Update existing job count\nconst updateJobCount=useCallback(async updatedJobCount=>{try{const response=await googleSheetsService.updateJobCount(updatedJobCount);if(response.success&&response.jobCount){const updatedData=_objectSpread(_objectSpread({},response.jobCount),{},{id:response.jobCount.id||updatedJobCount.id,fullName:response.jobCount.customerName||\"\".concat(response.jobCount.firstName||'',\" \").concat(response.jobCount.lastName||'').trim()||'Unknown Customer'});setJobCounts(prev=>prev.map(jc=>jc.id===updatedData.id?updatedData:jc));addNotification(\"Job count updated: \".concat(updatedData.fullName),'info');}else{addNotification(\"Error updating job count: \".concat(response.message),'error');}return response;}catch(error){addNotification(\"Error updating job count: \".concat(error.message),'error');return{success:false,message:error.message};}},[addNotification]);// Delete job count\nconst deleteJobCount=useCallback(async jobCountId=>{const jobCountToDelete=jobCounts.find(jc=>jc.id===jobCountId);if(!jobCountToDelete){addNotification('Job count not found','error');return;}const confirmMessage=\"Are you sure you want to delete the job count for \".concat(jobCountToDelete.fullName,\"?\");if(window.confirm(confirmMessage)){try{const response=await googleSheetsService.deleteJobCount(jobCountId);if(response.success){setJobCounts(currentJobCounts=>currentJobCounts.filter(jc=>jc.id!==jobCountId));addNotification(\"Job count deleted: \".concat(jobCountToDelete.fullName),'info');}else{addNotification(\"Error deleting job count: \".concat(response.message),'error');}}catch(error){addNotification(\"Error deleting job count: \".concat(error.message),'error');}}},[jobCounts,addNotification]);return{jobCounts,loading,refreshJobCounts:()=>loadJobCountsData(true),addJobCount,updateJobCount,deleteJobCount};}","map":{"version":3,"names":["useState","useEffect","useCallback","googleSheetsService","useJobCounts","addNotification","jobCounts","setJobCounts","loading","setLoading","loadJobCountsData","isManualRefresh","arguments","length","undefined","response","fetchJobCounts","success","processedJobCounts","data","map","jobCount","index","_objectSpread","id","concat","Date","now","fullName","customerName","firstName","lastName","trim","sort","a","b","date","message","error","addJobCount","jobCountData","newJobCount","prev","updateJobCount","updatedJobCount","updatedData","jc","deleteJobCount","jobCountId","jobCountToDelete","find","confirmMessage","window","confirm","currentJobCounts","filter","refreshJobCounts"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useJobCounts.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nexport function useJobCounts(addNotification) {\r\n    const [jobCounts, setJobCounts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Load job counts from API\r\n    const loadJobCountsData = useCallback(async (isManualRefresh = false) => {\r\n        if (!isManualRefresh) setLoading(true);\r\n\r\n        try {\r\n            const response = await googleSheetsService.fetchJobCounts();\r\n\r\n            if (response.success) {\r\n                const processedJobCounts = (response.data || response.jobCounts || [])\r\n                    .map((jobCount, index) => ({\r\n                        ...jobCount,\r\n                        // Ensure we have an ID field\r\n                        id: jobCount.id || `jobcount_${Date.now()}_${index}`,\r\n                        // Format name for display\r\n                        fullName: jobCount.customerName ||\r\n                                 `${jobCount.firstName || ''} ${jobCount.lastName || ''}`.trim() ||\r\n                                 'Unknown Customer'\r\n                    }))\r\n                    .sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0));\r\n\r\n                setJobCounts(processedJobCounts);\r\n\r\n                const message = isManualRefresh\r\n                    ? `Job counts refreshed. Found ${processedJobCounts.length} records.`\r\n                    : `Job counts loaded. Found ${processedJobCounts.length} records.`;\r\n\r\n                addNotification(message, 'success');\r\n            } else {\r\n                addNotification(`Error fetching job counts: ${response.message}`, 'error');\r\n            }\r\n        } catch (error) {\r\n            addNotification(`Error loading job counts: ${error.message}`, 'error');\r\n        } finally {\r\n            if (!isManualRefresh) setLoading(false);\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Load data on component mount\r\n    useEffect(() => {\r\n        loadJobCountsData();\r\n    }, [loadJobCountsData]);\r\n\r\n    // Add new job count\r\n    const addJobCount = useCallback(async (jobCountData) => {\r\n        try {\r\n            const response = await googleSheetsService.addJobCount(jobCountData);\r\n\r\n            if (response.success && response.jobCount) {\r\n                const newJobCount = {\r\n                    ...response.jobCount,\r\n                    id: response.jobCount.id || `jobcount_${Date.now()}`,\r\n                    fullName: response.jobCount.customerName ||\r\n                             `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() ||\r\n                             'Unknown Customer'\r\n                };\r\n\r\n                setJobCounts(prev => [newJobCount, ...prev].sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)));\r\n                addNotification(`Job count added: ${newJobCount.fullName}`, 'success');\r\n            } else {\r\n                addNotification(`Error adding job count: ${response.message}`, 'error');\r\n            }\r\n\r\n            return response;\r\n        } catch (error) {\r\n            addNotification(`Error adding job count: ${error.message}`, 'error');\r\n            return { success: false, message: error.message };\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Update existing job count\r\n    const updateJobCount = useCallback(async (updatedJobCount) => {\r\n        try {\r\n            const response = await googleSheetsService.updateJobCount(updatedJobCount);\r\n\r\n            if (response.success && response.jobCount) {\r\n                const updatedData = {\r\n                    ...response.jobCount,\r\n                    id: response.jobCount.id || updatedJobCount.id,\r\n                    fullName: response.jobCount.customerName ||\r\n                             `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() ||\r\n                             'Unknown Customer'\r\n                };\r\n\r\n                setJobCounts(prev => prev.map(jc => (jc.id === updatedData.id ? updatedData : jc)));\r\n                addNotification(`Job count updated: ${updatedData.fullName}`, 'info');\r\n            } else {\r\n                addNotification(`Error updating job count: ${response.message}`, 'error');\r\n            }\r\n\r\n            return response;\r\n        } catch (error) {\r\n            addNotification(`Error updating job count: ${error.message}`, 'error');\r\n            return { success: false, message: error.message };\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Delete job count\r\n    const deleteJobCount = useCallback(async (jobCountId) => {\r\n        const jobCountToDelete = jobCounts.find(jc => jc.id === jobCountId);\r\n        if (!jobCountToDelete) {\r\n            addNotification('Job count not found', 'error');\r\n            return;\r\n        }\r\n\r\n        const confirmMessage = `Are you sure you want to delete the job count for ${jobCountToDelete.fullName}?`;\r\n        if (window.confirm(confirmMessage)) {\r\n            try {\r\n                const response = await googleSheetsService.deleteJobCount(jobCountId);\r\n\r\n                if (response.success) {\r\n                    setJobCounts(currentJobCounts => currentJobCounts.filter(jc => jc.id !== jobCountId));\r\n                    addNotification(`Job count deleted: ${jobCountToDelete.fullName}`, 'info');\r\n                } else {\r\n                    addNotification(`Error deleting job count: ${response.message}`, 'error');\r\n                }\r\n            } catch (error) {\r\n                addNotification(`Error deleting job count: ${error.message}`, 'error');\r\n            }\r\n        }\r\n    }, [jobCounts, addNotification]);\r\n\r\n    return {\r\n        jobCounts,\r\n        loading,\r\n        refreshJobCounts: () => loadJobCountsData(true),\r\n        addJobCount,\r\n        updateJobCount,\r\n        deleteJobCount\r\n    };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}