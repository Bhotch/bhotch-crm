{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{googleSheetsService}from'../api/googleSheetsService';export function useLeads(addNotification){const[leads,setLeads]=useState([]);const[loading,setLoading]=useState(true);const loadLeadsData=useCallback(async function(){let isManualRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!isManualRefresh)setLoading(true);const response=await googleSheetsService.fetchLeads();if(response.success){const processedLeads=(response.data||response.leads||[]).map(lead=>_objectSpread(_objectSpread({},lead),{},{customerName:lead.customerName||\"\".concat(lead.firstName||'',\" \").concat(lead.lastName||'').trim()||'Unknown'})).sort((a,b)=>new Date(b.createdDate||0)-new Date(a.createdDate||0));setLeads(processedLeads);if(isManualRefresh)addNotification(\"Leads refreshed. Found \".concat(processedLeads.length,\" leads.\"),'success');else addNotification(\"Leads loaded. Found \".concat(processedLeads.length,\" leads.\"),'success');}else{addNotification(\"Error fetching leads: \".concat(response.message),'error');}if(!isManualRefresh)setLoading(false);},[addNotification]);useEffect(()=>{loadLeadsData();},[loadLeadsData]);const addLead=useCallback(async leadData=>{const response=await googleSheetsService.addLead(leadData);if(response.success&&response.lead){setLeads(prev=>[response.lead,...prev].sort((a,b)=>new Date(b.createdDate||0)-new Date(a.createdDate||0)));addNotification(\"Lead added: \".concat(response.lead.customerName),'success');}else{addNotification(\"Error adding lead: \".concat(response.message),'error');}return response;},[addNotification]);const updateLead=useCallback(async updatedLead=>{const response=await googleSheetsService.updateLead(updatedLead);if(response.success&&response.lead){setLeads(prev=>prev.map(l=>l.id===response.lead.id?response.lead:l));addNotification(\"Lead updated: \".concat(response.lead.customerName),'info');}else{addNotification(\"Error updating lead: \".concat(response.message),'error');}return response;},[addNotification]);const deleteLead=useCallback(async leadId=>{const leadToDelete=leads.find(l=>l.id===leadId);if(!leadToDelete)return;if(window.confirm(\"Are you sure you want to delete \".concat(leadToDelete.customerName,\"?\"))){const response=await googleSheetsService.deleteLead(leadId);if(response.success){setLeads(currentLeads=>currentLeads.filter(l=>l.id!==leadId));addNotification(\"Lead deleted: \".concat(leadToDelete.customerName),'warning');}else{addNotification(\"Error deleting lead: \".concat(response.message),'error');}}},[leads,addNotification]);return{leads,loading,refreshLeads:()=>loadLeadsData(true),addLead,updateLead,deleteLead};}","map":{"version":3,"names":["useState","useEffect","useCallback","googleSheetsService","useLeads","addNotification","leads","setLeads","loading","setLoading","loadLeadsData","isManualRefresh","arguments","length","undefined","response","fetchLeads","success","processedLeads","data","map","lead","_objectSpread","customerName","concat","firstName","lastName","trim","sort","a","b","Date","createdDate","message","addLead","leadData","prev","updateLead","updatedLead","l","id","deleteLead","leadId","leadToDelete","find","window","confirm","currentLeads","filter","refreshLeads"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useLeads.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nexport function useLeads(addNotification) {\r\n  const [leads, setLeads] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadLeadsData = useCallback(async (isManualRefresh = false) => {\r\n    if (!isManualRefresh) setLoading(true);\r\n    const response = await googleSheetsService.fetchLeads();\r\n    if (response.success) {\r\n      const processedLeads = (response.data || response.leads || [])\r\n        .map(lead => ({\r\n          ...lead,\r\n          customerName: lead.customerName || `${lead.firstName||''} ${lead.lastName||''}`.trim() || 'Unknown'\r\n        }))\r\n        .sort((a, b) => new Date(b.createdDate || 0) - new Date(a.createdDate || 0));\r\n      setLeads(processedLeads);\r\n      if (isManualRefresh) addNotification(`Leads refreshed. Found ${processedLeads.length} leads.`, 'success');\r\n      else addNotification(`Leads loaded. Found ${processedLeads.length} leads.`, 'success');\r\n    } else {\r\n      addNotification(`Error fetching leads: ${response.message}`, 'error');\r\n    }\r\n    if (!isManualRefresh) setLoading(false);\r\n  }, [addNotification]);\r\n\r\n  useEffect(() => {\r\n    loadLeadsData();\r\n  }, [loadLeadsData]);\r\n\r\n  const addLead = useCallback(async (leadData) => {\r\n    const response = await googleSheetsService.addLead(leadData);\r\n    if (response.success && response.lead) {\r\n      setLeads(prev => [response.lead, ...prev].sort((a,b) => new Date(b.createdDate||0)-new Date(a.createdDate||0)));\r\n      addNotification(`Lead added: ${response.lead.customerName}`, 'success');\r\n    } else {\r\n      addNotification(`Error adding lead: ${response.message}`, 'error');\r\n    }\r\n    return response;\r\n  }, [addNotification]);\r\n\r\n  const updateLead = useCallback(async (updatedLead) => {\r\n    const response = await googleSheetsService.updateLead(updatedLead);\r\n    if (response.success && response.lead) {\r\n      setLeads(prev => prev.map(l => (l.id === response.lead.id ? response.lead : l)));\r\n      addNotification(`Lead updated: ${response.lead.customerName}`, 'info');\r\n    } else {\r\n      addNotification(`Error updating lead: ${response.message}`, 'error');\r\n    }\r\n    return response;\r\n  }, [addNotification]);\r\n  \r\n  const deleteLead = useCallback(async (leadId) => {\r\n    const leadToDelete = leads.find(l => l.id === leadId);\r\n    if (!leadToDelete) return;\r\n\r\n    if (window.confirm(`Are you sure you want to delete ${leadToDelete.customerName}?`)) {\r\n      const response = await googleSheetsService.deleteLead(leadId);\r\n      if (response.success) {\r\n        setLeads(currentLeads => currentLeads.filter(l => l.id !== leadId));\r\n        addNotification(`Lead deleted: ${leadToDelete.customerName}`, 'warning');\r\n      } else {\r\n        addNotification(`Error deleting lead: ${response.message}`, 'error');\r\n      }\r\n    }\r\n  }, [leads, addNotification]);\r\n\r\n  return { leads, loading, refreshLeads: () => loadLeadsData(true), addLead, updateLead, deleteLead };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}