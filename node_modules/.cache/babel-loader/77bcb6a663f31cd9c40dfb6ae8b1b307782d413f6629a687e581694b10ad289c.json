{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import logger from'./enterpriseLogger';import cacheManager from'./advancedCache';import notificationSystem from'./notificationSystem';class EnterpriseMonitoringSystem{constructor(){this.metrics=new Map();this.alerts=new Map();this.thresholds={responseTime:5000,// 5 seconds\nerrorRate:0.05,// 5%\nmemoryUsage:0.8,// 80%\ncacheHitRate:0.7,// 70%\napiFailureRate:0.1,// 10%\ncalculationSuccessRate:0.95,// 95%\nsystemLoad:0.8// 80%\n};this.monitoring={enabled:true,interval:30000,// 30 seconds\nbatchSize:100,retentionPeriod:7*24*60*60*1000// 7 days\n};this.alertChannels=['ui','console','storage'];this.healthChecks=[];this.initializeMonitoring();}initializeMonitoring(){this.setupPerformanceObserver();this.setupResourceMonitoring();this.setupErrorTracking();this.setupHealthChecks();this.startMonitoringLoop();logger.info('Enterprise Monitoring System initialized',{thresholds:this.thresholds,monitoring:this.monitoring});}setupPerformanceObserver(){if('PerformanceObserver'in window){try{const observer=new PerformanceObserver(list=>{const entries=list.getEntries();entries.forEach(entry=>this.recordPerformanceMetric(entry));});observer.observe({entryTypes:['navigation','measure','resource']});this.performanceObserver=observer;}catch(error){logger.warn('Performance Observer setup failed',{error:error.message});}}}setupResourceMonitoring(){// Monitor memory usage\nsetInterval(()=>{if('memory'in performance){this.recordMetric('memory.used',performance.memory.usedJSHeapSize);this.recordMetric('memory.total',performance.memory.totalJSHeapSize);this.recordMetric('memory.limit',performance.memory.jsHeapSizeLimit);const usage=performance.memory.usedJSHeapSize/performance.memory.jsHeapSizeLimit;this.checkThreshold('memoryUsage',usage);}},this.monitoring.interval);// Monitor connection status\nthis.monitorNetworkStatus();}setupErrorTracking(){// Global error handler\nwindow.addEventListener('error',event=>{var _event$error;this.recordError('javascript',{message:event.message,filename:event.filename,lineno:event.lineno,colno:event.colno,stack:(_event$error=event.error)===null||_event$error===void 0?void 0:_event$error.stack});});// Promise rejection handler\nwindow.addEventListener('unhandledrejection',event=>{this.recordError('promise',{reason:event.reason,promise:event.promise});});}setupHealthChecks(){// System health checks\nthis.addHealthCheck('cache',async()=>{try{const stats=await cacheManager.getStats();return{status:'healthy',metrics:stats,hitRate:stats.hitRate||0};}catch(error){return{status:'unhealthy',error:error.message};}});this.addHealthCheck('storage',async()=>{try{const testKey='health_check_'+Date.now();localStorage.setItem(testKey,'test');const value=localStorage.getItem(testKey);localStorage.removeItem(testKey);return{status:value==='test'?'healthy':'degraded',metrics:{localStorageAvailable:true,itemCount:localStorage.length}};}catch(error){return{status:'unhealthy',error:error.message};}});this.addHealthCheck('network',async()=>{try{const start=performance.now();const response=await fetch('https://httpbin.org/status/200',{method:'HEAD',cache:'no-cache'});const duration=performance.now()-start;return{status:response.ok?'healthy':'degraded',metrics:{responseTime:Math.round(duration),status:response.status}};}catch(error){return{status:'unhealthy',error:error.message};}});this.addHealthCheck('api',async()=>{try{// Test basic API connectivity (simplified)\nconst testData={action:'test',timestamp:Date.now()};const response=await fetch('/api/test',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(testData)});return{status:response.ok?'healthy':'degraded',metrics:{status:response.status,available:response.ok}};}catch(error){return{status:'degraded',error:'API not available or CORS issue'};}});}startMonitoringLoop(){setInterval(async()=>{if(this.monitoring.enabled){await this.collectSystemMetrics();await this.runHealthChecks();await this.processAlerts();await this.cleanupOldMetrics();}},this.monitoring.interval);// Initial run after 5 seconds\nsetTimeout(()=>this.collectSystemMetrics(),5000);}async collectSystemMetrics(){try{const metrics={timestamp:Date.now(),system:await this.getSystemMetrics(),performance:await this.getPerformanceMetrics(),cache:await this.getCacheMetrics(),errors:await this.getErrorMetrics()};await this.storeMetrics(metrics);this.analyzeMetrics(metrics);}catch(error){logger.error('Failed to collect system metrics',{error:error.message});}}async getSystemMetrics(){return{timestamp:Date.now(),userAgent:navigator.userAgent,online:navigator.onLine,cookieEnabled:navigator.cookieEnabled,language:navigator.language,platform:navigator.platform,viewport:{width:window.innerWidth,height:window.innerHeight},memory:'memory'in performance?{used:performance.memory.usedJSHeapSize,total:performance.memory.totalJSHeapSize,limit:performance.memory.jsHeapSizeLimit,usage:performance.memory.usedJSHeapSize/performance.memory.jsHeapSizeLimit}:null};}async getPerformanceMetrics(){const navigation=performance.getEntriesByType('navigation')[0];return{domContentLoaded:(navigation===null||navigation===void 0?void 0:navigation.domContentLoadedEventEnd)-(navigation===null||navigation===void 0?void 0:navigation.domContentLoadedEventStart)||0,loadComplete:(navigation===null||navigation===void 0?void 0:navigation.loadEventEnd)-(navigation===null||navigation===void 0?void 0:navigation.loadEventStart)||0,firstPaint:this.getFirstPaint(),firstContentfulPaint:this.getFirstContentfulPaint(),timeToInteractive:this.estimateTimeToInteractive()};}async getCacheMetrics(){try{const stats=await cacheManager.getStats();const cacheMetrics=await cacheManager.getMetrics();return _objectSpread(_objectSpread({},stats),{},{operations:cacheMetrics});}catch(error){logger.warn('Failed to get cache metrics',{error:error.message});return{};}}async getErrorMetrics(){const errors=this.metrics.get('errors')||[];const recentErrors=errors.filter(error=>Date.now()-error.timestamp<this.monitoring.interval*2);return{totalErrors:errors.length,recentErrors:recentErrors.length,errorRate:recentErrors.length/this.monitoring.interval*1000,// errors per second\nerrorTypes:this.categorizeErrors(recentErrors)};}getFirstPaint(){const paintEntries=performance.getEntriesByType('paint');const firstPaint=paintEntries.find(entry=>entry.name==='first-paint');return firstPaint?Math.round(firstPaint.startTime):0;}getFirstContentfulPaint(){const paintEntries=performance.getEntriesByType('paint');const fcp=paintEntries.find(entry=>entry.name==='first-contentful-paint');return fcp?Math.round(fcp.startTime):0;}estimateTimeToInteractive(){// Simplified TTI estimation\nconst navigation=performance.getEntriesByType('navigation')[0];return navigation?Math.round(navigation.domInteractive-navigation.fetchStart):0;}recordMetric(name,value){let metadata=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const metric={name,value,timestamp:Date.now(),metadata};if(!this.metrics.has(name)){this.metrics.set(name,[]);}const metrics=this.metrics.get(name);metrics.push(metric);// Keep only recent metrics\nconst cutoff=Date.now()-this.monitoring.retentionPeriod;this.metrics.set(name,metrics.filter(m=>m.timestamp>cutoff));// Check thresholds\nthis.checkThreshold(name,value);}recordPerformanceMetric(entry){const metric={name:entry.name,type:entry.entryType,startTime:entry.startTime,duration:entry.duration,timestamp:Date.now()};this.recordMetric(\"performance.\".concat(entry.entryType),entry.duration,metric);// Check performance thresholds\nif(entry.entryType==='navigation'||entry.entryType==='measure'){this.checkThreshold('responseTime',entry.duration);}}recordError(type,details){const error={type,details,timestamp:Date.now(),url:window.location.href,userAgent:navigator.userAgent};if(!this.metrics.has('errors')){this.metrics.set('errors',[]);}this.metrics.get('errors').push(error);// Trigger immediate alert for critical errors\nthis.triggerAlert('error','critical',\"\".concat(type,\" error occurred\"),error);logger.error(\"Monitoring: \".concat(type,\" error recorded\"),details);}checkThreshold(metricName,value){const threshold=this.thresholds[metricName];if(!threshold)return;const exceeded=value>threshold;if(exceeded){this.triggerAlert('threshold','warning',\"\".concat(metricName,\" threshold exceeded\"),{metric:metricName,value,threshold});}}triggerAlert(type,severity,message){let data=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};const alert={id:this.generateAlertId(),type,severity,message,data,timestamp:Date.now(),resolved:false};this.alerts.set(alert.id,alert);// Send notifications based on severity\nthis.sendAlert(alert);logger.warn(\"Alert triggered: \".concat(message),alert);}async sendAlert(alert){try{// Send to configured channels\nfor(const channel of this.alertChannels){switch(channel){case'ui':await notificationSystem.error(alert.message,{priority:alert.severity==='critical'?'high':'medium',category:'monitoring',metadata:alert.data});break;case'console':console.warn('ðŸš¨ MONITORING ALERT:',alert);break;case'storage':await this.storeAlert(alert);break;case'webhook':await this.sendWebhookAlert(alert);break;default:console.warn('Unknown alert channel:',channel);break;}}}catch(error){logger.error('Failed to send alert',{alertId:alert.id,error:error.message});}}async runHealthChecks(){const results={};for(const[name,checkFn]of this.healthChecks){try{const result=await checkFn();results[name]=result;// Trigger alerts for unhealthy systems\nif(result.status==='unhealthy'){this.triggerAlert('health','critical',\"Health check failed: \".concat(name),result);}}catch(error){results[name]={status:'error',error:error.message};this.triggerAlert('health','critical',\"Health check error: \".concat(name),{error:error.message});}}await this.storeHealthCheckResults(results);return results;}addHealthCheck(name,checkFunction){this.healthChecks.push([name,checkFunction]);}removeHealthCheck(name){this.healthChecks=this.healthChecks.filter(_ref=>{let[checkName]=_ref;return checkName!==name;});}async processAlerts(){const now=Date.now();const autoResolveTime=5*60*1000;// 5 minutes\n// Auto-resolve old alerts\nfor(const[id,alert]of this.alerts.entries()){if(!alert.resolved&&now-alert.timestamp>autoResolveTime){await this.resolveAlert(id);}}// Clean up old resolved alerts\nconst oldAlerts=Array.from(this.alerts.entries()).filter(_ref2=>{let[,alert]=_ref2;return alert.resolved&&now-alert.timestamp>24*60*60*1000;});oldAlerts.forEach(_ref3=>{let[id]=_ref3;return this.alerts.delete(id);});}async resolveAlert(alertId){const alert=this.alerts.get(alertId);if(alert){alert.resolved=true;alert.resolvedAt=Date.now();logger.info('Alert resolved',{alertId,alert:alert.message});}}categorizeErrors(errors){const categories={};errors.forEach(error=>{const category=error.type||'unknown';categories[category]=(categories[category]||0)+1;});return categories;}analyzeMetrics(metrics){var _metrics$performance,_metrics$errors,_metrics$cache;// Analyze trends and patterns\nconst analysis={timestamp:metrics.timestamp,performance:this.analyzePerformance(metrics.performance),errors:this.analyzeErrors(metrics.errors),cache:this.analyzeCachePerformance(metrics.cache),recommendations:[]};// Generate recommendations\nif(((_metrics$performance=metrics.performance)===null||_metrics$performance===void 0?void 0:_metrics$performance.domContentLoaded)>3000){analysis.recommendations.push({type:'performance',priority:'medium',message:'DOM Content Loaded time is high. Consider optimizing JavaScript loading.'});}if(((_metrics$errors=metrics.errors)===null||_metrics$errors===void 0?void 0:_metrics$errors.errorRate)>this.thresholds.errorRate){analysis.recommendations.push({type:'reliability',priority:'high',message:'Error rate is above threshold. Investigate recent errors.'});}if(((_metrics$cache=metrics.cache)===null||_metrics$cache===void 0?void 0:_metrics$cache.hitRate)<this.thresholds.cacheHitRate){analysis.recommendations.push({type:'performance',priority:'medium',message:'Cache hit rate is low. Review caching strategy.'});}return analysis;}analyzePerformance(performanceMetrics){if(!performanceMetrics)return null;return{score:this.calculatePerformanceScore(performanceMetrics),bottlenecks:this.identifyBottlenecks(performanceMetrics),trends:this.getPerformanceTrends()};}calculatePerformanceScore(metrics){let score=100;// Deduct points for slow metrics\nif(metrics.domContentLoaded>2000)score-=20;if(metrics.loadComplete>4000)score-=20;if(metrics.firstContentfulPaint>1500)score-=15;if(metrics.timeToInteractive>3000)score-=25;return Math.max(0,score);}identifyBottlenecks(metrics){const bottlenecks=[];if(metrics.domContentLoaded>3000){bottlenecks.push('Slow DOM content loading');}if(metrics.firstContentfulPaint>2000){bottlenecks.push('Slow first paint');}if(metrics.timeToInteractive>5000){bottlenecks.push('Slow time to interactive');}return bottlenecks;}getPerformanceTrends(){// Simple trend analysis\nconst recentMetrics=this.metrics.get('performance.navigation')||[];const last5=recentMetrics.slice(-5);if(last5.length<2)return'insufficient_data';const trend=last5[last5.length-1].value-last5[0].value;return trend>0?'degrading':'improving';}analyzeErrors(errorMetrics){if(!errorMetrics)return null;return{severity:this.categorizeErrorSeverity(errorMetrics),patterns:this.identifyErrorPatterns(errorMetrics),frequency:errorMetrics.errorRate};}categorizeErrorSeverity(errorMetrics){if(errorMetrics.errorRate>0.1)return'critical';if(errorMetrics.errorRate>0.05)return'high';if(errorMetrics.errorRate>0.01)return'medium';return'low';}identifyErrorPatterns(errorMetrics){const errors=this.metrics.get('errors')||[];const recentErrors=errors.slice(-10);const patterns={};recentErrors.forEach(error=>{var _error$details;const pattern=((_error$details=error.details)===null||_error$details===void 0?void 0:_error$details.message)||error.type;patterns[pattern]=(patterns[pattern]||0)+1;});return patterns;}analyzeCachePerformance(cacheMetrics){if(!cacheMetrics)return null;return{efficiency:cacheMetrics.hitRate||0,utilization:this.calculateCacheUtilization(cacheMetrics),recommendations:this.getCacheRecommendations(cacheMetrics)};}calculateCacheUtilization(metrics){if(!metrics.memorySize||!metrics.maxMemorySize)return 0;return metrics.memorySize/metrics.maxMemorySize;}getCacheRecommendations(metrics){const recommendations=[];if(metrics.hitRate<0.7){recommendations.push('Consider adjusting cache TTL values');}if(metrics.evictions>metrics.sets*0.1){recommendations.push('Cache size may be too small');}return recommendations;}monitorNetworkStatus(){window.addEventListener('online',()=>{this.recordMetric('network.status',1,{status:'online'});logger.info('Network status: online');});window.addEventListener('offline',()=>{this.recordMetric('network.status',0,{status:'offline'});this.triggerAlert('network','warning','Network connection lost',{});logger.warn('Network status: offline');});}async storeMetrics(metrics){try{const key=\"metrics:\".concat(Date.now());await cacheManager.set(key,metrics,{ttl:this.monitoring.retentionPeriod,tags:['metrics']});}catch(error){logger.error('Failed to store metrics',{error:error.message});}}async storeAlert(alert){try{const key=\"alert:\".concat(alert.id);await cacheManager.set(key,alert,{ttl:7*24*60*60*1000,// 7 days\ntags:['alerts']});}catch(error){logger.error('Failed to store alert',{error:error.message});}}async storeHealthCheckResults(results){try{const key=\"health:\".concat(Date.now());await cacheManager.set(key,results,{ttl:24*60*60*1000,// 24 hours\ntags:['health']});}catch(error){logger.error('Failed to store health check results',{error:error.message});}}async sendWebhookAlert(alert){// Placeholder for webhook integration\nlogger.info('Webhook alert would be sent',alert);}generateAlertId(){return\"alert_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));}async cleanupOldMetrics(){try{const cutoff=Date.now()-this.monitoring.retentionPeriod;// Clean up in-memory metrics\nfor(const[name,metrics]of this.metrics.entries()){const filtered=metrics.filter(m=>m.timestamp>cutoff);this.metrics.set(name,filtered);}// Clean up cached metrics\nawait cacheManager.deleteByTags(['metrics']);logger.debug('Old metrics cleaned up',{cutoff:new Date(cutoff)});}catch(error){logger.error('Failed to cleanup old metrics',{error:error.message});}}async getSystemReport(){try{const healthChecks=await this.runHealthChecks();const recentMetrics=await this.getRecentMetrics();const activeAlerts=Array.from(this.alerts.values()).filter(alert=>!alert.resolved);return{timestamp:Date.now(),systemHealth:this.calculateOverallHealth(healthChecks),healthChecks,metrics:recentMetrics,alerts:{active:activeAlerts.length,critical:activeAlerts.filter(a=>a.severity==='critical').length,warnings:activeAlerts.filter(a=>a.severity==='warning').length},performance:await this.getPerformanceSummary(),recommendations:this.getSystemRecommendations(healthChecks,recentMetrics)};}catch(error){logger.error('Failed to generate system report',{error:error.message});return{error:error.message};}}calculateOverallHealth(healthChecks){const statuses=Object.values(healthChecks).map(check=>check.status);const healthy=statuses.filter(status=>status==='healthy').length;const total=statuses.length;if(statuses.includes('unhealthy'))return'critical';if(statuses.includes('degraded'))return'degraded';if(healthy===total)return'healthy';return'unknown';}async getRecentMetrics(){const recent={};for(const[name,metrics]of this.metrics.entries()){const recentMetrics=metrics.slice(-5);if(recentMetrics.length>0){recent[name]={latest:recentMetrics[recentMetrics.length-1],count:recentMetrics.length,average:recentMetrics.reduce((sum,m)=>sum+m.value,0)/recentMetrics.length};}}return recent;}async getPerformanceSummary(){const navigation=performance.getEntriesByType('navigation')[0];if(!navigation)return null;return{pageLoad:Math.round(navigation.loadEventEnd-navigation.fetchStart),domReady:Math.round(navigation.domContentLoadedEventEnd-navigation.fetchStart),firstPaint:this.getFirstPaint(),score:this.calculatePerformanceScore({domContentLoaded:navigation.domContentLoadedEventEnd-navigation.domContentLoadedEventStart,loadComplete:navigation.loadEventEnd-navigation.loadEventStart,firstContentfulPaint:this.getFirstContentfulPaint(),timeToInteractive:navigation.domInteractive-navigation.fetchStart})};}getSystemRecommendations(healthChecks,metrics){var _metrics$memoryUsage,_metrics$memoryUsage$;const recommendations=[];// Health-based recommendations\nObject.entries(healthChecks).forEach(_ref4=>{let[name,check]=_ref4;if(check.status==='unhealthy'){recommendations.push({type:'critical',component:name,message:\"\".concat(name,\" is unhealthy and requires immediate attention\")});}});// Metric-based recommendations\nif(((_metrics$memoryUsage=metrics['memory.usage'])===null||_metrics$memoryUsage===void 0?void 0:(_metrics$memoryUsage$=_metrics$memoryUsage.latest)===null||_metrics$memoryUsage$===void 0?void 0:_metrics$memoryUsage$.value)>0.8){recommendations.push({type:'warning',component:'memory',message:'Memory usage is high. Consider clearing caches or reducing data retention.'});}return recommendations;}setThreshold(metric,value){this.thresholds[metric]=value;logger.info('Threshold updated',{metric,value});}setMonitoringEnabled(enabled){this.monitoring.enabled=enabled;logger.info(\"Monitoring \".concat(enabled?'enabled':'disabled'));}addAlertChannel(channel){if(!this.alertChannels.includes(channel)){this.alertChannels.push(channel);logger.info('Alert channel added',{channel});}}removeAlertChannel(channel){this.alertChannels=this.alertChannels.filter(c=>c!==channel);logger.info('Alert channel removed',{channel});}destroy(){if(this.performanceObserver){this.performanceObserver.disconnect();}this.monitoring.enabled=false;logger.info('Enterprise Monitoring System destroyed');}}const enterpriseMonitoring=new EnterpriseMonitoringSystem();export default enterpriseMonitoring;export{EnterpriseMonitoringSystem};","map":{"version":3,"names":["logger","cacheManager","notificationSystem","EnterpriseMonitoringSystem","constructor","metrics","Map","alerts","thresholds","responseTime","errorRate","memoryUsage","cacheHitRate","apiFailureRate","calculationSuccessRate","systemLoad","monitoring","enabled","interval","batchSize","retentionPeriod","alertChannels","healthChecks","initializeMonitoring","setupPerformanceObserver","setupResourceMonitoring","setupErrorTracking","setupHealthChecks","startMonitoringLoop","info","window","observer","PerformanceObserver","list","entries","getEntries","forEach","entry","recordPerformanceMetric","observe","entryTypes","performanceObserver","error","warn","message","setInterval","performance","recordMetric","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","usage","checkThreshold","monitorNetworkStatus","addEventListener","event","_event$error","recordError","filename","lineno","colno","stack","reason","promise","addHealthCheck","stats","getStats","status","hitRate","testKey","Date","now","localStorage","setItem","value","getItem","removeItem","localStorageAvailable","itemCount","length","start","response","fetch","method","cache","duration","ok","Math","round","testData","action","timestamp","headers","body","JSON","stringify","available","collectSystemMetrics","runHealthChecks","processAlerts","cleanupOldMetrics","setTimeout","system","getSystemMetrics","getPerformanceMetrics","getCacheMetrics","errors","getErrorMetrics","storeMetrics","analyzeMetrics","userAgent","navigator","online","onLine","cookieEnabled","language","platform","viewport","width","innerWidth","height","innerHeight","used","total","limit","navigation","getEntriesByType","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","loadComplete","loadEventEnd","loadEventStart","firstPaint","getFirstPaint","firstContentfulPaint","getFirstContentfulPaint","timeToInteractive","estimateTimeToInteractive","cacheMetrics","getMetrics","_objectSpread","operations","get","recentErrors","filter","totalErrors","errorTypes","categorizeErrors","paintEntries","find","name","startTime","fcp","domInteractive","fetchStart","metadata","arguments","undefined","metric","has","set","push","cutoff","m","type","entryType","concat","details","url","location","href","triggerAlert","metricName","threshold","exceeded","severity","data","alert","id","generateAlertId","resolved","sendAlert","channel","priority","category","console","storeAlert","sendWebhookAlert","alertId","results","checkFn","result","storeHealthCheckResults","checkFunction","removeHealthCheck","_ref","checkName","autoResolveTime","resolveAlert","oldAlerts","Array","from","_ref2","_ref3","delete","resolvedAt","categories","_metrics$performance","_metrics$errors","_metrics$cache","analysis","analyzePerformance","analyzeErrors","analyzeCachePerformance","recommendations","performanceMetrics","score","calculatePerformanceScore","bottlenecks","identifyBottlenecks","trends","getPerformanceTrends","max","recentMetrics","last5","slice","trend","errorMetrics","categorizeErrorSeverity","patterns","identifyErrorPatterns","frequency","_error$details","pattern","efficiency","utilization","calculateCacheUtilization","getCacheRecommendations","memorySize","maxMemorySize","evictions","sets","key","ttl","tags","random","toString","substr","filtered","deleteByTags","debug","getSystemReport","getRecentMetrics","activeAlerts","values","systemHealth","calculateOverallHealth","active","critical","a","warnings","getPerformanceSummary","getSystemRecommendations","statuses","Object","map","check","healthy","includes","recent","latest","count","average","reduce","sum","pageLoad","domReady","_metrics$memoryUsage","_metrics$memoryUsage$","_ref4","component","setThreshold","setMonitoringEnabled","addAlertChannel","removeAlertChannel","c","destroy","disconnect","enterpriseMonitoring"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/enterpriseMonitoring.js"],"sourcesContent":["import logger from './enterpriseLogger';\r\nimport cacheManager from './advancedCache';\r\nimport notificationSystem from './notificationSystem';\r\n\r\nclass EnterpriseMonitoringSystem {\r\n  constructor() {\r\n    this.metrics = new Map();\r\n    this.alerts = new Map();\r\n    this.thresholds = {\r\n      responseTime: 5000,        // 5 seconds\r\n      errorRate: 0.05,           // 5%\r\n      memoryUsage: 0.8,          // 80%\r\n      cacheHitRate: 0.7,         // 70%\r\n      apiFailureRate: 0.1,       // 10%\r\n      calculationSuccessRate: 0.95, // 95%\r\n      systemLoad: 0.8            // 80%\r\n    };\r\n\r\n    this.monitoring = {\r\n      enabled: true,\r\n      interval: 30000,           // 30 seconds\r\n      batchSize: 100,\r\n      retentionPeriod: 7 * 24 * 60 * 60 * 1000 // 7 days\r\n    };\r\n\r\n    this.alertChannels = ['ui', 'console', 'storage'];\r\n    this.healthChecks = [];\r\n\r\n    this.initializeMonitoring();\r\n  }\r\n\r\n  initializeMonitoring() {\r\n    this.setupPerformanceObserver();\r\n    this.setupResourceMonitoring();\r\n    this.setupErrorTracking();\r\n    this.setupHealthChecks();\r\n    this.startMonitoringLoop();\r\n\r\n    logger.info('Enterprise Monitoring System initialized', {\r\n      thresholds: this.thresholds,\r\n      monitoring: this.monitoring\r\n    });\r\n  }\r\n\r\n  setupPerformanceObserver() {\r\n    if ('PerformanceObserver' in window) {\r\n      try {\r\n        const observer = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach(entry => this.recordPerformanceMetric(entry));\r\n        });\r\n\r\n        observer.observe({ entryTypes: ['navigation', 'measure', 'resource'] });\r\n        this.performanceObserver = observer;\r\n      } catch (error) {\r\n        logger.warn('Performance Observer setup failed', { error: error.message });\r\n      }\r\n    }\r\n  }\r\n\r\n  setupResourceMonitoring() {\r\n    // Monitor memory usage\r\n    setInterval(() => {\r\n      if ('memory' in performance) {\r\n        this.recordMetric('memory.used', performance.memory.usedJSHeapSize);\r\n        this.recordMetric('memory.total', performance.memory.totalJSHeapSize);\r\n        this.recordMetric('memory.limit', performance.memory.jsHeapSizeLimit);\r\n\r\n        const usage = performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit;\r\n        this.checkThreshold('memoryUsage', usage);\r\n      }\r\n    }, this.monitoring.interval);\r\n\r\n    // Monitor connection status\r\n    this.monitorNetworkStatus();\r\n  }\r\n\r\n  setupErrorTracking() {\r\n    // Global error handler\r\n    window.addEventListener('error', (event) => {\r\n      this.recordError('javascript', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack\r\n      });\r\n    });\r\n\r\n    // Promise rejection handler\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.recordError('promise', {\r\n        reason: event.reason,\r\n        promise: event.promise\r\n      });\r\n    });\r\n  }\r\n\r\n  setupHealthChecks() {\r\n    // System health checks\r\n    this.addHealthCheck('cache', async () => {\r\n      try {\r\n        const stats = await cacheManager.getStats();\r\n        return {\r\n          status: 'healthy',\r\n          metrics: stats,\r\n          hitRate: stats.hitRate || 0\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          status: 'unhealthy',\r\n          error: error.message\r\n        };\r\n      }\r\n    });\r\n\r\n    this.addHealthCheck('storage', async () => {\r\n      try {\r\n        const testKey = 'health_check_' + Date.now();\r\n        localStorage.setItem(testKey, 'test');\r\n        const value = localStorage.getItem(testKey);\r\n        localStorage.removeItem(testKey);\r\n\r\n        return {\r\n          status: value === 'test' ? 'healthy' : 'degraded',\r\n          metrics: {\r\n            localStorageAvailable: true,\r\n            itemCount: localStorage.length\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          status: 'unhealthy',\r\n          error: error.message\r\n        };\r\n      }\r\n    });\r\n\r\n    this.addHealthCheck('network', async () => {\r\n      try {\r\n        const start = performance.now();\r\n        const response = await fetch('https://httpbin.org/status/200', {\r\n          method: 'HEAD',\r\n          cache: 'no-cache'\r\n        });\r\n        const duration = performance.now() - start;\r\n\r\n        return {\r\n          status: response.ok ? 'healthy' : 'degraded',\r\n          metrics: {\r\n            responseTime: Math.round(duration),\r\n            status: response.status\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          status: 'unhealthy',\r\n          error: error.message\r\n        };\r\n      }\r\n    });\r\n\r\n    this.addHealthCheck('api', async () => {\r\n      try {\r\n        // Test basic API connectivity (simplified)\r\n        const testData = { action: 'test', timestamp: Date.now() };\r\n        const response = await fetch('/api/test', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(testData)\r\n        });\r\n\r\n        return {\r\n          status: response.ok ? 'healthy' : 'degraded',\r\n          metrics: {\r\n            status: response.status,\r\n            available: response.ok\r\n          }\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          status: 'degraded',\r\n          error: 'API not available or CORS issue'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  startMonitoringLoop() {\r\n    setInterval(async () => {\r\n      if (this.monitoring.enabled) {\r\n        await this.collectSystemMetrics();\r\n        await this.runHealthChecks();\r\n        await this.processAlerts();\r\n        await this.cleanupOldMetrics();\r\n      }\r\n    }, this.monitoring.interval);\r\n\r\n    // Initial run after 5 seconds\r\n    setTimeout(() => this.collectSystemMetrics(), 5000);\r\n  }\r\n\r\n  async collectSystemMetrics() {\r\n    try {\r\n      const metrics = {\r\n        timestamp: Date.now(),\r\n        system: await this.getSystemMetrics(),\r\n        performance: await this.getPerformanceMetrics(),\r\n        cache: await this.getCacheMetrics(),\r\n        errors: await this.getErrorMetrics()\r\n      };\r\n\r\n      await this.storeMetrics(metrics);\r\n      this.analyzeMetrics(metrics);\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to collect system metrics', { error: error.message });\r\n    }\r\n  }\r\n\r\n  async getSystemMetrics() {\r\n    return {\r\n      timestamp: Date.now(),\r\n      userAgent: navigator.userAgent,\r\n      online: navigator.onLine,\r\n      cookieEnabled: navigator.cookieEnabled,\r\n      language: navigator.language,\r\n      platform: navigator.platform,\r\n      viewport: {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      },\r\n      memory: 'memory' in performance ? {\r\n        used: performance.memory.usedJSHeapSize,\r\n        total: performance.memory.totalJSHeapSize,\r\n        limit: performance.memory.jsHeapSizeLimit,\r\n        usage: performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit\r\n      } : null\r\n    };\r\n  }\r\n\r\n  async getPerformanceMetrics() {\r\n    const navigation = performance.getEntriesByType('navigation')[0];\r\n\r\n    return {\r\n      domContentLoaded: navigation?.domContentLoadedEventEnd - navigation?.domContentLoadedEventStart || 0,\r\n      loadComplete: navigation?.loadEventEnd - navigation?.loadEventStart || 0,\r\n      firstPaint: this.getFirstPaint(),\r\n      firstContentfulPaint: this.getFirstContentfulPaint(),\r\n      timeToInteractive: this.estimateTimeToInteractive()\r\n    };\r\n  }\r\n\r\n  async getCacheMetrics() {\r\n    try {\r\n      const stats = await cacheManager.getStats();\r\n      const cacheMetrics = await cacheManager.getMetrics();\r\n\r\n      return {\r\n        ...stats,\r\n        operations: cacheMetrics\r\n      };\r\n    } catch (error) {\r\n      logger.warn('Failed to get cache metrics', { error: error.message });\r\n      return {};\r\n    }\r\n  }\r\n\r\n  async getErrorMetrics() {\r\n    const errors = this.metrics.get('errors') || [];\r\n    const recentErrors = errors.filter(\r\n      error => Date.now() - error.timestamp < this.monitoring.interval * 2\r\n    );\r\n\r\n    return {\r\n      totalErrors: errors.length,\r\n      recentErrors: recentErrors.length,\r\n      errorRate: recentErrors.length / this.monitoring.interval * 1000, // errors per second\r\n      errorTypes: this.categorizeErrors(recentErrors)\r\n    };\r\n  }\r\n\r\n  getFirstPaint() {\r\n    const paintEntries = performance.getEntriesByType('paint');\r\n    const firstPaint = paintEntries.find(entry => entry.name === 'first-paint');\r\n    return firstPaint ? Math.round(firstPaint.startTime) : 0;\r\n  }\r\n\r\n  getFirstContentfulPaint() {\r\n    const paintEntries = performance.getEntriesByType('paint');\r\n    const fcp = paintEntries.find(entry => entry.name === 'first-contentful-paint');\r\n    return fcp ? Math.round(fcp.startTime) : 0;\r\n  }\r\n\r\n  estimateTimeToInteractive() {\r\n    // Simplified TTI estimation\r\n    const navigation = performance.getEntriesByType('navigation')[0];\r\n    return navigation ? Math.round(navigation.domInteractive - navigation.fetchStart) : 0;\r\n  }\r\n\r\n  recordMetric(name, value, metadata = {}) {\r\n    const metric = {\r\n      name,\r\n      value,\r\n      timestamp: Date.now(),\r\n      metadata\r\n    };\r\n\r\n    if (!this.metrics.has(name)) {\r\n      this.metrics.set(name, []);\r\n    }\r\n\r\n    const metrics = this.metrics.get(name);\r\n    metrics.push(metric);\r\n\r\n    // Keep only recent metrics\r\n    const cutoff = Date.now() - this.monitoring.retentionPeriod;\r\n    this.metrics.set(name, metrics.filter(m => m.timestamp > cutoff));\r\n\r\n    // Check thresholds\r\n    this.checkThreshold(name, value);\r\n  }\r\n\r\n  recordPerformanceMetric(entry) {\r\n    const metric = {\r\n      name: entry.name,\r\n      type: entry.entryType,\r\n      startTime: entry.startTime,\r\n      duration: entry.duration,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    this.recordMetric(`performance.${entry.entryType}`, entry.duration, metric);\r\n\r\n    // Check performance thresholds\r\n    if (entry.entryType === 'navigation' || entry.entryType === 'measure') {\r\n      this.checkThreshold('responseTime', entry.duration);\r\n    }\r\n  }\r\n\r\n  recordError(type, details) {\r\n    const error = {\r\n      type,\r\n      details,\r\n      timestamp: Date.now(),\r\n      url: window.location.href,\r\n      userAgent: navigator.userAgent\r\n    };\r\n\r\n    if (!this.metrics.has('errors')) {\r\n      this.metrics.set('errors', []);\r\n    }\r\n\r\n    this.metrics.get('errors').push(error);\r\n\r\n    // Trigger immediate alert for critical errors\r\n    this.triggerAlert('error', 'critical', `${type} error occurred`, error);\r\n\r\n    logger.error(`Monitoring: ${type} error recorded`, details);\r\n  }\r\n\r\n  checkThreshold(metricName, value) {\r\n    const threshold = this.thresholds[metricName];\r\n    if (!threshold) return;\r\n\r\n    const exceeded = value > threshold;\r\n    if (exceeded) {\r\n      this.triggerAlert('threshold', 'warning',\r\n        `${metricName} threshold exceeded`,\r\n        { metric: metricName, value, threshold }\r\n      );\r\n    }\r\n  }\r\n\r\n  triggerAlert(type, severity, message, data = {}) {\r\n    const alert = {\r\n      id: this.generateAlertId(),\r\n      type,\r\n      severity,\r\n      message,\r\n      data,\r\n      timestamp: Date.now(),\r\n      resolved: false\r\n    };\r\n\r\n    this.alerts.set(alert.id, alert);\r\n\r\n    // Send notifications based on severity\r\n    this.sendAlert(alert);\r\n\r\n    logger.warn(`Alert triggered: ${message}`, alert);\r\n  }\r\n\r\n  async sendAlert(alert) {\r\n    try {\r\n      // Send to configured channels\r\n      for (const channel of this.alertChannels) {\r\n        switch (channel) {\r\n          case 'ui':\r\n            await notificationSystem.error(alert.message, {\r\n              priority: alert.severity === 'critical' ? 'high' : 'medium',\r\n              category: 'monitoring',\r\n              metadata: alert.data\r\n            });\r\n            break;\r\n\r\n          case 'console':\r\n            console.warn('ðŸš¨ MONITORING ALERT:', alert);\r\n            break;\r\n\r\n          case 'storage':\r\n            await this.storeAlert(alert);\r\n            break;\r\n\r\n          case 'webhook':\r\n            await this.sendWebhookAlert(alert);\r\n            break;\r\n\r\n          default:\r\n            console.warn('Unknown alert channel:', channel);\r\n            break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to send alert', {\r\n        alertId: alert.id,\r\n        error: error.message\r\n      });\r\n    }\r\n  }\r\n\r\n  async runHealthChecks() {\r\n    const results = {};\r\n\r\n    for (const [name, checkFn] of this.healthChecks) {\r\n      try {\r\n        const result = await checkFn();\r\n        results[name] = result;\r\n\r\n        // Trigger alerts for unhealthy systems\r\n        if (result.status === 'unhealthy') {\r\n          this.triggerAlert('health', 'critical',\r\n            `Health check failed: ${name}`,\r\n            result\r\n          );\r\n        }\r\n\r\n      } catch (error) {\r\n        results[name] = {\r\n          status: 'error',\r\n          error: error.message\r\n        };\r\n\r\n        this.triggerAlert('health', 'critical',\r\n          `Health check error: ${name}`,\r\n          { error: error.message }\r\n        );\r\n      }\r\n    }\r\n\r\n    await this.storeHealthCheckResults(results);\r\n    return results;\r\n  }\r\n\r\n  addHealthCheck(name, checkFunction) {\r\n    this.healthChecks.push([name, checkFunction]);\r\n  }\r\n\r\n  removeHealthCheck(name) {\r\n    this.healthChecks = this.healthChecks.filter(([checkName]) => checkName !== name);\r\n  }\r\n\r\n  async processAlerts() {\r\n    const now = Date.now();\r\n    const autoResolveTime = 5 * 60 * 1000; // 5 minutes\r\n\r\n    // Auto-resolve old alerts\r\n    for (const [id, alert] of this.alerts.entries()) {\r\n      if (!alert.resolved && now - alert.timestamp > autoResolveTime) {\r\n        await this.resolveAlert(id);\r\n      }\r\n    }\r\n\r\n    // Clean up old resolved alerts\r\n    const oldAlerts = Array.from(this.alerts.entries())\r\n      .filter(([, alert]) => alert.resolved && now - alert.timestamp > 24 * 60 * 60 * 1000);\r\n\r\n    oldAlerts.forEach(([id]) => this.alerts.delete(id));\r\n  }\r\n\r\n  async resolveAlert(alertId) {\r\n    const alert = this.alerts.get(alertId);\r\n    if (alert) {\r\n      alert.resolved = true;\r\n      alert.resolvedAt = Date.now();\r\n\r\n      logger.info('Alert resolved', { alertId, alert: alert.message });\r\n    }\r\n  }\r\n\r\n  categorizeErrors(errors) {\r\n    const categories = {};\r\n\r\n    errors.forEach(error => {\r\n      const category = error.type || 'unknown';\r\n      categories[category] = (categories[category] || 0) + 1;\r\n    });\r\n\r\n    return categories;\r\n  }\r\n\r\n  analyzeMetrics(metrics) {\r\n    // Analyze trends and patterns\r\n    const analysis = {\r\n      timestamp: metrics.timestamp,\r\n      performance: this.analyzePerformance(metrics.performance),\r\n      errors: this.analyzeErrors(metrics.errors),\r\n      cache: this.analyzeCachePerformance(metrics.cache),\r\n      recommendations: []\r\n    };\r\n\r\n    // Generate recommendations\r\n    if (metrics.performance?.domContentLoaded > 3000) {\r\n      analysis.recommendations.push({\r\n        type: 'performance',\r\n        priority: 'medium',\r\n        message: 'DOM Content Loaded time is high. Consider optimizing JavaScript loading.'\r\n      });\r\n    }\r\n\r\n    if (metrics.errors?.errorRate > this.thresholds.errorRate) {\r\n      analysis.recommendations.push({\r\n        type: 'reliability',\r\n        priority: 'high',\r\n        message: 'Error rate is above threshold. Investigate recent errors.'\r\n      });\r\n    }\r\n\r\n    if (metrics.cache?.hitRate < this.thresholds.cacheHitRate) {\r\n      analysis.recommendations.push({\r\n        type: 'performance',\r\n        priority: 'medium',\r\n        message: 'Cache hit rate is low. Review caching strategy.'\r\n      });\r\n    }\r\n\r\n    return analysis;\r\n  }\r\n\r\n  analyzePerformance(performanceMetrics) {\r\n    if (!performanceMetrics) return null;\r\n\r\n    return {\r\n      score: this.calculatePerformanceScore(performanceMetrics),\r\n      bottlenecks: this.identifyBottlenecks(performanceMetrics),\r\n      trends: this.getPerformanceTrends()\r\n    };\r\n  }\r\n\r\n  calculatePerformanceScore(metrics) {\r\n    let score = 100;\r\n\r\n    // Deduct points for slow metrics\r\n    if (metrics.domContentLoaded > 2000) score -= 20;\r\n    if (metrics.loadComplete > 4000) score -= 20;\r\n    if (metrics.firstContentfulPaint > 1500) score -= 15;\r\n    if (metrics.timeToInteractive > 3000) score -= 25;\r\n\r\n    return Math.max(0, score);\r\n  }\r\n\r\n  identifyBottlenecks(metrics) {\r\n    const bottlenecks = [];\r\n\r\n    if (metrics.domContentLoaded > 3000) {\r\n      bottlenecks.push('Slow DOM content loading');\r\n    }\r\n    if (metrics.firstContentfulPaint > 2000) {\r\n      bottlenecks.push('Slow first paint');\r\n    }\r\n    if (metrics.timeToInteractive > 5000) {\r\n      bottlenecks.push('Slow time to interactive');\r\n    }\r\n\r\n    return bottlenecks;\r\n  }\r\n\r\n  getPerformanceTrends() {\r\n    // Simple trend analysis\r\n    const recentMetrics = this.metrics.get('performance.navigation') || [];\r\n    const last5 = recentMetrics.slice(-5);\r\n\r\n    if (last5.length < 2) return 'insufficient_data';\r\n\r\n    const trend = last5[last5.length - 1].value - last5[0].value;\r\n    return trend > 0 ? 'degrading' : 'improving';\r\n  }\r\n\r\n  analyzeErrors(errorMetrics) {\r\n    if (!errorMetrics) return null;\r\n\r\n    return {\r\n      severity: this.categorizeErrorSeverity(errorMetrics),\r\n      patterns: this.identifyErrorPatterns(errorMetrics),\r\n      frequency: errorMetrics.errorRate\r\n    };\r\n  }\r\n\r\n  categorizeErrorSeverity(errorMetrics) {\r\n    if (errorMetrics.errorRate > 0.1) return 'critical';\r\n    if (errorMetrics.errorRate > 0.05) return 'high';\r\n    if (errorMetrics.errorRate > 0.01) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n  identifyErrorPatterns(errorMetrics) {\r\n    const errors = this.metrics.get('errors') || [];\r\n    const recentErrors = errors.slice(-10);\r\n\r\n    const patterns = {};\r\n    recentErrors.forEach(error => {\r\n      const pattern = error.details?.message || error.type;\r\n      patterns[pattern] = (patterns[pattern] || 0) + 1;\r\n    });\r\n\r\n    return patterns;\r\n  }\r\n\r\n  analyzeCachePerformance(cacheMetrics) {\r\n    if (!cacheMetrics) return null;\r\n\r\n    return {\r\n      efficiency: cacheMetrics.hitRate || 0,\r\n      utilization: this.calculateCacheUtilization(cacheMetrics),\r\n      recommendations: this.getCacheRecommendations(cacheMetrics)\r\n    };\r\n  }\r\n\r\n  calculateCacheUtilization(metrics) {\r\n    if (!metrics.memorySize || !metrics.maxMemorySize) return 0;\r\n    return metrics.memorySize / metrics.maxMemorySize;\r\n  }\r\n\r\n  getCacheRecommendations(metrics) {\r\n    const recommendations = [];\r\n\r\n    if (metrics.hitRate < 0.7) {\r\n      recommendations.push('Consider adjusting cache TTL values');\r\n    }\r\n    if (metrics.evictions > metrics.sets * 0.1) {\r\n      recommendations.push('Cache size may be too small');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  monitorNetworkStatus() {\r\n    window.addEventListener('online', () => {\r\n      this.recordMetric('network.status', 1, { status: 'online' });\r\n      logger.info('Network status: online');\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      this.recordMetric('network.status', 0, { status: 'offline' });\r\n      this.triggerAlert('network', 'warning', 'Network connection lost', {});\r\n      logger.warn('Network status: offline');\r\n    });\r\n  }\r\n\r\n  async storeMetrics(metrics) {\r\n    try {\r\n      const key = `metrics:${Date.now()}`;\r\n      await cacheManager.set(key, metrics, {\r\n        ttl: this.monitoring.retentionPeriod,\r\n        tags: ['metrics']\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to store metrics', { error: error.message });\r\n    }\r\n  }\r\n\r\n  async storeAlert(alert) {\r\n    try {\r\n      const key = `alert:${alert.id}`;\r\n      await cacheManager.set(key, alert, {\r\n        ttl: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n        tags: ['alerts']\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to store alert', { error: error.message });\r\n    }\r\n  }\r\n\r\n  async storeHealthCheckResults(results) {\r\n    try {\r\n      const key = `health:${Date.now()}`;\r\n      await cacheManager.set(key, results, {\r\n        ttl: 24 * 60 * 60 * 1000, // 24 hours\r\n        tags: ['health']\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to store health check results', { error: error.message });\r\n    }\r\n  }\r\n\r\n  async sendWebhookAlert(alert) {\r\n    // Placeholder for webhook integration\r\n    logger.info('Webhook alert would be sent', alert);\r\n  }\r\n\r\n  generateAlertId() {\r\n    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  async cleanupOldMetrics() {\r\n    try {\r\n      const cutoff = Date.now() - this.monitoring.retentionPeriod;\r\n\r\n      // Clean up in-memory metrics\r\n      for (const [name, metrics] of this.metrics.entries()) {\r\n        const filtered = metrics.filter(m => m.timestamp > cutoff);\r\n        this.metrics.set(name, filtered);\r\n      }\r\n\r\n      // Clean up cached metrics\r\n      await cacheManager.deleteByTags(['metrics']);\r\n\r\n      logger.debug('Old metrics cleaned up', { cutoff: new Date(cutoff) });\r\n    } catch (error) {\r\n      logger.error('Failed to cleanup old metrics', { error: error.message });\r\n    }\r\n  }\r\n\r\n  async getSystemReport() {\r\n    try {\r\n      const healthChecks = await this.runHealthChecks();\r\n      const recentMetrics = await this.getRecentMetrics();\r\n      const activeAlerts = Array.from(this.alerts.values())\r\n        .filter(alert => !alert.resolved);\r\n\r\n      return {\r\n        timestamp: Date.now(),\r\n        systemHealth: this.calculateOverallHealth(healthChecks),\r\n        healthChecks,\r\n        metrics: recentMetrics,\r\n        alerts: {\r\n          active: activeAlerts.length,\r\n          critical: activeAlerts.filter(a => a.severity === 'critical').length,\r\n          warnings: activeAlerts.filter(a => a.severity === 'warning').length\r\n        },\r\n        performance: await this.getPerformanceSummary(),\r\n        recommendations: this.getSystemRecommendations(healthChecks, recentMetrics)\r\n      };\r\n    } catch (error) {\r\n      logger.error('Failed to generate system report', { error: error.message });\r\n      return { error: error.message };\r\n    }\r\n  }\r\n\r\n  calculateOverallHealth(healthChecks) {\r\n    const statuses = Object.values(healthChecks).map(check => check.status);\r\n    const healthy = statuses.filter(status => status === 'healthy').length;\r\n    const total = statuses.length;\r\n\r\n    if (statuses.includes('unhealthy')) return 'critical';\r\n    if (statuses.includes('degraded')) return 'degraded';\r\n    if (healthy === total) return 'healthy';\r\n    return 'unknown';\r\n  }\r\n\r\n  async getRecentMetrics() {\r\n    const recent = {};\r\n    for (const [name, metrics] of this.metrics.entries()) {\r\n      const recentMetrics = metrics.slice(-5);\r\n      if (recentMetrics.length > 0) {\r\n        recent[name] = {\r\n          latest: recentMetrics[recentMetrics.length - 1],\r\n          count: recentMetrics.length,\r\n          average: recentMetrics.reduce((sum, m) => sum + m.value, 0) / recentMetrics.length\r\n        };\r\n      }\r\n    }\r\n    return recent;\r\n  }\r\n\r\n  async getPerformanceSummary() {\r\n    const navigation = performance.getEntriesByType('navigation')[0];\r\n    if (!navigation) return null;\r\n\r\n    return {\r\n      pageLoad: Math.round(navigation.loadEventEnd - navigation.fetchStart),\r\n      domReady: Math.round(navigation.domContentLoadedEventEnd - navigation.fetchStart),\r\n      firstPaint: this.getFirstPaint(),\r\n      score: this.calculatePerformanceScore({\r\n        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n        loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\r\n        firstContentfulPaint: this.getFirstContentfulPaint(),\r\n        timeToInteractive: navigation.domInteractive - navigation.fetchStart\r\n      })\r\n    };\r\n  }\r\n\r\n  getSystemRecommendations(healthChecks, metrics) {\r\n    const recommendations = [];\r\n\r\n    // Health-based recommendations\r\n    Object.entries(healthChecks).forEach(([name, check]) => {\r\n      if (check.status === 'unhealthy') {\r\n        recommendations.push({\r\n          type: 'critical',\r\n          component: name,\r\n          message: `${name} is unhealthy and requires immediate attention`\r\n        });\r\n      }\r\n    });\r\n\r\n    // Metric-based recommendations\r\n    if (metrics['memory.usage']?.latest?.value > 0.8) {\r\n      recommendations.push({\r\n        type: 'warning',\r\n        component: 'memory',\r\n        message: 'Memory usage is high. Consider clearing caches or reducing data retention.'\r\n      });\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  setThreshold(metric, value) {\r\n    this.thresholds[metric] = value;\r\n    logger.info('Threshold updated', { metric, value });\r\n  }\r\n\r\n  setMonitoringEnabled(enabled) {\r\n    this.monitoring.enabled = enabled;\r\n    logger.info(`Monitoring ${enabled ? 'enabled' : 'disabled'}`);\r\n  }\r\n\r\n  addAlertChannel(channel) {\r\n    if (!this.alertChannels.includes(channel)) {\r\n      this.alertChannels.push(channel);\r\n      logger.info('Alert channel added', { channel });\r\n    }\r\n  }\r\n\r\n  removeAlertChannel(channel) {\r\n    this.alertChannels = this.alertChannels.filter(c => c !== channel);\r\n    logger.info('Alert channel removed', { channel });\r\n  }\r\n\r\n  destroy() {\r\n    if (this.performanceObserver) {\r\n      this.performanceObserver.disconnect();\r\n    }\r\n\r\n    this.monitoring.enabled = false;\r\n    logger.info('Enterprise Monitoring System destroyed');\r\n  }\r\n}\r\n\r\nconst enterpriseMonitoring = new EnterpriseMonitoringSystem();\r\n\r\nexport default enterpriseMonitoring;\r\nexport { EnterpriseMonitoringSystem };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}