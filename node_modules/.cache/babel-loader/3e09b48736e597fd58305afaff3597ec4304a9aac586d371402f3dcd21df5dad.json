{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { googleSheetsService } from '../api/googleSheetsService';\nexport function useJobCounts(addNotification) {\n  _s();\n  const [jobCounts, setJobCounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load job counts from API\n  const loadJobCountsData = useCallback(async (isManualRefresh = false) => {\n    if (!isManualRefresh) setLoading(true);\n    try {\n      const response = await googleSheetsService.fetchJobCounts();\n      if (response.success) {\n        const processedJobCounts = (response.data || response.jobCounts || []).map((jobCount, index) => ({\n          ...jobCount,\n          // Ensure we have an ID field\n          id: jobCount.id || `jobcount_${Date.now()}_${index}`,\n          // Format name for display\n          fullName: jobCount.customerName || `${jobCount.firstName || ''} ${jobCount.lastName || ''}`.trim() || 'Unknown Customer'\n        })).sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0));\n        setJobCounts(processedJobCounts);\n        const message = isManualRefresh ? `Job counts refreshed. Found ${processedJobCounts.length} records.` : `Job counts loaded. Found ${processedJobCounts.length} records.`;\n        addNotification(message, 'success');\n      } else {\n        addNotification(`Error fetching job counts: ${response.message}`, 'error');\n      }\n    } catch (error) {\n      addNotification(`Error loading job counts: ${error.message}`, 'error');\n    } finally {\n      if (!isManualRefresh) setLoading(false);\n    }\n  }, [addNotification]);\n\n  // Load data on component mount\n  useEffect(() => {\n    loadJobCountsData();\n  }, [loadJobCountsData]);\n\n  // Add new job count\n  const addJobCount = useCallback(async jobCountData => {\n    try {\n      const response = await googleSheetsService.addJobCount(jobCountData);\n      if (response.success && response.jobCount) {\n        const newJobCount = {\n          ...response.jobCount,\n          id: response.jobCount.id || `jobcount_${Date.now()}`,\n          fullName: response.jobCount.customerName || `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown Customer'\n        };\n        setJobCounts(prev => [newJobCount, ...prev].sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)));\n        addNotification(`Job count added: ${newJobCount.fullName}`, 'success');\n      } else {\n        addNotification(`Error adding job count: ${response.message}`, 'error');\n      }\n      return response;\n    } catch (error) {\n      addNotification(`Error adding job count: ${error.message}`, 'error');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }, [addNotification]);\n\n  // Update existing job count\n  const updateJobCount = useCallback(async updatedJobCount => {\n    try {\n      const response = await googleSheetsService.updateJobCount(updatedJobCount);\n      if (response.success && response.jobCount) {\n        const updatedData = {\n          ...response.jobCount,\n          id: response.jobCount.id || updatedJobCount.id,\n          fullName: response.jobCount.customerName || `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown Customer'\n        };\n        setJobCounts(prev => prev.map(jc => jc.id === updatedData.id ? updatedData : jc));\n        addNotification(`Job count updated: ${updatedData.fullName}`, 'info');\n      } else {\n        addNotification(`Error updating job count: ${response.message}`, 'error');\n      }\n      return response;\n    } catch (error) {\n      addNotification(`Error updating job count: ${error.message}`, 'error');\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }, [addNotification]);\n\n  // Delete job count\n  const deleteJobCount = useCallback(async jobCountId => {\n    const jobCountToDelete = jobCounts.find(jc => jc.id === jobCountId);\n    if (!jobCountToDelete) {\n      addNotification('Job count not found', 'error');\n      return;\n    }\n    const confirmMessage = `Are you sure you want to delete the job count for ${jobCountToDelete.fullName}?`;\n    if (window.confirm(confirmMessage)) {\n      try {\n        const response = await googleSheetsService.deleteJobCount(jobCountId);\n        if (response.success) {\n          setJobCounts(currentJobCounts => currentJobCounts.filter(jc => jc.id !== jobCountId));\n          addNotification(`Job count deleted: ${jobCountToDelete.fullName}`, 'info');\n        } else {\n          addNotification(`Error deleting job count: ${response.message}`, 'error');\n        }\n      } catch (error) {\n        addNotification(`Error deleting job count: ${error.message}`, 'error');\n      }\n    }\n  }, [jobCounts, addNotification]);\n  return {\n    jobCounts,\n    loading,\n    refreshJobCounts: () => loadJobCountsData(true),\n    addJobCount,\n    updateJobCount,\n    deleteJobCount\n  };\n}\n_s(useJobCounts, \"ENJ1QZdkKT4E2LB7wDogJdSVjok=\");","map":{"version":3,"names":["useState","useEffect","useCallback","googleSheetsService","useJobCounts","addNotification","_s","jobCounts","setJobCounts","loading","setLoading","loadJobCountsData","isManualRefresh","response","fetchJobCounts","success","processedJobCounts","data","map","jobCount","index","id","Date","now","fullName","customerName","firstName","lastName","trim","sort","a","b","date","message","length","error","addJobCount","jobCountData","newJobCount","prev","updateJobCount","updatedJobCount","updatedData","jc","deleteJobCount","jobCountId","jobCountToDelete","find","confirmMessage","window","confirm","currentJobCounts","filter","refreshJobCounts"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useJobCounts.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nexport function useJobCounts(addNotification) {\r\n    const [jobCounts, setJobCounts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Load job counts from API\r\n    const loadJobCountsData = useCallback(async (isManualRefresh = false) => {\r\n        if (!isManualRefresh) setLoading(true);\r\n\r\n        try {\r\n            const response = await googleSheetsService.fetchJobCounts();\r\n\r\n            if (response.success) {\r\n                const processedJobCounts = (response.data || response.jobCounts || [])\r\n                    .map((jobCount, index) => ({\r\n                        ...jobCount,\r\n                        // Ensure we have an ID field\r\n                        id: jobCount.id || `jobcount_${Date.now()}_${index}`,\r\n                        // Format name for display\r\n                        fullName: jobCount.customerName ||\r\n                                 `${jobCount.firstName || ''} ${jobCount.lastName || ''}`.trim() ||\r\n                                 'Unknown Customer'\r\n                    }))\r\n                    .sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0));\r\n\r\n                setJobCounts(processedJobCounts);\r\n\r\n                const message = isManualRefresh\r\n                    ? `Job counts refreshed. Found ${processedJobCounts.length} records.`\r\n                    : `Job counts loaded. Found ${processedJobCounts.length} records.`;\r\n\r\n                addNotification(message, 'success');\r\n            } else {\r\n                addNotification(`Error fetching job counts: ${response.message}`, 'error');\r\n            }\r\n        } catch (error) {\r\n            addNotification(`Error loading job counts: ${error.message}`, 'error');\r\n        } finally {\r\n            if (!isManualRefresh) setLoading(false);\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Load data on component mount\r\n    useEffect(() => {\r\n        loadJobCountsData();\r\n    }, [loadJobCountsData]);\r\n\r\n    // Add new job count\r\n    const addJobCount = useCallback(async (jobCountData) => {\r\n        try {\r\n            const response = await googleSheetsService.addJobCount(jobCountData);\r\n\r\n            if (response.success && response.jobCount) {\r\n                const newJobCount = {\r\n                    ...response.jobCount,\r\n                    id: response.jobCount.id || `jobcount_${Date.now()}`,\r\n                    fullName: response.jobCount.customerName ||\r\n                             `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() ||\r\n                             'Unknown Customer'\r\n                };\r\n\r\n                setJobCounts(prev => [newJobCount, ...prev].sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)));\r\n                addNotification(`Job count added: ${newJobCount.fullName}`, 'success');\r\n            } else {\r\n                addNotification(`Error adding job count: ${response.message}`, 'error');\r\n            }\r\n\r\n            return response;\r\n        } catch (error) {\r\n            addNotification(`Error adding job count: ${error.message}`, 'error');\r\n            return { success: false, message: error.message };\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Update existing job count\r\n    const updateJobCount = useCallback(async (updatedJobCount) => {\r\n        try {\r\n            const response = await googleSheetsService.updateJobCount(updatedJobCount);\r\n\r\n            if (response.success && response.jobCount) {\r\n                const updatedData = {\r\n                    ...response.jobCount,\r\n                    id: response.jobCount.id || updatedJobCount.id,\r\n                    fullName: response.jobCount.customerName ||\r\n                             `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() ||\r\n                             'Unknown Customer'\r\n                };\r\n\r\n                setJobCounts(prev => prev.map(jc => (jc.id === updatedData.id ? updatedData : jc)));\r\n                addNotification(`Job count updated: ${updatedData.fullName}`, 'info');\r\n            } else {\r\n                addNotification(`Error updating job count: ${response.message}`, 'error');\r\n            }\r\n\r\n            return response;\r\n        } catch (error) {\r\n            addNotification(`Error updating job count: ${error.message}`, 'error');\r\n            return { success: false, message: error.message };\r\n        }\r\n    }, [addNotification]);\r\n\r\n    // Delete job count\r\n    const deleteJobCount = useCallback(async (jobCountId) => {\r\n        const jobCountToDelete = jobCounts.find(jc => jc.id === jobCountId);\r\n        if (!jobCountToDelete) {\r\n            addNotification('Job count not found', 'error');\r\n            return;\r\n        }\r\n\r\n        const confirmMessage = `Are you sure you want to delete the job count for ${jobCountToDelete.fullName}?`;\r\n        if (window.confirm(confirmMessage)) {\r\n            try {\r\n                const response = await googleSheetsService.deleteJobCount(jobCountId);\r\n\r\n                if (response.success) {\r\n                    setJobCounts(currentJobCounts => currentJobCounts.filter(jc => jc.id !== jobCountId));\r\n                    addNotification(`Job count deleted: ${jobCountToDelete.fullName}`, 'info');\r\n                } else {\r\n                    addNotification(`Error deleting job count: ${response.message}`, 'error');\r\n                }\r\n            } catch (error) {\r\n                addNotification(`Error deleting job count: ${error.message}`, 'error');\r\n            }\r\n        }\r\n    }, [jobCounts, addNotification]);\r\n\r\n    return {\r\n        jobCounts,\r\n        loading,\r\n        refreshJobCounts: () => loadJobCountsData(true),\r\n        addJobCount,\r\n        updateJobCount,\r\n        deleteJobCount\r\n    };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}