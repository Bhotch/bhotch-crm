{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Enterprise Security Manager\r\n *\r\n * Comprehensive security framework for protecting sensitive data,\r\n * preventing attacks, and ensuring compliance with data protection regulations.\r\n */class SecurityManager{constructor(){this.encryptionKey=this.generateEncryptionKey();this.rateLimiter=new Map();this.securityLogs=[];this.bannedIPs=new Set();this.sessionTokens=new Map();}/**\r\n     * Input sanitization and validation\r\n     */sanitizeInput(input){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'text';if(typeof input!=='string'){input=String(input);}switch(type){case'sqft':// Validate SQFT input for calculations\nconst cleaned=input.replace(/[^\\d.]/g,'');const number=parseFloat(cleaned);if(isNaN(number)||number<=0||number>100000){throw new Error('Invalid SQFT value: must be between 1 and 100,000');}return number;case'name':// Sanitize customer names\nreturn input.replace(/[<>\\\"'&]/g,'').trim().slice(0,100);case'phone':// Validate and format phone numbers\nconst phoneClean=input.replace(/\\D/g,'');if(phoneClean.length!==10){throw new Error('Invalid phone number: must be 10 digits');}return phoneClean;case'email':// Email validation\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(input)){throw new Error('Invalid email format');}return input.toLowerCase().trim();case'address':// Address sanitization\nreturn input.replace(/[<>\\\"']/g,'').trim().slice(0,500);default:// General text sanitization\nreturn input.replace(/[<>\\\"'&]/g,'').trim();}}/**\r\n     * Rate limiting protection\r\n     */checkRateLimit(identifier){let maxRequests=arguments.length>1&&arguments[1]!==undefined?arguments[1]:60;let windowMs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:60000;const now=Date.now();const windowStart=now-windowMs;if(!this.rateLimiter.has(identifier)){this.rateLimiter.set(identifier,[]);}const requests=this.rateLimiter.get(identifier);// Remove old requests outside the window\nconst validRequests=requests.filter(timestamp=>timestamp>windowStart);if(validRequests.length>=maxRequests){this.logSecurityEvent('RATE_LIMIT_EXCEEDED',{identifier,requests:validRequests.length});throw new Error('Rate limit exceeded. Please try again later.');}validRequests.push(now);this.rateLimiter.set(identifier,validRequests);return true;}/**\r\n     * Data encryption for sensitive information\r\n     */encryptSensitiveData(data){try{const jsonString=JSON.stringify(data);const encoded=btoa(jsonString);return\"encrypted_\".concat(encoded);}catch(error){this.logSecurityEvent('ENCRYPTION_FAILED',{error:error.message});throw new Error('Failed to encrypt sensitive data');}}/**\r\n     * Data decryption\r\n     */decryptSensitiveData(encryptedData){try{if(!encryptedData.startsWith('encrypted_')){throw new Error('Invalid encrypted data format');}const encoded=encryptedData.substring(10);const jsonString=atob(encoded);return JSON.parse(jsonString);}catch(error){this.logSecurityEvent('DECRYPTION_FAILED',{error:error.message});throw new Error('Failed to decrypt sensitive data');}}/**\r\n     * Secure session management\r\n     */generateSessionToken(userId){const token=this.generateRandomString(32);const expiresAt=Date.now()+24*60*60*1000;// 24 hours\nthis.sessionTokens.set(token,{userId:userId,createdAt:Date.now(),expiresAt:expiresAt,lastAccessed:Date.now()});this.logSecurityEvent('SESSION_CREATED',{userId,token:token.substring(0,8)+'...'});return token;}/**\r\n     * Validate session token\r\n     */validateSession(token){if(!token||!this.sessionTokens.has(token)){this.logSecurityEvent('INVALID_SESSION_TOKEN',{token:(token===null||token===void 0?void 0:token.substring(0,8))+'...'});return false;}const session=this.sessionTokens.get(token);if(Date.now()>session.expiresAt){this.sessionTokens.delete(token);this.logSecurityEvent('SESSION_EXPIRED',{userId:session.userId});return false;}// Update last accessed time\nsession.lastAccessed=Date.now();this.sessionTokens.set(token,session);return session;}/**\r\n     * SQL injection prevention for database queries\r\n     */sanitizeQueryParameters(params){const sanitized={};for(const[key,value]of Object.entries(params)){if(typeof value==='string'){// Remove potential SQL injection patterns\nsanitized[key]=value.replace(/['\";\\\\]/g,'').replace(/--/g,'').replace(/\\/\\*/g,'').replace(/\\*\\//g,'').trim();}else{sanitized[key]=value;}}return sanitized;}/**\r\n     * XSS protection for output data\r\n     */escapeHtml(unsafe){return unsafe.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#039;\");}/**\r\n     * CSRF token generation and validation\r\n     */generateCSRFToken(){return this.generateRandomString(32);}/**\r\n     * Content Security Policy headers\r\n     */getCSPHeaders(){return{'Content-Security-Policy':\"default-src 'self'; script-src 'self' 'unsafe-inline' https://apis.google.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://script.google.com https://sheets.googleapis.com;\",'X-Frame-Options':'DENY','X-Content-Type-Options':'nosniff','X-XSS-Protection':'1; mode=block','Strict-Transport-Security':'max-age=31536000; includeSubDomains','Referrer-Policy':'strict-origin-when-cross-origin'};}/**\r\n     * Audit logging for security events\r\n     */logSecurityEvent(eventType){let details=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const logEntry={timestamp:new Date().toISOString(),eventType:eventType,details:details,userAgent:typeof navigator!=='undefined'?navigator.userAgent:'unknown',ip:this.getClientIP(),sessionId:this.getCurrentSessionId()};this.securityLogs.push(logEntry);// Keep only last 1000 log entries to prevent memory issues\nif(this.securityLogs.length>1000){this.securityLogs=this.securityLogs.slice(-1000);}// Send critical events to monitoring system\nif(this.isCriticalEvent(eventType)){this.sendSecurityAlert(logEntry);}}/**\r\n     * Data masking for sensitive information in logs\r\n     */maskSensitiveData(data){const masked=_objectSpread({},data);// Mask common sensitive fields\nif(masked.phoneNumber){masked.phoneNumber=\"***-***-\".concat(masked.phoneNumber.slice(-4));}if(masked.email){const[username,domain]=masked.email.split('@');masked.email=\"\".concat(username.substring(0,2),\"***@\").concat(domain);}if(masked.address){masked.address=masked.address.substring(0,10)+'***';}return masked;}/**\r\n     * Vulnerability scanning for input data\r\n     */scanForVulnerabilities(input){const vulnerabilityPatterns=[// SQL Injection patterns\n/(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,// XSS patterns\n/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,// Command injection patterns\n/(\\b(eval|exec|system|shell_exec|passthru|cmd)\\b)/i,// Path traversal patterns\n/(\\.\\.\\/|\\.\\.\\\\)/g,// LDAP injection patterns\n/(\\*|\\(|\\)|\\||\\&)/g];for(const pattern of vulnerabilityPatterns){if(pattern.test(input)){this.logSecurityEvent('VULNERABILITY_DETECTED',{pattern:pattern.toString(),input:input.substring(0,100)+'...'});throw new Error('Potentially malicious input detected');}}return true;}/**\r\n     * Access control validation\r\n     */validatePermissions(userId,resource,action){// Define permission matrix\nconst permissions={'job_counts':['read','write','delete'],'calculations':['read','execute'],'system_monitoring':['read'],'batch_processing':['execute']};if(!permissions[resource]||!permissions[resource].includes(action)){this.logSecurityEvent('ACCESS_DENIED',{userId,resource,action});throw new Error('Access denied: insufficient permissions');}return true;}/**\r\n     * Data backup encryption\r\n     */encryptBackupData(data){const timestamp=Date.now();const checksum=this.calculateChecksum(JSON.stringify(data));const backupPackage={data:data,timestamp:timestamp,checksum:checksum,version:'1.0'};return this.encryptSensitiveData(backupPackage);}/**\r\n     * Secure data export with watermarking\r\n     */createSecureExport(data,userId){const exportData=_objectSpread(_objectSpread({},data),{},{exportMetadata:{exportedBy:userId,exportedAt:new Date().toISOString(),exportId:this.generateRandomString(16),watermark:\"CONFIDENTIAL - Exported by User \".concat(userId)}});this.logSecurityEvent('DATA_EXPORTED',{userId,recordCount:data.length});return exportData;}/**\r\n     * Utility functions\r\n     */generateRandomString(length){const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';let result='';for(let i=0;i<length;i++){result+=chars.charAt(Math.floor(Math.random()*chars.length));}return result;}generateEncryptionKey(){return this.generateRandomString(32);}calculateChecksum(data){let hash=0;for(let i=0;i<data.length;i++){const char=data.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32-bit integer\n}return hash.toString(16);}getClientIP(){// This would typically be handled server-side\nreturn'client-ip-masked';}getCurrentSessionId(){return sessionStorage.getItem('sessionId')||'anonymous';}isCriticalEvent(eventType){const criticalEvents=['RATE_LIMIT_EXCEEDED','VULNERABILITY_DETECTED','ACCESS_DENIED','ENCRYPTION_FAILED','SESSION_HIJACK_ATTEMPT'];return criticalEvents.includes(eventType);}sendSecurityAlert(logEntry){// In a real implementation, this would send alerts to administrators\nconsole.warn('SECURITY ALERT:',logEntry);}/**\r\n     * Get security report\r\n     */getSecurityReport(){const now=Date.now();const last24Hours=now-24*60*60*1000;const recentLogs=this.securityLogs.filter(log=>new Date(log.timestamp).getTime()>last24Hours);const eventCounts=recentLogs.reduce((counts,log)=>{counts[log.eventType]=(counts[log.eventType]||0)+1;return counts;},{});return{totalEvents:recentLogs.length,eventBreakdown:eventCounts,criticalEvents:recentLogs.filter(log=>this.isCriticalEvent(log.eventType)),activeSessions:this.sessionTokens.size,generatedAt:new Date().toISOString()};}}export default SecurityManager;","map":{"version":3,"names":["SecurityManager","constructor","encryptionKey","generateEncryptionKey","rateLimiter","Map","securityLogs","bannedIPs","Set","sessionTokens","sanitizeInput","input","type","arguments","length","undefined","String","cleaned","replace","number","parseFloat","isNaN","Error","trim","slice","phoneClean","emailRegex","test","toLowerCase","checkRateLimit","identifier","maxRequests","windowMs","now","Date","windowStart","has","set","requests","get","validRequests","filter","timestamp","logSecurityEvent","push","encryptSensitiveData","data","jsonString","JSON","stringify","encoded","btoa","concat","error","message","decryptSensitiveData","encryptedData","startsWith","substring","atob","parse","generateSessionToken","userId","token","generateRandomString","expiresAt","createdAt","lastAccessed","validateSession","session","delete","sanitizeQueryParameters","params","sanitized","key","value","Object","entries","escapeHtml","unsafe","generateCSRFToken","getCSPHeaders","eventType","details","logEntry","toISOString","userAgent","navigator","ip","getClientIP","sessionId","getCurrentSessionId","isCriticalEvent","sendSecurityAlert","maskSensitiveData","masked","_objectSpread","phoneNumber","email","username","domain","split","address","scanForVulnerabilities","vulnerabilityPatterns","pattern","toString","validatePermissions","resource","action","permissions","includes","encryptBackupData","checksum","calculateChecksum","backupPackage","version","createSecureExport","exportData","exportMetadata","exportedBy","exportedAt","exportId","watermark","recordCount","chars","result","i","charAt","Math","floor","random","hash","char","charCodeAt","sessionStorage","getItem","criticalEvents","console","warn","getSecurityReport","last24Hours","recentLogs","log","getTime","eventCounts","reduce","counts","totalEvents","eventBreakdown","activeSessions","size","generatedAt"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/securityManager.js"],"sourcesContent":["/**\r\n * Enterprise Security Manager\r\n *\r\n * Comprehensive security framework for protecting sensitive data,\r\n * preventing attacks, and ensuring compliance with data protection regulations.\r\n */\r\n\r\nclass SecurityManager {\r\n    constructor() {\r\n        this.encryptionKey = this.generateEncryptionKey();\r\n        this.rateLimiter = new Map();\r\n        this.securityLogs = [];\r\n        this.bannedIPs = new Set();\r\n        this.sessionTokens = new Map();\r\n    }\r\n\r\n    /**\r\n     * Input sanitization and validation\r\n     */\r\n    sanitizeInput(input, type = 'text') {\r\n        if (typeof input !== 'string') {\r\n            input = String(input);\r\n        }\r\n\r\n        switch (type) {\r\n            case 'sqft':\r\n                // Validate SQFT input for calculations\r\n                const cleaned = input.replace(/[^\\d.]/g, '');\r\n                const number = parseFloat(cleaned);\r\n                if (isNaN(number) || number <= 0 || number > 100000) {\r\n                    throw new Error('Invalid SQFT value: must be between 1 and 100,000');\r\n                }\r\n                return number;\r\n\r\n            case 'name':\r\n                // Sanitize customer names\r\n                return input.replace(/[<>\\\"'&]/g, '').trim().slice(0, 100);\r\n\r\n            case 'phone':\r\n                // Validate and format phone numbers\r\n                const phoneClean = input.replace(/\\D/g, '');\r\n                if (phoneClean.length !== 10) {\r\n                    throw new Error('Invalid phone number: must be 10 digits');\r\n                }\r\n                return phoneClean;\r\n\r\n            case 'email':\r\n                // Email validation\r\n                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n                if (!emailRegex.test(input)) {\r\n                    throw new Error('Invalid email format');\r\n                }\r\n                return input.toLowerCase().trim();\r\n\r\n            case 'address':\r\n                // Address sanitization\r\n                return input.replace(/[<>\\\"']/g, '').trim().slice(0, 500);\r\n\r\n            default:\r\n                // General text sanitization\r\n                return input.replace(/[<>\\\"'&]/g, '').trim();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rate limiting protection\r\n     */\r\n    checkRateLimit(identifier, maxRequests = 60, windowMs = 60000) {\r\n        const now = Date.now();\r\n        const windowStart = now - windowMs;\r\n\r\n        if (!this.rateLimiter.has(identifier)) {\r\n            this.rateLimiter.set(identifier, []);\r\n        }\r\n\r\n        const requests = this.rateLimiter.get(identifier);\r\n\r\n        // Remove old requests outside the window\r\n        const validRequests = requests.filter(timestamp => timestamp > windowStart);\r\n\r\n        if (validRequests.length >= maxRequests) {\r\n            this.logSecurityEvent('RATE_LIMIT_EXCEEDED', { identifier, requests: validRequests.length });\r\n            throw new Error('Rate limit exceeded. Please try again later.');\r\n        }\r\n\r\n        validRequests.push(now);\r\n        this.rateLimiter.set(identifier, validRequests);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Data encryption for sensitive information\r\n     */\r\n    encryptSensitiveData(data) {\r\n        try {\r\n            const jsonString = JSON.stringify(data);\r\n            const encoded = btoa(jsonString);\r\n            return `encrypted_${encoded}`;\r\n        } catch (error) {\r\n            this.logSecurityEvent('ENCRYPTION_FAILED', { error: error.message });\r\n            throw new Error('Failed to encrypt sensitive data');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data decryption\r\n     */\r\n    decryptSensitiveData(encryptedData) {\r\n        try {\r\n            if (!encryptedData.startsWith('encrypted_')) {\r\n                throw new Error('Invalid encrypted data format');\r\n            }\r\n\r\n            const encoded = encryptedData.substring(10);\r\n            const jsonString = atob(encoded);\r\n            return JSON.parse(jsonString);\r\n        } catch (error) {\r\n            this.logSecurityEvent('DECRYPTION_FAILED', { error: error.message });\r\n            throw new Error('Failed to decrypt sensitive data');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Secure session management\r\n     */\r\n    generateSessionToken(userId) {\r\n        const token = this.generateRandomString(32);\r\n        const expiresAt = Date.now() + (24 * 60 * 60 * 1000); // 24 hours\r\n\r\n        this.sessionTokens.set(token, {\r\n            userId: userId,\r\n            createdAt: Date.now(),\r\n            expiresAt: expiresAt,\r\n            lastAccessed: Date.now()\r\n        });\r\n\r\n        this.logSecurityEvent('SESSION_CREATED', { userId, token: token.substring(0, 8) + '...' });\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Validate session token\r\n     */\r\n    validateSession(token) {\r\n        if (!token || !this.sessionTokens.has(token)) {\r\n            this.logSecurityEvent('INVALID_SESSION_TOKEN', { token: token?.substring(0, 8) + '...' });\r\n            return false;\r\n        }\r\n\r\n        const session = this.sessionTokens.get(token);\r\n\r\n        if (Date.now() > session.expiresAt) {\r\n            this.sessionTokens.delete(token);\r\n            this.logSecurityEvent('SESSION_EXPIRED', { userId: session.userId });\r\n            return false;\r\n        }\r\n\r\n        // Update last accessed time\r\n        session.lastAccessed = Date.now();\r\n        this.sessionTokens.set(token, session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * SQL injection prevention for database queries\r\n     */\r\n    sanitizeQueryParameters(params) {\r\n        const sanitized = {};\r\n\r\n        for (const [key, value] of Object.entries(params)) {\r\n            if (typeof value === 'string') {\r\n                // Remove potential SQL injection patterns\r\n                sanitized[key] = value\r\n                    .replace(/['\";\\\\]/g, '')\r\n                    .replace(/--/g, '')\r\n                    .replace(/\\/\\*/g, '')\r\n                    .replace(/\\*\\//g, '')\r\n                    .trim();\r\n            } else {\r\n                sanitized[key] = value;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    /**\r\n     * XSS protection for output data\r\n     */\r\n    escapeHtml(unsafe) {\r\n        return unsafe\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    }\r\n\r\n    /**\r\n     * CSRF token generation and validation\r\n     */\r\n    generateCSRFToken() {\r\n        return this.generateRandomString(32);\r\n    }\r\n\r\n    /**\r\n     * Content Security Policy headers\r\n     */\r\n    getCSPHeaders() {\r\n        return {\r\n            'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' https://apis.google.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://script.google.com https://sheets.googleapis.com;\",\r\n            'X-Frame-Options': 'DENY',\r\n            'X-Content-Type-Options': 'nosniff',\r\n            'X-XSS-Protection': '1; mode=block',\r\n            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\r\n            'Referrer-Policy': 'strict-origin-when-cross-origin'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Audit logging for security events\r\n     */\r\n    logSecurityEvent(eventType, details = {}) {\r\n        const logEntry = {\r\n            timestamp: new Date().toISOString(),\r\n            eventType: eventType,\r\n            details: details,\r\n            userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\r\n            ip: this.getClientIP(),\r\n            sessionId: this.getCurrentSessionId()\r\n        };\r\n\r\n        this.securityLogs.push(logEntry);\r\n\r\n        // Keep only last 1000 log entries to prevent memory issues\r\n        if (this.securityLogs.length > 1000) {\r\n            this.securityLogs = this.securityLogs.slice(-1000);\r\n        }\r\n\r\n        // Send critical events to monitoring system\r\n        if (this.isCriticalEvent(eventType)) {\r\n            this.sendSecurityAlert(logEntry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data masking for sensitive information in logs\r\n     */\r\n    maskSensitiveData(data) {\r\n        const masked = { ...data };\r\n\r\n        // Mask common sensitive fields\r\n        if (masked.phoneNumber) {\r\n            masked.phoneNumber = `***-***-${masked.phoneNumber.slice(-4)}`;\r\n        }\r\n        if (masked.email) {\r\n            const [username, domain] = masked.email.split('@');\r\n            masked.email = `${username.substring(0, 2)}***@${domain}`;\r\n        }\r\n        if (masked.address) {\r\n            masked.address = masked.address.substring(0, 10) + '***';\r\n        }\r\n\r\n        return masked;\r\n    }\r\n\r\n    /**\r\n     * Vulnerability scanning for input data\r\n     */\r\n    scanForVulnerabilities(input) {\r\n        const vulnerabilityPatterns = [\r\n            // SQL Injection patterns\r\n            /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,\r\n            // XSS patterns\r\n            /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            // Command injection patterns\r\n            /(\\b(eval|exec|system|shell_exec|passthru|cmd)\\b)/i,\r\n            // Path traversal patterns\r\n            /(\\.\\.\\/|\\.\\.\\\\)/g,\r\n            // LDAP injection patterns\r\n            /(\\*|\\(|\\)|\\||\\&)/g\r\n        ];\r\n\r\n        for (const pattern of vulnerabilityPatterns) {\r\n            if (pattern.test(input)) {\r\n                this.logSecurityEvent('VULNERABILITY_DETECTED', {\r\n                    pattern: pattern.toString(),\r\n                    input: input.substring(0, 100) + '...'\r\n                });\r\n                throw new Error('Potentially malicious input detected');\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Access control validation\r\n     */\r\n    validatePermissions(userId, resource, action) {\r\n        // Define permission matrix\r\n        const permissions = {\r\n            'job_counts': ['read', 'write', 'delete'],\r\n            'calculations': ['read', 'execute'],\r\n            'system_monitoring': ['read'],\r\n            'batch_processing': ['execute']\r\n        };\r\n\r\n        if (!permissions[resource] || !permissions[resource].includes(action)) {\r\n            this.logSecurityEvent('ACCESS_DENIED', { userId, resource, action });\r\n            throw new Error('Access denied: insufficient permissions');\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Data backup encryption\r\n     */\r\n    encryptBackupData(data) {\r\n        const timestamp = Date.now();\r\n        const checksum = this.calculateChecksum(JSON.stringify(data));\r\n\r\n        const backupPackage = {\r\n            data: data,\r\n            timestamp: timestamp,\r\n            checksum: checksum,\r\n            version: '1.0'\r\n        };\r\n\r\n        return this.encryptSensitiveData(backupPackage);\r\n    }\r\n\r\n    /**\r\n     * Secure data export with watermarking\r\n     */\r\n    createSecureExport(data, userId) {\r\n        const exportData = {\r\n            ...data,\r\n            exportMetadata: {\r\n                exportedBy: userId,\r\n                exportedAt: new Date().toISOString(),\r\n                exportId: this.generateRandomString(16),\r\n                watermark: `CONFIDENTIAL - Exported by User ${userId}`\r\n            }\r\n        };\r\n\r\n        this.logSecurityEvent('DATA_EXPORTED', { userId, recordCount: data.length });\r\n        return exportData;\r\n    }\r\n\r\n    /**\r\n     * Utility functions\r\n     */\r\n    generateRandomString(length) {\r\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        let result = '';\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    generateEncryptionKey() {\r\n        return this.generateRandomString(32);\r\n    }\r\n\r\n    calculateChecksum(data) {\r\n        let hash = 0;\r\n        for (let i = 0; i < data.length; i++) {\r\n            const char = data.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32-bit integer\r\n        }\r\n        return hash.toString(16);\r\n    }\r\n\r\n    getClientIP() {\r\n        // This would typically be handled server-side\r\n        return 'client-ip-masked';\r\n    }\r\n\r\n    getCurrentSessionId() {\r\n        return sessionStorage.getItem('sessionId') || 'anonymous';\r\n    }\r\n\r\n    isCriticalEvent(eventType) {\r\n        const criticalEvents = [\r\n            'RATE_LIMIT_EXCEEDED',\r\n            'VULNERABILITY_DETECTED',\r\n            'ACCESS_DENIED',\r\n            'ENCRYPTION_FAILED',\r\n            'SESSION_HIJACK_ATTEMPT'\r\n        ];\r\n        return criticalEvents.includes(eventType);\r\n    }\r\n\r\n    sendSecurityAlert(logEntry) {\r\n        // In a real implementation, this would send alerts to administrators\r\n        console.warn('SECURITY ALERT:', logEntry);\r\n    }\r\n\r\n    /**\r\n     * Get security report\r\n     */\r\n    getSecurityReport() {\r\n        const now = Date.now();\r\n        const last24Hours = now - (24 * 60 * 60 * 1000);\r\n\r\n        const recentLogs = this.securityLogs.filter(log =>\r\n            new Date(log.timestamp).getTime() > last24Hours\r\n        );\r\n\r\n        const eventCounts = recentLogs.reduce((counts, log) => {\r\n            counts[log.eventType] = (counts[log.eventType] || 0) + 1;\r\n            return counts;\r\n        }, {});\r\n\r\n        return {\r\n            totalEvents: recentLogs.length,\r\n            eventBreakdown: eventCounts,\r\n            criticalEvents: recentLogs.filter(log => this.isCriticalEvent(log.eventType)),\r\n            activeSessions: this.sessionTokens.size,\r\n            generatedAt: new Date().toISOString()\r\n        };\r\n    }\r\n}\r\n\r\nexport default SecurityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}