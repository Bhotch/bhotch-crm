{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import cacheManager from'./advancedCache';class EnterpriseLogger{constructor(){this.logLevels={ERROR:0,WARN:1,INFO:2,DEBUG:3,TRACE:4};this.currentLevel=this.logLevels.INFO;this.logBuffer=[];this.maxBufferSize=1000;this.flushInterval=30000;// 30 seconds\nthis.endpoints=[];this.metadata=this.collectMetadata();this.initializeLogger();}initializeLogger(){// Start periodic flush\nsetInterval(()=>this.flushLogs(),this.flushInterval);// Handle page unload\nwindow.addEventListener('beforeunload',()=>this.flushLogs(true));// Handle visibility change\ndocument.addEventListener('visibilitychange',()=>{if(document.visibilityState==='hidden'){this.flushLogs(true);}});// Global error handler\nwindow.addEventListener('error',event=>{var _event$error;this.error('Global Error',{message:event.message,filename:event.filename,lineno:event.lineno,colno:event.colno,stack:(_event$error=event.error)===null||_event$error===void 0?void 0:_event$error.stack});});// Unhandled promise rejection handler\nwindow.addEventListener('unhandledrejection',event=>{this.error('Unhandled Promise Rejection',{reason:event.reason,promise:event.promise});});}collectMetadata(){return{userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine,screen:{width:screen.width,height:screen.height,colorDepth:screen.colorDepth},viewport:{width:window.innerWidth,height:window.innerHeight},url:window.location.href,referrer:document.referrer,timestamp:Date.now(),sessionId:this.getSessionId(),userId:this.getUserId()};}getSessionId(){let sessionId=sessionStorage.getItem('loggerSessionId');if(!sessionId){sessionId=this.generateId();sessionStorage.setItem('loggerSessionId',sessionId);}return sessionId;}getUserId(){return localStorage.getItem('userId')||'anonymous';}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2);}setLevel(level){if(typeof level==='string'){var _this$logLevels$level;this.currentLevel=(_this$logLevels$level=this.logLevels[level.toUpperCase()])!==null&&_this$logLevels$level!==void 0?_this$logLevels$level:this.logLevels.INFO;}else{this.currentLevel=level;}}addEndpoint(endpoint){this.endpoints.push(endpoint);}createLogEntry(level,message){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};let category=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'general';return{id:this.generateId(),timestamp:Date.now(),level,message,category,data:this.sanitizeData(data),metadata:_objectSpread(_objectSpread({},this.metadata),{},{url:window.location.href,timestamp:Date.now()}),stack:this.captureStack()};}sanitizeData(data){try{// Remove circular references and sensitive data\nconst sanitized=JSON.parse(JSON.stringify(data,(key,value)=>{// Remove sensitive keys\nconst sensitiveKeys=['password','token','apiKey','secret','auth'];if(sensitiveKeys.some(sk=>key.toLowerCase().includes(sk))){return'[REDACTED]';}// Handle functions\nif(typeof value==='function'){return\"[Function: \".concat(value.name||'anonymous',\"]\");}return value;}));return sanitized;}catch(error){return{error:'Failed to sanitize data',original:String(data)};}}captureStack(){try{throw new Error();}catch(error){return error.stack.split('\\n').slice(3).join('\\n');}}shouldLog(level){return this.logLevels[level]<=this.currentLevel;}log(level,message,data,category){if(!this.shouldLog(level))return;const logEntry=this.createLogEntry(level,message,data,category);// Add to buffer\nthis.logBuffer.push(logEntry);// Enforce buffer size limit\nif(this.logBuffer.length>this.maxBufferSize){this.logBuffer=this.logBuffer.slice(-this.maxBufferSize);}// Console output with styling\nthis.outputToConsole(logEntry);// Store in cache for persistence\nthis.storeInCache(logEntry);// Auto-flush on errors\nif(level==='ERROR'){setTimeout(()=>this.flushLogs(true),100);}}outputToConsole(logEntry){const{level,message,data,timestamp}=logEntry;const time=new Date(timestamp).toLocaleTimeString();const styles={ERROR:'color: #dc2626; font-weight: bold;',WARN:'color: #f59e0b; font-weight: bold;',INFO:'color: #2563eb;',DEBUG:'color: #7c3aed;',TRACE:'color: #6b7280;'};const style=styles[level]||styles.INFO;console.groupCollapsed(\"%c[\".concat(level,\"] \").concat(time,\" - \").concat(message),style);if(data&&Object.keys(data).length>0){console.log('Data:',data);}console.log('Stack:',logEntry.stack);console.log('Metadata:',logEntry.metadata);console.groupEnd();}async storeInCache(logEntry){try{const key=\"log:\".concat(logEntry.id);await cacheManager.set(key,logEntry,{ttl:24*60*60*1000,// 24 hours\ntags:['logs',logEntry.level.toLowerCase()]});}catch(error){console.warn('Failed to cache log entry:',error);}}async flushLogs(){let force=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.logBuffer.length===0)return;const logsToFlush=[...this.logBuffer];this.logBuffer=[];try{// Send to configured endpoints\nawait Promise.all(this.endpoints.map(endpoint=>this.sendToEndpoint(endpoint,logsToFlush)));// Store in persistent cache\nawait this.storeLogsInCache(logsToFlush);console.log(\"Flushed \".concat(logsToFlush.length,\" log entries\"));}catch(error){console.error('Failed to flush logs:',error);// Restore logs to buffer if flush failed\nthis.logBuffer.unshift(...logsToFlush);}}async sendToEndpoint(endpoint,logs){try{const response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({logs,metadata:this.metadata})});if(!response.ok){throw new Error(\"HTTP \".concat(response.status,\": \").concat(response.statusText));}}catch(error){console.warn(\"Failed to send logs to \".concat(endpoint,\":\"),error);}}async storeLogsInCache(logs){try{const batchKey=\"logs:batch:\".concat(Date.now());await cacheManager.set(batchKey,logs,{ttl:7*24*60*60*1000,// 7 days\ntags:['log-batches']});}catch(error){console.warn('Failed to store logs in cache:',error);}}// Public logging methods\nerror(message,data){let category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'error';this.log('ERROR',message,data,category);}warn(message,data){let category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'warning';this.log('WARN',message,data,category);}info(message,data){let category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'info';this.log('INFO',message,data,category);}debug(message,data){let category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'debug';this.log('DEBUG',message,data,category);}trace(message,data){let category=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'trace';this.log('TRACE',message,data,category);}// Business logic logging methods\nbusiness(event){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.info(\"Business Event: \".concat(event),data,'business');}security(event){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.warn(\"Security Event: \".concat(event),data,'security');}performance(operation,duration){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};this.info(\"Performance: \".concat(operation),_objectSpread({duration},data),'performance');}user(action){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.info(\"User Action: \".concat(action),data,'user');}api(method,url,status,duration){let data=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};const level=status>=400?'ERROR':status>=300?'WARN':'INFO';this.log(level,\"API: \".concat(method,\" \").concat(url),_objectSpread({status,duration},data),'api');}// Metrics and analytics\nasync getLogStatistics(){let timeRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3600000;try{const since=Date.now()-timeRange;const logKeys=await cacheManager.keys('log:*');const logs=await Promise.all(logKeys.map(key=>cacheManager.get(key)));const recentLogs=logs.filter(log=>log&&log.timestamp>since).filter(Boolean);const stats={total:recentLogs.length,byLevel:{},byCategory:{},timeRange:timeRange,period:{start:since,end:Date.now()}};recentLogs.forEach(log=>{stats.byLevel[log.level]=(stats.byLevel[log.level]||0)+1;stats.byCategory[log.category]=(stats.byCategory[log.category]||0)+1;});return stats;}catch(error){console.error('Failed to get log statistics:',error);return null;}}async exportLogs(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const{level,category,timeRange=24*60*60*1000}=filters;const since=Date.now()-timeRange;const logKeys=await cacheManager.keys('log:*');const logs=await Promise.all(logKeys.map(key=>cacheManager.get(key)));let filteredLogs=logs.filter(log=>log&&log.timestamp>since).filter(Boolean);if(level){filteredLogs=filteredLogs.filter(log=>log.level===level);}if(category){filteredLogs=filteredLogs.filter(log=>log.category===category);}// Sort by timestamp\nfilteredLogs.sort((a,b)=>b.timestamp-a.timestamp);return{logs:filteredLogs,exportedAt:Date.now(),filters,totalCount:filteredLogs.length};}catch(error){console.error('Failed to export logs:',error);return null;}}async clearLogs(){let olderThan=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7*24*60*60*1000;try{const cutoff=Date.now()-olderThan;const logKeys=await cacheManager.keys('log:*');let deletedCount=0;for(const key of logKeys){const log=await cacheManager.get(key);if(log&&log.timestamp<cutoff){await cacheManager.delete(key);deletedCount++;}}this.info('Log cleanup completed',{deletedCount,cutoffDate:new Date(cutoff).toISOString()},'system');return deletedCount;}catch(error){console.error('Failed to clear logs:',error);return 0;}}destroy(){this.flushLogs(true);}}// Create singleton instance\nconst logger=new EnterpriseLogger();// Production environment configuration\nif(process.env.NODE_ENV==='production'){logger.setLevel('WARN');}else{logger.setLevel('DEBUG');}export default logger;export{EnterpriseLogger};","map":{"version":3,"names":["cacheManager","EnterpriseLogger","constructor","logLevels","ERROR","WARN","INFO","DEBUG","TRACE","currentLevel","logBuffer","maxBufferSize","flushInterval","endpoints","metadata","collectMetadata","initializeLogger","setInterval","flushLogs","window","addEventListener","document","visibilityState","event","_event$error","error","message","filename","lineno","colno","stack","reason","promise","userAgent","navigator","platform","language","cookieEnabled","onLine","screen","width","height","colorDepth","viewport","innerWidth","innerHeight","url","location","href","referrer","timestamp","Date","now","sessionId","getSessionId","userId","getUserId","sessionStorage","getItem","generateId","setItem","localStorage","toString","Math","random","substr","setLevel","level","_this$logLevels$level","toUpperCase","addEndpoint","endpoint","push","createLogEntry","data","arguments","length","undefined","category","id","sanitizeData","_objectSpread","captureStack","sanitized","JSON","parse","stringify","key","value","sensitiveKeys","some","sk","toLowerCase","includes","concat","name","original","String","Error","split","slice","join","shouldLog","log","logEntry","outputToConsole","storeInCache","setTimeout","time","toLocaleTimeString","styles","style","console","groupCollapsed","Object","keys","groupEnd","set","ttl","tags","warn","force","logsToFlush","Promise","all","map","sendToEndpoint","storeLogsInCache","unshift","logs","response","fetch","method","headers","body","ok","status","statusText","batchKey","info","debug","trace","business","security","performance","operation","duration","user","action","api","getLogStatistics","timeRange","since","logKeys","get","recentLogs","filter","Boolean","stats","total","byLevel","byCategory","period","start","end","forEach","exportLogs","filters","filteredLogs","sort","a","b","exportedAt","totalCount","clearLogs","olderThan","cutoff","deletedCount","delete","cutoffDate","toISOString","destroy","logger","process","env","NODE_ENV"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/enterpriseLogger.js"],"sourcesContent":["import cacheManager from './advancedCache';\r\n\r\nclass EnterpriseLogger {\r\n  constructor() {\r\n    this.logLevels = {\r\n      ERROR: 0,\r\n      WARN: 1,\r\n      INFO: 2,\r\n      DEBUG: 3,\r\n      TRACE: 4\r\n    };\r\n\r\n    this.currentLevel = this.logLevels.INFO;\r\n    this.logBuffer = [];\r\n    this.maxBufferSize = 1000;\r\n    this.flushInterval = 30000; // 30 seconds\r\n    this.endpoints = [];\r\n    this.metadata = this.collectMetadata();\r\n\r\n    this.initializeLogger();\r\n  }\r\n\r\n  initializeLogger() {\r\n    // Start periodic flush\r\n    setInterval(() => this.flushLogs(), this.flushInterval);\r\n\r\n    // Handle page unload\r\n    window.addEventListener('beforeunload', () => this.flushLogs(true));\r\n\r\n    // Handle visibility change\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.visibilityState === 'hidden') {\r\n        this.flushLogs(true);\r\n      }\r\n    });\r\n\r\n    // Global error handler\r\n    window.addEventListener('error', (event) => {\r\n      this.error('Global Error', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack\r\n      });\r\n    });\r\n\r\n    // Unhandled promise rejection handler\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.error('Unhandled Promise Rejection', {\r\n        reason: event.reason,\r\n        promise: event.promise\r\n      });\r\n    });\r\n  }\r\n\r\n  collectMetadata() {\r\n    return {\r\n      userAgent: navigator.userAgent,\r\n      platform: navigator.platform,\r\n      language: navigator.language,\r\n      cookieEnabled: navigator.cookieEnabled,\r\n      onLine: navigator.onLine,\r\n      screen: {\r\n        width: screen.width,\r\n        height: screen.height,\r\n        colorDepth: screen.colorDepth\r\n      },\r\n      viewport: {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      },\r\n      url: window.location.href,\r\n      referrer: document.referrer,\r\n      timestamp: Date.now(),\r\n      sessionId: this.getSessionId(),\r\n      userId: this.getUserId()\r\n    };\r\n  }\r\n\r\n  getSessionId() {\r\n    let sessionId = sessionStorage.getItem('loggerSessionId');\r\n    if (!sessionId) {\r\n      sessionId = this.generateId();\r\n      sessionStorage.setItem('loggerSessionId', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n\r\n  getUserId() {\r\n    return localStorage.getItem('userId') || 'anonymous';\r\n  }\r\n\r\n  generateId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  setLevel(level) {\r\n    if (typeof level === 'string') {\r\n      this.currentLevel = this.logLevels[level.toUpperCase()] ?? this.logLevels.INFO;\r\n    } else {\r\n      this.currentLevel = level;\r\n    }\r\n  }\r\n\r\n  addEndpoint(endpoint) {\r\n    this.endpoints.push(endpoint);\r\n  }\r\n\r\n  createLogEntry(level, message, data = {}, category = 'general') {\r\n    return {\r\n      id: this.generateId(),\r\n      timestamp: Date.now(),\r\n      level,\r\n      message,\r\n      category,\r\n      data: this.sanitizeData(data),\r\n      metadata: {\r\n        ...this.metadata,\r\n        url: window.location.href,\r\n        timestamp: Date.now()\r\n      },\r\n      stack: this.captureStack()\r\n    };\r\n  }\r\n\r\n  sanitizeData(data) {\r\n    try {\r\n      // Remove circular references and sensitive data\r\n      const sanitized = JSON.parse(JSON.stringify(data, (key, value) => {\r\n        // Remove sensitive keys\r\n        const sensitiveKeys = ['password', 'token', 'apiKey', 'secret', 'auth'];\r\n        if (sensitiveKeys.some(sk => key.toLowerCase().includes(sk))) {\r\n          return '[REDACTED]';\r\n        }\r\n\r\n        // Handle functions\r\n        if (typeof value === 'function') {\r\n          return `[Function: ${value.name || 'anonymous'}]`;\r\n        }\r\n\r\n        return value;\r\n      }));\r\n\r\n      return sanitized;\r\n    } catch (error) {\r\n      return { error: 'Failed to sanitize data', original: String(data) };\r\n    }\r\n  }\r\n\r\n  captureStack() {\r\n    try {\r\n      throw new Error();\r\n    } catch (error) {\r\n      return error.stack.split('\\n').slice(3).join('\\n');\r\n    }\r\n  }\r\n\r\n  shouldLog(level) {\r\n    return this.logLevels[level] <= this.currentLevel;\r\n  }\r\n\r\n  log(level, message, data, category) {\r\n    if (!this.shouldLog(level)) return;\r\n\r\n    const logEntry = this.createLogEntry(level, message, data, category);\r\n\r\n    // Add to buffer\r\n    this.logBuffer.push(logEntry);\r\n\r\n    // Enforce buffer size limit\r\n    if (this.logBuffer.length > this.maxBufferSize) {\r\n      this.logBuffer = this.logBuffer.slice(-this.maxBufferSize);\r\n    }\r\n\r\n    // Console output with styling\r\n    this.outputToConsole(logEntry);\r\n\r\n    // Store in cache for persistence\r\n    this.storeInCache(logEntry);\r\n\r\n    // Auto-flush on errors\r\n    if (level === 'ERROR') {\r\n      setTimeout(() => this.flushLogs(true), 100);\r\n    }\r\n  }\r\n\r\n  outputToConsole(logEntry) {\r\n    const { level, message, data, timestamp } = logEntry;\r\n    const time = new Date(timestamp).toLocaleTimeString();\r\n\r\n    const styles = {\r\n      ERROR: 'color: #dc2626; font-weight: bold;',\r\n      WARN: 'color: #f59e0b; font-weight: bold;',\r\n      INFO: 'color: #2563eb;',\r\n      DEBUG: 'color: #7c3aed;',\r\n      TRACE: 'color: #6b7280;'\r\n    };\r\n\r\n    const style = styles[level] || styles.INFO;\r\n\r\n    console.groupCollapsed(`%c[${level}] ${time} - ${message}`, style);\r\n    if (data && Object.keys(data).length > 0) {\r\n      console.log('Data:', data);\r\n    }\r\n    console.log('Stack:', logEntry.stack);\r\n    console.log('Metadata:', logEntry.metadata);\r\n    console.groupEnd();\r\n  }\r\n\r\n  async storeInCache(logEntry) {\r\n    try {\r\n      const key = `log:${logEntry.id}`;\r\n      await cacheManager.set(key, logEntry, {\r\n        ttl: 24 * 60 * 60 * 1000, // 24 hours\r\n        tags: ['logs', logEntry.level.toLowerCase()]\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to cache log entry:', error);\r\n    }\r\n  }\r\n\r\n  async flushLogs(force = false) {\r\n    if (this.logBuffer.length === 0) return;\r\n\r\n    const logsToFlush = [...this.logBuffer];\r\n    this.logBuffer = [];\r\n\r\n    try {\r\n      // Send to configured endpoints\r\n      await Promise.all(\r\n        this.endpoints.map(endpoint => this.sendToEndpoint(endpoint, logsToFlush))\r\n      );\r\n\r\n      // Store in persistent cache\r\n      await this.storeLogsInCache(logsToFlush);\r\n\r\n      console.log(`Flushed ${logsToFlush.length} log entries`);\r\n    } catch (error) {\r\n      console.error('Failed to flush logs:', error);\r\n      // Restore logs to buffer if flush failed\r\n      this.logBuffer.unshift(...logsToFlush);\r\n    }\r\n  }\r\n\r\n  async sendToEndpoint(endpoint, logs) {\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          logs,\r\n          metadata: this.metadata\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Failed to send logs to ${endpoint}:`, error);\r\n    }\r\n  }\r\n\r\n  async storeLogsInCache(logs) {\r\n    try {\r\n      const batchKey = `logs:batch:${Date.now()}`;\r\n      await cacheManager.set(batchKey, logs, {\r\n        ttl: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n        tags: ['log-batches']\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to store logs in cache:', error);\r\n    }\r\n  }\r\n\r\n  // Public logging methods\r\n  error(message, data, category = 'error') {\r\n    this.log('ERROR', message, data, category);\r\n  }\r\n\r\n  warn(message, data, category = 'warning') {\r\n    this.log('WARN', message, data, category);\r\n  }\r\n\r\n  info(message, data, category = 'info') {\r\n    this.log('INFO', message, data, category);\r\n  }\r\n\r\n  debug(message, data, category = 'debug') {\r\n    this.log('DEBUG', message, data, category);\r\n  }\r\n\r\n  trace(message, data, category = 'trace') {\r\n    this.log('TRACE', message, data, category);\r\n  }\r\n\r\n  // Business logic logging methods\r\n  business(event, data = {}) {\r\n    this.info(`Business Event: ${event}`, data, 'business');\r\n  }\r\n\r\n  security(event, data = {}) {\r\n    this.warn(`Security Event: ${event}`, data, 'security');\r\n  }\r\n\r\n  performance(operation, duration, data = {}) {\r\n    this.info(`Performance: ${operation}`, {\r\n      duration,\r\n      ...data\r\n    }, 'performance');\r\n  }\r\n\r\n  user(action, data = {}) {\r\n    this.info(`User Action: ${action}`, data, 'user');\r\n  }\r\n\r\n  api(method, url, status, duration, data = {}) {\r\n    const level = status >= 400 ? 'ERROR' : status >= 300 ? 'WARN' : 'INFO';\r\n    this.log(level, `API: ${method} ${url}`, {\r\n      status,\r\n      duration,\r\n      ...data\r\n    }, 'api');\r\n  }\r\n\r\n  // Metrics and analytics\r\n  async getLogStatistics(timeRange = 3600000) {\r\n    try {\r\n      const since = Date.now() - timeRange;\r\n      const logKeys = await cacheManager.keys('log:*');\r\n\r\n      const logs = await Promise.all(\r\n        logKeys.map(key => cacheManager.get(key))\r\n      );\r\n\r\n      const recentLogs = logs\r\n        .filter(log => log && log.timestamp > since)\r\n        .filter(Boolean);\r\n\r\n      const stats = {\r\n        total: recentLogs.length,\r\n        byLevel: {},\r\n        byCategory: {},\r\n        timeRange: timeRange,\r\n        period: {\r\n          start: since,\r\n          end: Date.now()\r\n        }\r\n      };\r\n\r\n      recentLogs.forEach(log => {\r\n        stats.byLevel[log.level] = (stats.byLevel[log.level] || 0) + 1;\r\n        stats.byCategory[log.category] = (stats.byCategory[log.category] || 0) + 1;\r\n      });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Failed to get log statistics:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async exportLogs(filters = {}) {\r\n    try {\r\n      const { level, category, timeRange = 24 * 60 * 60 * 1000 } = filters;\r\n      const since = Date.now() - timeRange;\r\n\r\n      const logKeys = await cacheManager.keys('log:*');\r\n      const logs = await Promise.all(\r\n        logKeys.map(key => cacheManager.get(key))\r\n      );\r\n\r\n      let filteredLogs = logs\r\n        .filter(log => log && log.timestamp > since)\r\n        .filter(Boolean);\r\n\r\n      if (level) {\r\n        filteredLogs = filteredLogs.filter(log => log.level === level);\r\n      }\r\n\r\n      if (category) {\r\n        filteredLogs = filteredLogs.filter(log => log.category === category);\r\n      }\r\n\r\n      // Sort by timestamp\r\n      filteredLogs.sort((a, b) => b.timestamp - a.timestamp);\r\n\r\n      return {\r\n        logs: filteredLogs,\r\n        exportedAt: Date.now(),\r\n        filters,\r\n        totalCount: filteredLogs.length\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to export logs:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async clearLogs(olderThan = 7 * 24 * 60 * 60 * 1000) {\r\n    try {\r\n      const cutoff = Date.now() - olderThan;\r\n      const logKeys = await cacheManager.keys('log:*');\r\n\r\n      let deletedCount = 0;\r\n\r\n      for (const key of logKeys) {\r\n        const log = await cacheManager.get(key);\r\n        if (log && log.timestamp < cutoff) {\r\n          await cacheManager.delete(key);\r\n          deletedCount++;\r\n        }\r\n      }\r\n\r\n      this.info('Log cleanup completed', {\r\n        deletedCount,\r\n        cutoffDate: new Date(cutoff).toISOString()\r\n      }, 'system');\r\n\r\n      return deletedCount;\r\n    } catch (error) {\r\n      console.error('Failed to clear logs:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.flushLogs(true);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst logger = new EnterpriseLogger();\r\n\r\n// Production environment configuration\r\nif (process.env.NODE_ENV === 'production') {\r\n  logger.setLevel('WARN');\r\n} else {\r\n  logger.setLevel('DEBUG');\r\n}\r\n\r\nexport default logger;\r\nexport { EnterpriseLogger };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}