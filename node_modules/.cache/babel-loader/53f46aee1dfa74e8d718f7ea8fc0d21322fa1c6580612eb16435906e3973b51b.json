{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { googleSheetsService } from '../api/googleSheetsService';\nexport function useJobCounts(addNotification) {\n  _s();\n  const [jobCounts, setJobCounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const loadJobCountsData = useCallback(async (isManualRefresh = false) => {\n    if (!isManualRefresh) setLoading(true);\n    const response = await googleSheetsService.fetchJobCounts();\n    if (response.success) {\n      const processedJobCounts = (response.data || response.jobCounts || []).map(jobCount => ({\n        ...jobCount,\n        // Ensure we have an ID field\n        id: jobCount.id || `${jobCount.firstName}_${jobCount.lastName}_${jobCount.date}`,\n        // Format name for display\n        fullName: `${jobCount.firstName || ''} ${jobCount.lastName || ''}`.trim() || 'Unknown'\n      })).sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0));\n      setJobCounts(processedJobCounts);\n      if (isManualRefresh) {\n        addNotification(`Job counts refreshed. Found ${processedJobCounts.length} records.`, 'success');\n      } else {\n        addNotification(`Job counts loaded. Found ${processedJobCounts.length} records.`, 'success');\n      }\n    } else {\n      addNotification(`Error fetching job counts: ${response.message}`, 'error');\n    }\n    if (!isManualRefresh) setLoading(false);\n  }, [addNotification]);\n  useEffect(() => {\n    loadJobCountsData();\n  }, [loadJobCountsData]);\n  const addJobCount = useCallback(async jobCountData => {\n    const response = await googleSheetsService.addJobCount(jobCountData);\n    if (response.success && response.jobCount) {\n      const newJobCount = {\n        ...response.jobCount,\n        id: response.jobCount.id || `${response.jobCount.firstName}_${response.jobCount.lastName}_${response.jobCount.date}`,\n        fullName: `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown'\n      };\n      setJobCounts(prev => [newJobCount, ...prev].sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)));\n      addNotification(`Job count added: ${newJobCount.fullName}`, 'success');\n    } else {\n      addNotification(`Error adding job count: ${response.message}`, 'error');\n    }\n    return response;\n  }, [addNotification]);\n  const updateJobCount = useCallback(async updatedJobCount => {\n    const response = await googleSheetsService.updateJobCount(updatedJobCount);\n    if (response.success && response.jobCount) {\n      const updatedData = {\n        ...response.jobCount,\n        id: response.jobCount.id || updatedJobCount.id,\n        fullName: `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown'\n      };\n      setJobCounts(prev => prev.map(jc => jc.id === updatedData.id ? updatedData : jc));\n      addNotification(`Job count updated: ${updatedData.fullName}`, 'info');\n    } else {\n      addNotification(`Error updating job count: ${response.message}`, 'error');\n    }\n    return response;\n  }, [addNotification]);\n  const deleteJobCount = useCallback(async jobCountId => {\n    const jobCountToDelete = jobCounts.find(jc => jc.id === jobCountId);\n    if (!jobCountToDelete) return;\n    if (window.confirm(`Are you sure you want to delete the job count for ${jobCountToDelete.fullName}?`)) {\n      const response = await googleSheetsService.deleteJobCount(jobCountId);\n      if (response.success) {\n        setJobCounts(currentJobCounts => currentJobCounts.filter(jc => jc.id !== jobCountId));\n        addNotification(`Job count deleted: ${jobCountToDelete.fullName}`, 'warning');\n      } else {\n        addNotification(`Error deleting job count: ${response.message}`, 'error');\n      }\n    }\n  }, [jobCounts, addNotification]);\n  return {\n    jobCounts,\n    loading,\n    refreshJobCounts: () => loadJobCountsData(true),\n    addJobCount,\n    updateJobCount,\n    deleteJobCount\n  };\n}\n_s(useJobCounts, \"ENJ1QZdkKT4E2LB7wDogJdSVjok=\");","map":{"version":3,"names":["useState","useEffect","useCallback","googleSheetsService","useJobCounts","addNotification","_s","jobCounts","setJobCounts","loading","setLoading","loadJobCountsData","isManualRefresh","response","fetchJobCounts","success","processedJobCounts","data","map","jobCount","id","firstName","lastName","date","fullName","trim","sort","a","b","Date","length","message","addJobCount","jobCountData","newJobCount","prev","updateJobCount","updatedJobCount","updatedData","jc","deleteJobCount","jobCountId","jobCountToDelete","find","window","confirm","currentJobCounts","filter","refreshJobCounts"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useJobCounts.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nexport function useJobCounts(addNotification) {\r\n  const [jobCounts, setJobCounts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadJobCountsData = useCallback(async (isManualRefresh = false) => {\r\n    if (!isManualRefresh) setLoading(true);\r\n\r\n    const response = await googleSheetsService.fetchJobCounts();\r\n\r\n    if (response.success) {\r\n      const processedJobCounts = (response.data || response.jobCounts || [])\r\n        .map(jobCount => ({\r\n          ...jobCount,\r\n          // Ensure we have an ID field\r\n          id: jobCount.id || `${jobCount.firstName}_${jobCount.lastName}_${jobCount.date}`,\r\n          // Format name for display\r\n          fullName: `${jobCount.firstName || ''} ${jobCount.lastName || ''}`.trim() || 'Unknown'\r\n        }))\r\n        .sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0));\r\n\r\n      setJobCounts(processedJobCounts);\r\n\r\n      if (isManualRefresh) {\r\n        addNotification(`Job counts refreshed. Found ${processedJobCounts.length} records.`, 'success');\r\n      } else {\r\n        addNotification(`Job counts loaded. Found ${processedJobCounts.length} records.`, 'success');\r\n      }\r\n    } else {\r\n      addNotification(`Error fetching job counts: ${response.message}`, 'error');\r\n    }\r\n\r\n    if (!isManualRefresh) setLoading(false);\r\n  }, [addNotification]);\r\n\r\n  useEffect(() => {\r\n    loadJobCountsData();\r\n  }, [loadJobCountsData]);\r\n\r\n  const addJobCount = useCallback(async (jobCountData) => {\r\n    const response = await googleSheetsService.addJobCount(jobCountData);\r\n\r\n    if (response.success && response.jobCount) {\r\n      const newJobCount = {\r\n        ...response.jobCount,\r\n        id: response.jobCount.id || `${response.jobCount.firstName}_${response.jobCount.lastName}_${response.jobCount.date}`,\r\n        fullName: `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown'\r\n      };\r\n\r\n      setJobCounts(prev => [newJobCount, ...prev].sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)));\r\n      addNotification(`Job count added: ${newJobCount.fullName}`, 'success');\r\n    } else {\r\n      addNotification(`Error adding job count: ${response.message}`, 'error');\r\n    }\r\n\r\n    return response;\r\n  }, [addNotification]);\r\n\r\n  const updateJobCount = useCallback(async (updatedJobCount) => {\r\n    const response = await googleSheetsService.updateJobCount(updatedJobCount);\r\n\r\n    if (response.success && response.jobCount) {\r\n      const updatedData = {\r\n        ...response.jobCount,\r\n        id: response.jobCount.id || updatedJobCount.id,\r\n        fullName: `${response.jobCount.firstName || ''} ${response.jobCount.lastName || ''}`.trim() || 'Unknown'\r\n      };\r\n\r\n      setJobCounts(prev => prev.map(jc => (jc.id === updatedData.id ? updatedData : jc)));\r\n      addNotification(`Job count updated: ${updatedData.fullName}`, 'info');\r\n    } else {\r\n      addNotification(`Error updating job count: ${response.message}`, 'error');\r\n    }\r\n\r\n    return response;\r\n  }, [addNotification]);\r\n\r\n  const deleteJobCount = useCallback(async (jobCountId) => {\r\n    const jobCountToDelete = jobCounts.find(jc => jc.id === jobCountId);\r\n    if (!jobCountToDelete) return;\r\n\r\n    if (window.confirm(`Are you sure you want to delete the job count for ${jobCountToDelete.fullName}?`)) {\r\n      const response = await googleSheetsService.deleteJobCount(jobCountId);\r\n\r\n      if (response.success) {\r\n        setJobCounts(currentJobCounts => currentJobCounts.filter(jc => jc.id !== jobCountId));\r\n        addNotification(`Job count deleted: ${jobCountToDelete.fullName}`, 'warning');\r\n      } else {\r\n        addNotification(`Error deleting job count: ${response.message}`, 'error');\r\n      }\r\n    }\r\n  }, [jobCounts, addNotification]);\r\n\r\n  return {\r\n    jobCounts,\r\n    loading,\r\n    refreshJobCounts: () => loadJobCountsData(true),\r\n    addJobCount,\r\n    updateJobCount,\r\n    deleteJobCount\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}