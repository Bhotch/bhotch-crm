{"ast":null,"code":"import _objectSpread from\"C:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Advanced Real-time Notification & Alert System\r\n *\r\n * Enterprise-grade notification management with multi-channel delivery,\r\n * smart filtering, priority queuing, and persistent storage.\r\n */class NotificationSystem{constructor(){this.notifications=new Map();this.subscribers=new Set();this.alertRules=new Map();this.notificationHistory=[];this.channels={ui:true,email:false,sms:false,webhook:false};this.priorities={critical:1,high:2,medium:3,low:4,info:5};this.maxNotifications=100;this.maxHistorySize=1000;this.autoCleanupInterval=300000;// 5 minutes\nthis.initializeSystem();}/**\r\n     * Initialize notification system\r\n     */initializeSystem(){// Load persisted notifications\nthis.loadNotificationsFromStorage();// Set up auto-cleanup\nsetInterval(()=>{this.cleanupExpiredNotifications();},this.autoCleanupInterval);// Set up performance monitoring\nthis.setupPerformanceMonitoring();// Initialize alert rules\nthis.setupDefaultAlertRules();}/**\r\n     * Create and dispatch notification\r\n     */createNotification(options){const notification={id:this.generateNotificationId(),title:options.title||'Notification',message:options.message||'',type:options.type||'info',// success, error, warning, info, critical\npriority:options.priority||'medium',source:options.source||'system',timestamp:new Date().toISOString(),read:false,persistent:options.persistent||false,expiresAt:options.expiresAt||this.calculateExpiration(options.type),actions:options.actions||[],metadata:options.metadata||{},channels:options.channels||['ui'],retryCount:0,maxRetries:options.maxRetries||3};// Apply alert rules\nthis.applyAlertRules(notification);// Store notification\nthis.notifications.set(notification.id,notification);// Add to history\nthis.addToHistory(notification);// Dispatch to channels\nthis.dispatchToChannels(notification);// Notify subscribers\nthis.notifySubscribers('notification_created',notification);// Persist to storage\nthis.saveNotificationsToStorage();return notification;}/**\r\n     * System monitoring notifications\r\n     */createSystemAlert(alertType,data){const alertConfigs={automation_failure:{title:'Automation System Failure',type:'critical',priority:'critical',persistent:true,channels:['ui','email'],actions:[{label:'Run Diagnostics',action:'run_diagnostics'},{label:'Switch to Manual',action:'enable_manual_mode'}]},calculation_error:{title:'Calculation Error Detected',type:'error',priority:'high',channels:['ui'],actions:[{label:'Retry Calculation',action:'retry_calculation'},{label:'Use Fallback',action:'use_fallback'}]},performance_degradation:{title:'Performance Degradation Alert',type:'warning',priority:'medium',channels:['ui'],actions:[{label:'View Metrics',action:'view_performance'},{label:'Optimize System',action:'optimize_system'}]},batch_complete:{title:'Batch Processing Complete',type:'success',priority:'low',channels:['ui'],actions:[{label:'View Results',action:'view_batch_results'}]},security_alert:{title:'Security Alert',type:'critical',priority:'critical',persistent:true,channels:['ui','email'],actions:[{label:'Review Logs',action:'review_security_logs'},{label:'Block IP',action:'block_suspicious_ip'}]}};const config=alertConfigs[alertType]||alertConfigs.automation_failure;return this.createNotification(_objectSpread(_objectSpread({},config),{},{message:this.generateAlertMessage(alertType,data),source:'system_monitor',metadata:{alertType:alertType,alertData:data,systemState:this.getSystemState()}}));}/**\r\n     * Business logic notifications\r\n     */createBusinessAlert(eventType,data){const businessConfigs={new_lead:{title:'New Lead Created',type:'info',priority:'medium',message:\"New lead: \".concat(data.customerName||'Unknown')},quote_generated:{title:'Quote Generated',type:'success',priority:'medium',message:\"Quote of $\".concat(data.amount,\" generated for \").concat(data.customerName)},calculation_completed:{title:'Vent Calculation Completed',type:'success',priority:'low',message:\"Calculation completed for \".concat(data.sqft,\" sq ft via \").concat(data.method)},high_value_quote:{title:'High Value Quote Alert',type:'warning',priority:'high',message:\"High value quote: $\".concat(data.amount,\" for \").concat(data.customerName),persistent:true,actions:[{label:'Review Quote',action:'review_quote'},{label:'Contact Customer',action:'contact_customer'}]}};const config=businessConfigs[eventType]||businessConfigs.new_lead;return this.createNotification(_objectSpread(_objectSpread({},config),{},{source:'business_logic',metadata:{eventType:eventType,eventData:data}}));}/**\r\n     * Real-time progress notifications\r\n     */createProgressNotification(processId,progress){const existingNotification=Array.from(this.notifications.values()).find(n=>n.metadata.processId===processId);if(existingNotification){// Update existing progress notification\nexistingNotification.message=\"\".concat(progress.current,\"/\").concat(progress.total,\" - \").concat(progress.status);existingNotification.metadata.progress=progress;existingNotification.timestamp=new Date().toISOString();this.notifySubscribers('notification_updated',existingNotification);}else{// Create new progress notification\nreturn this.createNotification({title:progress.title||'Processing...',message:\"\".concat(progress.current,\"/\").concat(progress.total,\" - \").concat(progress.status),type:'info',priority:'low',source:'progress_tracker',persistent:false,metadata:{processId:processId,progress:progress}});}}/**\r\n     * Smart notification filtering\r\n     */applyAlertRules(notification){for(const[ruleId,rule]of this.alertRules){if(this.matchesRule(notification,rule)){// Apply rule modifications\nif(rule.escalate){notification.priority='critical';notification.persistent=true;}if(rule.suppress){notification.channels=[];}if(rule.addChannels){notification.channels=[...notification.channels,...rule.addChannels];}if(rule.customMessage){notification.message=rule.customMessage(notification);}}}}/**\r\n     * Multi-channel notification dispatch\r\n     */async dispatchToChannels(notification){const promises=notification.channels.map(channel=>{switch(channel){case'ui':return this.sendUINotification(notification);case'email':return this.sendEmailNotification(notification);case'sms':return this.sendSMSNotification(notification);case'webhook':return this.sendWebhookNotification(notification);case'browser':return this.sendBrowserNotification(notification);default:return Promise.resolve();}});try{await Promise.allSettled(promises);}catch(error){console.error('Error dispatching notification:',error);this.handleDeliveryFailure(notification,error);}}/**\r\n     * UI notification delivery\r\n     */sendUINotification(notification){// Add visual indicators based on priority\nconst uiNotification=_objectSpread(_objectSpread({},notification),{},{className:this.getUIClassName(notification),icon:this.getNotificationIcon(notification.type),autoHide:!notification.persistent,hideDelay:this.getHideDelay(notification.priority)});this.notifySubscribers('ui_notification',uiNotification);return Promise.resolve();}/**\r\n     * Browser push notification\r\n     */async sendBrowserNotification(notification){if('Notification'in window&&Notification.permission==='granted'){const browserNotification=new Notification(notification.title,{body:notification.message,icon:'/favicon.ico',tag:notification.id,requireInteraction:notification.persistent,actions:notification.actions.slice(0,2)// Browser supports max 2 actions\n});browserNotification.onclick=()=>{window.focus();this.markAsRead(notification.id);};return Promise.resolve();}return Promise.reject('Browser notifications not supported or permission denied');}/**\r\n     * Email notification (placeholder for actual implementation)\r\n     */async sendEmailNotification(notification){// In a real implementation, this would integrate with an email service\nconsole.log('Email notification would be sent:',notification);return Promise.resolve();}/**\r\n     * SMS notification (placeholder for actual implementation)\r\n     */async sendSMSNotification(notification){// In a real implementation, this would integrate with an SMS service\nconsole.log('SMS notification would be sent:',notification);return Promise.resolve();}/**\r\n     * Webhook notification (placeholder for actual implementation)\r\n     */async sendWebhookNotification(notification){// In a real implementation, this would send HTTP POST to configured webhooks\nconsole.log('Webhook notification would be sent:',notification);return Promise.resolve();}/**\r\n     * Notification management\r\n     */getNotifications(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let notifications=Array.from(this.notifications.values());// Apply filters\nif(filters.unreadOnly){notifications=notifications.filter(n=>!n.read);}if(filters.type){notifications=notifications.filter(n=>n.type===filters.type);}if(filters.priority){notifications=notifications.filter(n=>n.priority===filters.priority);}if(filters.source){notifications=notifications.filter(n=>n.source===filters.source);}// Sort by priority and timestamp\nnotifications.sort((a,b)=>{const priorityDiff=this.priorities[a.priority]-this.priorities[b.priority];if(priorityDiff!==0)return priorityDiff;return new Date(b.timestamp)-new Date(a.timestamp);});return notifications;}/**\r\n     * Mark notification as read\r\n     */markAsRead(notificationId){const notification=this.notifications.get(notificationId);if(notification){notification.read=true;notification.readAt=new Date().toISOString();this.notifySubscribers('notification_read',notification);this.saveNotificationsToStorage();}}/**\r\n     * Mark all notifications as read\r\n     */markAllAsRead(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const notifications=this.getNotifications(filters);notifications.forEach(notification=>{this.markAsRead(notification.id);});}/**\r\n     * Dismiss notification\r\n     */dismissNotification(notificationId){const notification=this.notifications.get(notificationId);if(notification&&!notification.persistent){this.notifications.delete(notificationId);this.notifySubscribers('notification_dismissed',notification);this.saveNotificationsToStorage();}}/**\r\n     * Clear all notifications\r\n     */clearAllNotifications(){let includePersistent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(includePersistent){this.notifications.clear();}else{for(const[id,notification]of this.notifications){if(!notification.persistent){this.notifications.delete(id);}}}this.notifySubscribers('notifications_cleared');this.saveNotificationsToStorage();}/**\r\n     * Subscription management\r\n     */subscribe(callback){this.subscribers.add(callback);return()=>this.subscribers.delete(callback);}notifySubscribers(event,data){this.subscribers.forEach(callback=>{try{callback(event,data);}catch(error){console.error('Error in notification subscriber:',error);}});}/**\r\n     * Alert rules management\r\n     */setupDefaultAlertRules(){// High frequency error suppression\nthis.addAlertRule('suppress_duplicate_errors',{conditions:{type:'error',frequency:{count:5,window:300000}// 5 errors in 5 minutes\n},action:{suppress:true}});// Critical error escalation\nthis.addAlertRule('escalate_critical',{conditions:{type:'critical'},action:{escalate:true,addChannels:['email','browser']}});// Business hours filtering\nthis.addAlertRule('business_hours_only',{conditions:{priority:'low',timeFilter:{startHour:9,endHour:17}},action:{suppress:notification=>!this.isBusinessHours(),customMessage:notification=>\"\".concat(notification.message,\" (Business hours only)\")}});}addAlertRule(ruleId,rule){this.alertRules.set(ruleId,rule);}removeAlertRule(ruleId){this.alertRules.delete(ruleId);}/**\r\n     * Utility functions\r\n     */generateNotificationId(){return\"notification_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));}calculateExpiration(type){const expirationTimes={critical:null,// Never expires\nerror:24*60*60*1000,// 24 hours\nwarning:12*60*60*1000,// 12 hours\nsuccess:6*60*60*1000,// 6 hours\ninfo:3*60*60*1000// 3 hours\n};const expiration=expirationTimes[type]||expirationTimes.info;return expiration?new Date(Date.now()+expiration).toISOString():null;}getUIClassName(notification){const baseClass='notification';const typeClass=\"notification-\".concat(notification.type);const priorityClass=\"notification-priority-\".concat(notification.priority);return\"\".concat(baseClass,\" \").concat(typeClass,\" \").concat(priorityClass);}getNotificationIcon(type){const icons={success:'✅',error:'❌',warning:'⚠️',info:'ℹ️',critical:'🚨'};return icons[type]||icons.info;}getHideDelay(priority){const delays={critical:0,// Don't auto-hide\nhigh:10000,// 10 seconds\nmedium:7000,// 7 seconds\nlow:5000,// 5 seconds\ninfo:3000// 3 seconds\n};return delays[priority]||delays.info;}matchesRule(notification,rule){const conditions=rule.conditions;// Check basic conditions\nif(conditions.type&&notification.type!==conditions.type)return false;if(conditions.priority&&notification.priority!==conditions.priority)return false;if(conditions.source&&notification.source!==conditions.source)return false;// Check frequency conditions\nif(conditions.frequency){const recentNotifications=this.getRecentNotifications(conditions.frequency.window,{type:notification.type,message:notification.message});if(recentNotifications.length<conditions.frequency.count)return false;}// Check time filters\nif(conditions.timeFilter){const now=new Date();const hour=now.getHours();if(hour<conditions.timeFilter.startHour||hour>conditions.timeFilter.endHour){return false;}}return true;}getRecentNotifications(windowMs){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const cutoff=Date.now()-windowMs;return this.notificationHistory.filter(notification=>{const notificationTime=new Date(notification.timestamp).getTime();if(notificationTime<cutoff)return false;if(filters.type&&notification.type!==filters.type)return false;if(filters.message&&notification.message!==filters.message)return false;return true;});}isBusinessHours(){const now=new Date();const hour=now.getHours();const day=now.getDay();// 0 = Sunday, 6 = Saturday\nreturn day>=1&&day<=5&&hour>=9&&hour<=17;}addToHistory(notification){this.notificationHistory.push({id:notification.id,type:notification.type,message:notification.message,timestamp:notification.timestamp});// Keep history size manageable\nif(this.notificationHistory.length>this.maxHistorySize){this.notificationHistory=this.notificationHistory.slice(-this.maxHistorySize);}}cleanupExpiredNotifications(){const now=Date.now();const toDelete=[];for(const[id,notification]of this.notifications){if(notification.expiresAt&&new Date(notification.expiresAt).getTime()<now){toDelete.push(id);}}toDelete.forEach(id=>{this.notifications.delete(id);});if(toDelete.length>0){this.saveNotificationsToStorage();}}setupPerformanceMonitoring(){// Monitor notification system performance\nsetInterval(()=>{const metrics={totalNotifications:this.notifications.size,unreadNotifications:Array.from(this.notifications.values()).filter(n=>!n.read).length,criticalNotifications:Array.from(this.notifications.values()).filter(n=>n.priority==='critical').length,memoryUsage:this.calculateMemoryUsage()};// Alert if system is overloaded\nif(metrics.totalNotifications>this.maxNotifications){this.createSystemAlert('notification_overload',metrics);this.performEmergencyCleanup();}},60000);// Check every minute\n}calculateMemoryUsage(){return JSON.stringify(Array.from(this.notifications.values())).length;}performEmergencyCleanup(){// Keep only critical and high priority notifications\nfor(const[id,notification]of this.notifications){if(!['critical','high'].includes(notification.priority)){this.notifications.delete(id);}}this.saveNotificationsToStorage();}generateAlertMessage(alertType,data){const messages={automation_failure:\"Automation system failed: \".concat(data.error||'Unknown error'),calculation_error:\"Calculation failed for \".concat(data.sqft||'unknown',\" sq ft: \").concat(data.error||'Unknown error'),performance_degradation:\"System performance degraded: \".concat(data.metric||'response time',\" is \").concat(data.value||'high'),batch_complete:\"Batch processing completed: \".concat(data.processed||0,\" items processed, \").concat(data.errors||0,\" errors\"),security_alert:\"Security threat detected: \".concat(data.threat||'Unknown threat',\" from \").concat(data.source||'unknown source')};return messages[alertType]||\"System alert: \".concat(alertType);}getSystemState(){return{timestamp:new Date().toISOString(),notificationCount:this.notifications.size,subscriberCount:this.subscribers.size,alertRuleCount:this.alertRules.size};}handleDeliveryFailure(notification,error){notification.retryCount++;if(notification.retryCount<notification.maxRetries){// Schedule retry\nsetTimeout(()=>{this.dispatchToChannels(notification);},Math.pow(2,notification.retryCount)*1000);// Exponential backoff\n}else{// Log failure and create alert\nthis.createSystemAlert('notification_delivery_failed',{notificationId:notification.id,error:error.message,retryCount:notification.retryCount});}}/**\r\n     * Persistence\r\n     */saveNotificationsToStorage(){try{const data={notifications:Array.from(this.notifications.entries()),history:this.notificationHistory.slice(-100),// Keep last 100 in storage\ntimestamp:new Date().toISOString()};localStorage.setItem('crm_notifications',JSON.stringify(data));}catch(error){console.error('Failed to save notifications to storage:',error);}}loadNotificationsFromStorage(){try{const data=localStorage.getItem('crm_notifications');if(data){const parsed=JSON.parse(data);this.notifications=new Map(parsed.notifications||[]);this.notificationHistory=parsed.history||[];// Clean up expired notifications on load\nthis.cleanupExpiredNotifications();}}catch(error){console.error('Failed to load notifications from storage:',error);}}/**\r\n     * Get notification statistics\r\n     */getStatistics(){const notifications=Array.from(this.notifications.values());return{total:notifications.length,unread:notifications.filter(n=>!n.read).length,byType:notifications.reduce((acc,n)=>{acc[n.type]=(acc[n.type]||0)+1;return acc;},{}),byPriority:notifications.reduce((acc,n)=>{acc[n.priority]=(acc[n.priority]||0)+1;return acc;},{}),bySource:notifications.reduce((acc,n)=>{acc[n.source]=(acc[n.source]||0)+1;return acc;},{}),persistent:notifications.filter(n=>n.persistent).length,historySize:this.notificationHistory.length,subscriberCount:this.subscribers.size,alertRuleCount:this.alertRules.size};}}export default NotificationSystem;","map":{"version":3,"names":["NotificationSystem","constructor","notifications","Map","subscribers","Set","alertRules","notificationHistory","channels","ui","email","sms","webhook","priorities","critical","high","medium","low","info","maxNotifications","maxHistorySize","autoCleanupInterval","initializeSystem","loadNotificationsFromStorage","setInterval","cleanupExpiredNotifications","setupPerformanceMonitoring","setupDefaultAlertRules","createNotification","options","notification","id","generateNotificationId","title","message","type","priority","source","timestamp","Date","toISOString","read","persistent","expiresAt","calculateExpiration","actions","metadata","retryCount","maxRetries","applyAlertRules","set","addToHistory","dispatchToChannels","notifySubscribers","saveNotificationsToStorage","createSystemAlert","alertType","data","alertConfigs","automation_failure","label","action","calculation_error","performance_degradation","batch_complete","security_alert","config","_objectSpread","generateAlertMessage","alertData","systemState","getSystemState","createBusinessAlert","eventType","businessConfigs","new_lead","concat","customerName","quote_generated","amount","calculation_completed","sqft","method","high_value_quote","eventData","createProgressNotification","processId","progress","existingNotification","Array","from","values","find","n","current","total","status","ruleId","rule","matchesRule","escalate","suppress","addChannels","customMessage","promises","map","channel","sendUINotification","sendEmailNotification","sendSMSNotification","sendWebhookNotification","sendBrowserNotification","Promise","resolve","allSettled","error","console","handleDeliveryFailure","uiNotification","className","getUIClassName","icon","getNotificationIcon","autoHide","hideDelay","getHideDelay","window","Notification","permission","browserNotification","body","tag","requireInteraction","slice","onclick","focus","markAsRead","reject","log","getNotifications","filters","arguments","length","undefined","unreadOnly","filter","sort","a","b","priorityDiff","notificationId","get","readAt","markAllAsRead","forEach","dismissNotification","delete","clearAllNotifications","includePersistent","clear","subscribe","callback","add","event","addAlertRule","conditions","frequency","count","timeFilter","startHour","endHour","isBusinessHours","removeAlertRule","now","Math","random","toString","substr","expirationTimes","warning","success","expiration","baseClass","typeClass","priorityClass","icons","delays","recentNotifications","getRecentNotifications","hour","getHours","windowMs","cutoff","notificationTime","getTime","day","getDay","push","toDelete","metrics","totalNotifications","size","unreadNotifications","criticalNotifications","memoryUsage","calculateMemoryUsage","performEmergencyCleanup","JSON","stringify","includes","messages","metric","value","processed","errors","threat","notificationCount","subscriberCount","alertRuleCount","setTimeout","pow","entries","history","localStorage","setItem","getItem","parsed","parse","getStatistics","unread","byType","reduce","acc","byPriority","bySource","historySize"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/notificationSystem.js"],"sourcesContent":["/**\r\n * Advanced Real-time Notification & Alert System\r\n *\r\n * Enterprise-grade notification management with multi-channel delivery,\r\n * smart filtering, priority queuing, and persistent storage.\r\n */\r\n\r\nclass NotificationSystem {\r\n    constructor() {\r\n        this.notifications = new Map();\r\n        this.subscribers = new Set();\r\n        this.alertRules = new Map();\r\n        this.notificationHistory = [];\r\n        this.channels = {\r\n            ui: true,\r\n            email: false,\r\n            sms: false,\r\n            webhook: false\r\n        };\r\n        this.priorities = {\r\n            critical: 1,\r\n            high: 2,\r\n            medium: 3,\r\n            low: 4,\r\n            info: 5\r\n        };\r\n        this.maxNotifications = 100;\r\n        this.maxHistorySize = 1000;\r\n        this.autoCleanupInterval = 300000; // 5 minutes\r\n\r\n        this.initializeSystem();\r\n    }\r\n\r\n    /**\r\n     * Initialize notification system\r\n     */\r\n    initializeSystem() {\r\n        // Load persisted notifications\r\n        this.loadNotificationsFromStorage();\r\n\r\n        // Set up auto-cleanup\r\n        setInterval(() => {\r\n            this.cleanupExpiredNotifications();\r\n        }, this.autoCleanupInterval);\r\n\r\n        // Set up performance monitoring\r\n        this.setupPerformanceMonitoring();\r\n\r\n        // Initialize alert rules\r\n        this.setupDefaultAlertRules();\r\n    }\r\n\r\n    /**\r\n     * Create and dispatch notification\r\n     */\r\n    createNotification(options) {\r\n        const notification = {\r\n            id: this.generateNotificationId(),\r\n            title: options.title || 'Notification',\r\n            message: options.message || '',\r\n            type: options.type || 'info', // success, error, warning, info, critical\r\n            priority: options.priority || 'medium',\r\n            source: options.source || 'system',\r\n            timestamp: new Date().toISOString(),\r\n            read: false,\r\n            persistent: options.persistent || false,\r\n            expiresAt: options.expiresAt || this.calculateExpiration(options.type),\r\n            actions: options.actions || [],\r\n            metadata: options.metadata || {},\r\n            channels: options.channels || ['ui'],\r\n            retryCount: 0,\r\n            maxRetries: options.maxRetries || 3\r\n        };\r\n\r\n        // Apply alert rules\r\n        this.applyAlertRules(notification);\r\n\r\n        // Store notification\r\n        this.notifications.set(notification.id, notification);\r\n\r\n        // Add to history\r\n        this.addToHistory(notification);\r\n\r\n        // Dispatch to channels\r\n        this.dispatchToChannels(notification);\r\n\r\n        // Notify subscribers\r\n        this.notifySubscribers('notification_created', notification);\r\n\r\n        // Persist to storage\r\n        this.saveNotificationsToStorage();\r\n\r\n        return notification;\r\n    }\r\n\r\n    /**\r\n     * System monitoring notifications\r\n     */\r\n    createSystemAlert(alertType, data) {\r\n        const alertConfigs = {\r\n            automation_failure: {\r\n                title: 'Automation System Failure',\r\n                type: 'critical',\r\n                priority: 'critical',\r\n                persistent: true,\r\n                channels: ['ui', 'email'],\r\n                actions: [\r\n                    { label: 'Run Diagnostics', action: 'run_diagnostics' },\r\n                    { label: 'Switch to Manual', action: 'enable_manual_mode' }\r\n                ]\r\n            },\r\n            calculation_error: {\r\n                title: 'Calculation Error Detected',\r\n                type: 'error',\r\n                priority: 'high',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'Retry Calculation', action: 'retry_calculation' },\r\n                    { label: 'Use Fallback', action: 'use_fallback' }\r\n                ]\r\n            },\r\n            performance_degradation: {\r\n                title: 'Performance Degradation Alert',\r\n                type: 'warning',\r\n                priority: 'medium',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'View Metrics', action: 'view_performance' },\r\n                    { label: 'Optimize System', action: 'optimize_system' }\r\n                ]\r\n            },\r\n            batch_complete: {\r\n                title: 'Batch Processing Complete',\r\n                type: 'success',\r\n                priority: 'low',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'View Results', action: 'view_batch_results' }\r\n                ]\r\n            },\r\n            security_alert: {\r\n                title: 'Security Alert',\r\n                type: 'critical',\r\n                priority: 'critical',\r\n                persistent: true,\r\n                channels: ['ui', 'email'],\r\n                actions: [\r\n                    { label: 'Review Logs', action: 'review_security_logs' },\r\n                    { label: 'Block IP', action: 'block_suspicious_ip' }\r\n                ]\r\n            }\r\n        };\r\n\r\n        const config = alertConfigs[alertType] || alertConfigs.automation_failure;\r\n\r\n        return this.createNotification({\r\n            ...config,\r\n            message: this.generateAlertMessage(alertType, data),\r\n            source: 'system_monitor',\r\n            metadata: {\r\n                alertType: alertType,\r\n                alertData: data,\r\n                systemState: this.getSystemState()\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Business logic notifications\r\n     */\r\n    createBusinessAlert(eventType, data) {\r\n        const businessConfigs = {\r\n            new_lead: {\r\n                title: 'New Lead Created',\r\n                type: 'info',\r\n                priority: 'medium',\r\n                message: `New lead: ${data.customerName || 'Unknown'}`\r\n            },\r\n            quote_generated: {\r\n                title: 'Quote Generated',\r\n                type: 'success',\r\n                priority: 'medium',\r\n                message: `Quote of $${data.amount} generated for ${data.customerName}`\r\n            },\r\n            calculation_completed: {\r\n                title: 'Vent Calculation Completed',\r\n                type: 'success',\r\n                priority: 'low',\r\n                message: `Calculation completed for ${data.sqft} sq ft via ${data.method}`\r\n            },\r\n            high_value_quote: {\r\n                title: 'High Value Quote Alert',\r\n                type: 'warning',\r\n                priority: 'high',\r\n                message: `High value quote: $${data.amount} for ${data.customerName}`,\r\n                persistent: true,\r\n                actions: [\r\n                    { label: 'Review Quote', action: 'review_quote' },\r\n                    { label: 'Contact Customer', action: 'contact_customer' }\r\n                ]\r\n            }\r\n        };\r\n\r\n        const config = businessConfigs[eventType] || businessConfigs.new_lead;\r\n\r\n        return this.createNotification({\r\n            ...config,\r\n            source: 'business_logic',\r\n            metadata: {\r\n                eventType: eventType,\r\n                eventData: data\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Real-time progress notifications\r\n     */\r\n    createProgressNotification(processId, progress) {\r\n        const existingNotification = Array.from(this.notifications.values())\r\n            .find(n => n.metadata.processId === processId);\r\n\r\n        if (existingNotification) {\r\n            // Update existing progress notification\r\n            existingNotification.message = `${progress.current}/${progress.total} - ${progress.status}`;\r\n            existingNotification.metadata.progress = progress;\r\n            existingNotification.timestamp = new Date().toISOString();\r\n\r\n            this.notifySubscribers('notification_updated', existingNotification);\r\n        } else {\r\n            // Create new progress notification\r\n            return this.createNotification({\r\n                title: progress.title || 'Processing...',\r\n                message: `${progress.current}/${progress.total} - ${progress.status}`,\r\n                type: 'info',\r\n                priority: 'low',\r\n                source: 'progress_tracker',\r\n                persistent: false,\r\n                metadata: {\r\n                    processId: processId,\r\n                    progress: progress\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Smart notification filtering\r\n     */\r\n    applyAlertRules(notification) {\r\n        for (const [ruleId, rule] of this.alertRules) {\r\n            if (this.matchesRule(notification, rule)) {\r\n                // Apply rule modifications\r\n                if (rule.escalate) {\r\n                    notification.priority = 'critical';\r\n                    notification.persistent = true;\r\n                }\r\n                if (rule.suppress) {\r\n                    notification.channels = [];\r\n                }\r\n                if (rule.addChannels) {\r\n                    notification.channels = [...notification.channels, ...rule.addChannels];\r\n                }\r\n                if (rule.customMessage) {\r\n                    notification.message = rule.customMessage(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Multi-channel notification dispatch\r\n     */\r\n    async dispatchToChannels(notification) {\r\n        const promises = notification.channels.map(channel => {\r\n            switch (channel) {\r\n                case 'ui':\r\n                    return this.sendUINotification(notification);\r\n                case 'email':\r\n                    return this.sendEmailNotification(notification);\r\n                case 'sms':\r\n                    return this.sendSMSNotification(notification);\r\n                case 'webhook':\r\n                    return this.sendWebhookNotification(notification);\r\n                case 'browser':\r\n                    return this.sendBrowserNotification(notification);\r\n                default:\r\n                    return Promise.resolve();\r\n            }\r\n        });\r\n\r\n        try {\r\n            await Promise.allSettled(promises);\r\n        } catch (error) {\r\n            console.error('Error dispatching notification:', error);\r\n            this.handleDeliveryFailure(notification, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UI notification delivery\r\n     */\r\n    sendUINotification(notification) {\r\n        // Add visual indicators based on priority\r\n        const uiNotification = {\r\n            ...notification,\r\n            className: this.getUIClassName(notification),\r\n            icon: this.getNotificationIcon(notification.type),\r\n            autoHide: !notification.persistent,\r\n            hideDelay: this.getHideDelay(notification.priority)\r\n        };\r\n\r\n        this.notifySubscribers('ui_notification', uiNotification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Browser push notification\r\n     */\r\n    async sendBrowserNotification(notification) {\r\n        if ('Notification' in window && Notification.permission === 'granted') {\r\n            const browserNotification = new Notification(notification.title, {\r\n                body: notification.message,\r\n                icon: '/favicon.ico',\r\n                tag: notification.id,\r\n                requireInteraction: notification.persistent,\r\n                actions: notification.actions.slice(0, 2) // Browser supports max 2 actions\r\n            });\r\n\r\n            browserNotification.onclick = () => {\r\n                window.focus();\r\n                this.markAsRead(notification.id);\r\n            };\r\n\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject('Browser notifications not supported or permission denied');\r\n    }\r\n\r\n    /**\r\n     * Email notification (placeholder for actual implementation)\r\n     */\r\n    async sendEmailNotification(notification) {\r\n        // In a real implementation, this would integrate with an email service\r\n        console.log('Email notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * SMS notification (placeholder for actual implementation)\r\n     */\r\n    async sendSMSNotification(notification) {\r\n        // In a real implementation, this would integrate with an SMS service\r\n        console.log('SMS notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Webhook notification (placeholder for actual implementation)\r\n     */\r\n    async sendWebhookNotification(notification) {\r\n        // In a real implementation, this would send HTTP POST to configured webhooks\r\n        console.log('Webhook notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Notification management\r\n     */\r\n    getNotifications(filters = {}) {\r\n        let notifications = Array.from(this.notifications.values());\r\n\r\n        // Apply filters\r\n        if (filters.unreadOnly) {\r\n            notifications = notifications.filter(n => !n.read);\r\n        }\r\n        if (filters.type) {\r\n            notifications = notifications.filter(n => n.type === filters.type);\r\n        }\r\n        if (filters.priority) {\r\n            notifications = notifications.filter(n => n.priority === filters.priority);\r\n        }\r\n        if (filters.source) {\r\n            notifications = notifications.filter(n => n.source === filters.source);\r\n        }\r\n\r\n        // Sort by priority and timestamp\r\n        notifications.sort((a, b) => {\r\n            const priorityDiff = this.priorities[a.priority] - this.priorities[b.priority];\r\n            if (priorityDiff !== 0) return priorityDiff;\r\n            return new Date(b.timestamp) - new Date(a.timestamp);\r\n        });\r\n\r\n        return notifications;\r\n    }\r\n\r\n    /**\r\n     * Mark notification as read\r\n     */\r\n    markAsRead(notificationId) {\r\n        const notification = this.notifications.get(notificationId);\r\n        if (notification) {\r\n            notification.read = true;\r\n            notification.readAt = new Date().toISOString();\r\n            this.notifySubscribers('notification_read', notification);\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mark all notifications as read\r\n     */\r\n    markAllAsRead(filters = {}) {\r\n        const notifications = this.getNotifications(filters);\r\n        notifications.forEach(notification => {\r\n            this.markAsRead(notification.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dismiss notification\r\n     */\r\n    dismissNotification(notificationId) {\r\n        const notification = this.notifications.get(notificationId);\r\n        if (notification && !notification.persistent) {\r\n            this.notifications.delete(notificationId);\r\n            this.notifySubscribers('notification_dismissed', notification);\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all notifications\r\n     */\r\n    clearAllNotifications(includePersistent = false) {\r\n        if (includePersistent) {\r\n            this.notifications.clear();\r\n        } else {\r\n            for (const [id, notification] of this.notifications) {\r\n                if (!notification.persistent) {\r\n                    this.notifications.delete(id);\r\n                }\r\n            }\r\n        }\r\n        this.notifySubscribers('notifications_cleared');\r\n        this.saveNotificationsToStorage();\r\n    }\r\n\r\n    /**\r\n     * Subscription management\r\n     */\r\n    subscribe(callback) {\r\n        this.subscribers.add(callback);\r\n        return () => this.subscribers.delete(callback);\r\n    }\r\n\r\n    notifySubscribers(event, data) {\r\n        this.subscribers.forEach(callback => {\r\n            try {\r\n                callback(event, data);\r\n            } catch (error) {\r\n                console.error('Error in notification subscriber:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Alert rules management\r\n     */\r\n    setupDefaultAlertRules() {\r\n        // High frequency error suppression\r\n        this.addAlertRule('suppress_duplicate_errors', {\r\n            conditions: {\r\n                type: 'error',\r\n                frequency: { count: 5, window: 300000 } // 5 errors in 5 minutes\r\n            },\r\n            action: { suppress: true }\r\n        });\r\n\r\n        // Critical error escalation\r\n        this.addAlertRule('escalate_critical', {\r\n            conditions: {\r\n                type: 'critical'\r\n            },\r\n            action: { escalate: true, addChannels: ['email', 'browser'] }\r\n        });\r\n\r\n        // Business hours filtering\r\n        this.addAlertRule('business_hours_only', {\r\n            conditions: {\r\n                priority: 'low',\r\n                timeFilter: { startHour: 9, endHour: 17 }\r\n            },\r\n            action: {\r\n                suppress: (notification) => !this.isBusinessHours(),\r\n                customMessage: (notification) => `${notification.message} (Business hours only)`\r\n            }\r\n        });\r\n    }\r\n\r\n    addAlertRule(ruleId, rule) {\r\n        this.alertRules.set(ruleId, rule);\r\n    }\r\n\r\n    removeAlertRule(ruleId) {\r\n        this.alertRules.delete(ruleId);\r\n    }\r\n\r\n    /**\r\n     * Utility functions\r\n     */\r\n    generateNotificationId() {\r\n        return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    calculateExpiration(type) {\r\n        const expirationTimes = {\r\n            critical: null, // Never expires\r\n            error: 24 * 60 * 60 * 1000, // 24 hours\r\n            warning: 12 * 60 * 60 * 1000, // 12 hours\r\n            success: 6 * 60 * 60 * 1000, // 6 hours\r\n            info: 3 * 60 * 60 * 1000 // 3 hours\r\n        };\r\n\r\n        const expiration = expirationTimes[type] || expirationTimes.info;\r\n        return expiration ? new Date(Date.now() + expiration).toISOString() : null;\r\n    }\r\n\r\n    getUIClassName(notification) {\r\n        const baseClass = 'notification';\r\n        const typeClass = `notification-${notification.type}`;\r\n        const priorityClass = `notification-priority-${notification.priority}`;\r\n        return `${baseClass} ${typeClass} ${priorityClass}`;\r\n    }\r\n\r\n    getNotificationIcon(type) {\r\n        const icons = {\r\n            success: '✅',\r\n            error: '❌',\r\n            warning: '⚠️',\r\n            info: 'ℹ️',\r\n            critical: '🚨'\r\n        };\r\n        return icons[type] || icons.info;\r\n    }\r\n\r\n    getHideDelay(priority) {\r\n        const delays = {\r\n            critical: 0, // Don't auto-hide\r\n            high: 10000, // 10 seconds\r\n            medium: 7000, // 7 seconds\r\n            low: 5000, // 5 seconds\r\n            info: 3000 // 3 seconds\r\n        };\r\n        return delays[priority] || delays.info;\r\n    }\r\n\r\n    matchesRule(notification, rule) {\r\n        const conditions = rule.conditions;\r\n\r\n        // Check basic conditions\r\n        if (conditions.type && notification.type !== conditions.type) return false;\r\n        if (conditions.priority && notification.priority !== conditions.priority) return false;\r\n        if (conditions.source && notification.source !== conditions.source) return false;\r\n\r\n        // Check frequency conditions\r\n        if (conditions.frequency) {\r\n            const recentNotifications = this.getRecentNotifications(\r\n                conditions.frequency.window,\r\n                { type: notification.type, message: notification.message }\r\n            );\r\n            if (recentNotifications.length < conditions.frequency.count) return false;\r\n        }\r\n\r\n        // Check time filters\r\n        if (conditions.timeFilter) {\r\n            const now = new Date();\r\n            const hour = now.getHours();\r\n            if (hour < conditions.timeFilter.startHour || hour > conditions.timeFilter.endHour) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getRecentNotifications(windowMs, filters = {}) {\r\n        const cutoff = Date.now() - windowMs;\r\n        return this.notificationHistory.filter(notification => {\r\n            const notificationTime = new Date(notification.timestamp).getTime();\r\n            if (notificationTime < cutoff) return false;\r\n\r\n            if (filters.type && notification.type !== filters.type) return false;\r\n            if (filters.message && notification.message !== filters.message) return false;\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    isBusinessHours() {\r\n        const now = new Date();\r\n        const hour = now.getHours();\r\n        const day = now.getDay(); // 0 = Sunday, 6 = Saturday\r\n        return day >= 1 && day <= 5 && hour >= 9 && hour <= 17;\r\n    }\r\n\r\n    addToHistory(notification) {\r\n        this.notificationHistory.push({\r\n            id: notification.id,\r\n            type: notification.type,\r\n            message: notification.message,\r\n            timestamp: notification.timestamp\r\n        });\r\n\r\n        // Keep history size manageable\r\n        if (this.notificationHistory.length > this.maxHistorySize) {\r\n            this.notificationHistory = this.notificationHistory.slice(-this.maxHistorySize);\r\n        }\r\n    }\r\n\r\n    cleanupExpiredNotifications() {\r\n        const now = Date.now();\r\n        const toDelete = [];\r\n\r\n        for (const [id, notification] of this.notifications) {\r\n            if (notification.expiresAt && new Date(notification.expiresAt).getTime() < now) {\r\n                toDelete.push(id);\r\n            }\r\n        }\r\n\r\n        toDelete.forEach(id => {\r\n            this.notifications.delete(id);\r\n        });\r\n\r\n        if (toDelete.length > 0) {\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    setupPerformanceMonitoring() {\r\n        // Monitor notification system performance\r\n        setInterval(() => {\r\n            const metrics = {\r\n                totalNotifications: this.notifications.size,\r\n                unreadNotifications: Array.from(this.notifications.values()).filter(n => !n.read).length,\r\n                criticalNotifications: Array.from(this.notifications.values()).filter(n => n.priority === 'critical').length,\r\n                memoryUsage: this.calculateMemoryUsage()\r\n            };\r\n\r\n            // Alert if system is overloaded\r\n            if (metrics.totalNotifications > this.maxNotifications) {\r\n                this.createSystemAlert('notification_overload', metrics);\r\n                this.performEmergencyCleanup();\r\n            }\r\n        }, 60000); // Check every minute\r\n    }\r\n\r\n    calculateMemoryUsage() {\r\n        return JSON.stringify(Array.from(this.notifications.values())).length;\r\n    }\r\n\r\n    performEmergencyCleanup() {\r\n        // Keep only critical and high priority notifications\r\n        for (const [id, notification] of this.notifications) {\r\n            if (!['critical', 'high'].includes(notification.priority)) {\r\n                this.notifications.delete(id);\r\n            }\r\n        }\r\n        this.saveNotificationsToStorage();\r\n    }\r\n\r\n    generateAlertMessage(alertType, data) {\r\n        const messages = {\r\n            automation_failure: `Automation system failed: ${data.error || 'Unknown error'}`,\r\n            calculation_error: `Calculation failed for ${data.sqft || 'unknown'} sq ft: ${data.error || 'Unknown error'}`,\r\n            performance_degradation: `System performance degraded: ${data.metric || 'response time'} is ${data.value || 'high'}`,\r\n            batch_complete: `Batch processing completed: ${data.processed || 0} items processed, ${data.errors || 0} errors`,\r\n            security_alert: `Security threat detected: ${data.threat || 'Unknown threat'} from ${data.source || 'unknown source'}`\r\n        };\r\n\r\n        return messages[alertType] || `System alert: ${alertType}`;\r\n    }\r\n\r\n    getSystemState() {\r\n        return {\r\n            timestamp: new Date().toISOString(),\r\n            notificationCount: this.notifications.size,\r\n            subscriberCount: this.subscribers.size,\r\n            alertRuleCount: this.alertRules.size\r\n        };\r\n    }\r\n\r\n    handleDeliveryFailure(notification, error) {\r\n        notification.retryCount++;\r\n\r\n        if (notification.retryCount < notification.maxRetries) {\r\n            // Schedule retry\r\n            setTimeout(() => {\r\n                this.dispatchToChannels(notification);\r\n            }, Math.pow(2, notification.retryCount) * 1000); // Exponential backoff\r\n        } else {\r\n            // Log failure and create alert\r\n            this.createSystemAlert('notification_delivery_failed', {\r\n                notificationId: notification.id,\r\n                error: error.message,\r\n                retryCount: notification.retryCount\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persistence\r\n     */\r\n    saveNotificationsToStorage() {\r\n        try {\r\n            const data = {\r\n                notifications: Array.from(this.notifications.entries()),\r\n                history: this.notificationHistory.slice(-100), // Keep last 100 in storage\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            localStorage.setItem('crm_notifications', JSON.stringify(data));\r\n        } catch (error) {\r\n            console.error('Failed to save notifications to storage:', error);\r\n        }\r\n    }\r\n\r\n    loadNotificationsFromStorage() {\r\n        try {\r\n            const data = localStorage.getItem('crm_notifications');\r\n            if (data) {\r\n                const parsed = JSON.parse(data);\r\n                this.notifications = new Map(parsed.notifications || []);\r\n                this.notificationHistory = parsed.history || [];\r\n\r\n                // Clean up expired notifications on load\r\n                this.cleanupExpiredNotifications();\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load notifications from storage:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get notification statistics\r\n     */\r\n    getStatistics() {\r\n        const notifications = Array.from(this.notifications.values());\r\n\r\n        return {\r\n            total: notifications.length,\r\n            unread: notifications.filter(n => !n.read).length,\r\n            byType: notifications.reduce((acc, n) => {\r\n                acc[n.type] = (acc[n.type] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            byPriority: notifications.reduce((acc, n) => {\r\n                acc[n.priority] = (acc[n.priority] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            bySource: notifications.reduce((acc, n) => {\r\n                acc[n.source] = (acc[n.source] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            persistent: notifications.filter(n => n.persistent).length,\r\n            historySize: this.notificationHistory.length,\r\n            subscriberCount: this.subscribers.size,\r\n            alertRuleCount: this.alertRules.size\r\n        };\r\n    }\r\n}\r\n\r\nexport default NotificationSystem;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}