{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { googleSheetsService } from '../api/googleSheetsService';\nexport function useLeads(addNotification) {\n  _s();\n  const [leads, setLeads] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const loadLeadsData = useCallback(async (isManualRefresh = false) => {\n    if (!isManualRefresh) setLoading(true);\n    const response = await googleSheetsService.fetchLeads();\n    if (response.success) {\n      const processedLeads = (response.leads || []).map(lead => ({\n        ...lead,\n        customerName: lead.customerName || `${lead.firstName || ''} ${lead.lastName || ''}`.trim() || 'Unknown'\n      })).sort((a, b) => new Date(b.createdDate || 0) - new Date(a.createdDate || 0));\n      setLeads(processedLeads);\n      if (isManualRefresh) addNotification('Leads refreshed.', 'success');\n    } else {\n      addNotification(`Error fetching leads: ${response.message}`, 'error');\n    }\n    if (!isManualRefresh) setLoading(false);\n  }, [addNotification]);\n  useEffect(() => {\n    loadLeadsData();\n  }, [loadLeadsData]);\n  const addLead = useCallback(async leadData => {\n    const response = await googleSheetsService.addLead(leadData);\n    if (response.success && response.lead) {\n      setLeads(prev => [response.lead, ...prev].sort((a, b) => new Date(b.createdDate || 0) - new Date(a.createdDate || 0)));\n      addNotification(`Lead added: ${response.lead.customerName}`, 'success');\n    } else {\n      addNotification(`Error adding lead: ${response.message}`, 'error');\n    }\n    return response;\n  }, [addNotification]);\n  const updateLead = useCallback(async updatedLead => {\n    const response = await googleSheetsService.updateLead(updatedLead);\n    if (response.success && response.lead) {\n      setLeads(prev => prev.map(l => l.id === response.lead.id ? response.lead : l));\n      addNotification(`Lead updated: ${response.lead.customerName}`, 'info');\n    } else {\n      addNotification(`Error updating lead: ${response.message}`, 'error');\n    }\n    return response;\n  }, [addNotification]);\n  const deleteLead = useCallback(async leadId => {\n    const leadToDelete = leads.find(l => l.id === leadId);\n    if (!leadToDelete) return;\n    if (window.confirm(`Are you sure you want to delete ${leadToDelete.customerName}?`)) {\n      const response = await googleSheetsService.deleteLead(leadId);\n      if (response.success) {\n        setLeads(currentLeads => currentLeads.filter(l => l.id !== leadId));\n        addNotification(`Lead deleted: ${leadToDelete.customerName}`, 'warning');\n      } else {\n        addNotification(`Error deleting lead: ${response.message}`, 'error');\n      }\n    }\n  }, [leads, addNotification]);\n  return {\n    leads,\n    loading,\n    refreshLeads: () => loadLeadsData(true),\n    addLead,\n    updateLead,\n    deleteLead\n  };\n}\n_s(useLeads, \"IvZchtRxy6u1oHAYI+4bZhyjEeY=\");","map":{"version":3,"names":["useState","useEffect","useCallback","googleSheetsService","useLeads","addNotification","_s","leads","setLeads","loading","setLoading","loadLeadsData","isManualRefresh","response","fetchLeads","success","processedLeads","map","lead","customerName","firstName","lastName","trim","sort","a","b","Date","createdDate","message","addLead","leadData","prev","updateLead","updatedLead","l","id","deleteLead","leadId","leadToDelete","find","window","confirm","currentLeads","filter","refreshLeads"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useLeads.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nexport function useLeads(addNotification) {\r\n  const [leads, setLeads] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const loadLeadsData = useCallback(async (isManualRefresh = false) => {\r\n    if (!isManualRefresh) setLoading(true);\r\n    const response = await googleSheetsService.fetchLeads();\r\n    if (response.success) {\r\n      const processedLeads = (response.leads || [])\r\n        .map(lead => ({\r\n          ...lead,\r\n          customerName: lead.customerName || `${lead.firstName||''} ${lead.lastName||''}`.trim() || 'Unknown'\r\n        }))\r\n        .sort((a, b) => new Date(b.createdDate || 0) - new Date(a.createdDate || 0));\r\n      setLeads(processedLeads);\r\n      if (isManualRefresh) addNotification('Leads refreshed.', 'success');\r\n    } else {\r\n      addNotification(`Error fetching leads: ${response.message}`, 'error');\r\n    }\r\n    if (!isManualRefresh) setLoading(false);\r\n  }, [addNotification]);\r\n\r\n  useEffect(() => {\r\n    loadLeadsData();\r\n  }, [loadLeadsData]);\r\n\r\n  const addLead = useCallback(async (leadData) => {\r\n    const response = await googleSheetsService.addLead(leadData);\r\n    if (response.success && response.lead) {\r\n      setLeads(prev => [response.lead, ...prev].sort((a,b) => new Date(b.createdDate||0)-new Date(a.createdDate||0)));\r\n      addNotification(`Lead added: ${response.lead.customerName}`, 'success');\r\n    } else {\r\n      addNotification(`Error adding lead: ${response.message}`, 'error');\r\n    }\r\n    return response;\r\n  }, [addNotification]);\r\n\r\n  const updateLead = useCallback(async (updatedLead) => {\r\n    const response = await googleSheetsService.updateLead(updatedLead);\r\n    if (response.success && response.lead) {\r\n      setLeads(prev => prev.map(l => (l.id === response.lead.id ? response.lead : l)));\r\n      addNotification(`Lead updated: ${response.lead.customerName}`, 'info');\r\n    } else {\r\n      addNotification(`Error updating lead: ${response.message}`, 'error');\r\n    }\r\n    return response;\r\n  }, [addNotification]);\r\n  \r\n  const deleteLead = useCallback(async (leadId) => {\r\n    const leadToDelete = leads.find(l => l.id === leadId);\r\n    if (!leadToDelete) return;\r\n\r\n    if (window.confirm(`Are you sure you want to delete ${leadToDelete.customerName}?`)) {\r\n      const response = await googleSheetsService.deleteLead(leadId);\r\n      if (response.success) {\r\n        setLeads(currentLeads => currentLeads.filter(l => l.id !== leadId));\r\n        addNotification(`Lead deleted: ${leadToDelete.customerName}`, 'warning');\r\n      } else {\r\n        addNotification(`Error deleting lead: ${response.message}`, 'error');\r\n      }\r\n    }\r\n  }, [leads, addNotification]);\r\n\r\n  return { leads, loading, refreshLeads: () => loadLeadsData(true), addLead, updateLead, deleteLead };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}