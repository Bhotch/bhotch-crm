{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';import{logCommunication,getCommunicationsForLead,getRecentCommunications,getCommunicationStats,deleteCommunication,saveToLocalStorage,getFromLocalStorage}from'../services/communicationsService';/**\n * Custom hook for managing communications\n */export function useCommunications(addNotification){const[communications,setCommunications]=useState([]);const[loading,setLoading]=useState(false);const[stats,setStats]=useState(null);/**\n   * Load communications from local storage on initialization\n   */const loadFromLocal=useCallback(()=>{try{const localComms=getFromLocalStorage();setCommunications(localComms);return localComms;}catch(error){console.error('Error loading communications from local storage:',error);return[];}},[]);// Load communications on mount\nuseEffect(()=>{loadFromLocal();},[loadFromLocal]);/**\n   * Add a new communication\n   */const addCommunication=useCallback(async communication=>{setLoading(true);try{// Try to save to backend\nawait logCommunication(communication);// Also save to local storage as backup\nconst result=saveToLocalStorage(communication);// Update state\nsetCommunications(prev=>[...prev,result.data]);if(addNotification){addNotification('Communication logged successfully','success');}return result.data;}catch(error){console.error('Error adding communication:',error);// Fallback to local storage only\ntry{const result=saveToLocalStorage(communication);setCommunications(prev=>[...prev,result.data]);if(addNotification){addNotification('Communication saved locally (offline mode)','warning');}return result.data;}catch(localError){if(addNotification){addNotification('Failed to save communication','error');}throw localError;}}finally{setLoading(false);}},[addNotification]);/**\n   * Get communications for a specific lead\n   */const getForLead=useCallback(async leadId=>{setLoading(true);try{// Try to fetch from backend\nconst data=await getCommunicationsForLead(leadId);// If backend returns empty, try local storage\nif(!data||data.length===0){const localComms=getFromLocalStorage();const filtered=localComms.filter(comm=>comm.leadId===leadId);return filtered;}return data;}catch(error){console.error('Error fetching communications for lead:',error);// Fallback to local storage\nconst localComms=getFromLocalStorage();return localComms.filter(comm=>comm.leadId===leadId);}finally{setLoading(false);}},[]);/**\n   * Get recent communications\n   */const getRecent=useCallback(async function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;setLoading(true);try{// Try to fetch from backend\nconst data=await getRecentCommunications(days);// If backend returns empty, try local storage\nif(!data||data.length===0){const localComms=getFromLocalStorage();const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-days);const filtered=localComms.filter(comm=>new Date(comm.dateTime)>=cutoffDate);setCommunications(filtered);return filtered;}setCommunications(data);return data;}catch(error){console.error('Error fetching recent communications:',error);// Fallback to local storage\nconst localComms=getFromLocalStorage();const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-days);const filtered=localComms.filter(comm=>new Date(comm.dateTime)>=cutoffDate);setCommunications(filtered);return filtered;}finally{setLoading(false);}},[]);/**\n   * Get communication statistics\n   */const getStats=useCallback(async()=>{setLoading(true);try{// Try to fetch from backend\nconst data=await getCommunicationStats();// If backend returns null, calculate from local storage\nif(!data){const localComms=getFromLocalStorage();const calculated={totalCalls:localComms.filter(c=>c.communicationType==='Call').length,totalSMS:localComms.filter(c=>c.communicationType==='SMS').length,totalEmails:localComms.filter(c=>c.communicationType==='Email').length,appointmentsConfirmed:localComms.filter(c=>{var _c$notes;return c.status==='Completed'&&((_c$notes=c.notes)===null||_c$notes===void 0?void 0:_c$notes.includes('confirmed'));}).length,noAnswers:localComms.filter(c=>c.status==='No Answer').length,voicemailsLeft:localComms.filter(c=>c.status==='Left Voicemail').length};setStats(calculated);return calculated;}setStats(data);return data;}catch(error){console.error('Error fetching communication stats:',error);return null;}finally{setLoading(false);}},[]);/**\n   * Delete a communication\n   */const removeCommunication=useCallback(async communicationId=>{setLoading(true);try{// Try to delete from backend\nawait deleteCommunication(communicationId);// Update state\nsetCommunications(prev=>prev.filter(c=>c.id!==communicationId));if(addNotification){addNotification('Communication deleted','success');}}catch(error){console.error('Error deleting communication:',error);if(addNotification){addNotification('Failed to delete communication','error');}throw error;}finally{setLoading(false);}},[addNotification]);return{communications,loading,stats,addCommunication,getForLead,getRecent,getStats,removeCommunication,loadFromLocal};}","map":{"version":3,"names":["useState","useCallback","useEffect","logCommunication","getCommunicationsForLead","getRecentCommunications","getCommunicationStats","deleteCommunication","saveToLocalStorage","getFromLocalStorage","useCommunications","addNotification","communications","setCommunications","loading","setLoading","stats","setStats","loadFromLocal","localComms","error","console","addCommunication","communication","result","prev","data","localError","getForLead","leadId","length","filtered","filter","comm","getRecent","days","arguments","undefined","cutoffDate","Date","setDate","getDate","dateTime","getStats","calculated","totalCalls","c","communicationType","totalSMS","totalEmails","appointmentsConfirmed","_c$notes","status","notes","includes","noAnswers","voicemailsLeft","removeCommunication","communicationId","id"],"sources":["c:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/hooks/useCommunications.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport {\n  logCommunication,\n  getCommunicationsForLead,\n  getRecentCommunications,\n  getCommunicationStats,\n  deleteCommunication,\n  saveToLocalStorage,\n  getFromLocalStorage\n} from '../services/communicationsService';\n\n/**\n * Custom hook for managing communications\n */\nexport function useCommunications(addNotification) {\n  const [communications, setCommunications] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [stats, setStats] = useState(null);\n\n  /**\n   * Load communications from local storage on initialization\n   */\n  const loadFromLocal = useCallback(() => {\n    try {\n      const localComms = getFromLocalStorage();\n      setCommunications(localComms);\n      return localComms;\n    } catch (error) {\n      console.error('Error loading communications from local storage:', error);\n      return [];\n    }\n  }, []);\n\n  // Load communications on mount\n  useEffect(() => {\n    loadFromLocal();\n  }, [loadFromLocal]);\n\n  /**\n   * Add a new communication\n   */\n  const addCommunication = useCallback(async (communication) => {\n    setLoading(true);\n    try {\n      // Try to save to backend\n      await logCommunication(communication);\n\n      // Also save to local storage as backup\n      const result = saveToLocalStorage(communication);\n\n      // Update state\n      setCommunications(prev => [...prev, result.data]);\n\n      if (addNotification) {\n        addNotification('Communication logged successfully', 'success');\n      }\n\n      return result.data;\n    } catch (error) {\n      console.error('Error adding communication:', error);\n\n      // Fallback to local storage only\n      try {\n        const result = saveToLocalStorage(communication);\n        setCommunications(prev => [...prev, result.data]);\n\n        if (addNotification) {\n          addNotification('Communication saved locally (offline mode)', 'warning');\n        }\n\n        return result.data;\n      } catch (localError) {\n        if (addNotification) {\n          addNotification('Failed to save communication', 'error');\n        }\n        throw localError;\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [addNotification]);\n\n  /**\n   * Get communications for a specific lead\n   */\n  const getForLead = useCallback(async (leadId) => {\n    setLoading(true);\n    try {\n      // Try to fetch from backend\n      const data = await getCommunicationsForLead(leadId);\n\n      // If backend returns empty, try local storage\n      if (!data || data.length === 0) {\n        const localComms = getFromLocalStorage();\n        const filtered = localComms.filter(comm => comm.leadId === leadId);\n        return filtered;\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error fetching communications for lead:', error);\n\n      // Fallback to local storage\n      const localComms = getFromLocalStorage();\n      return localComms.filter(comm => comm.leadId === leadId);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Get recent communications\n   */\n  const getRecent = useCallback(async (days = 7) => {\n    setLoading(true);\n    try {\n      // Try to fetch from backend\n      const data = await getRecentCommunications(days);\n\n      // If backend returns empty, try local storage\n      if (!data || data.length === 0) {\n        const localComms = getFromLocalStorage();\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - days);\n\n        const filtered = localComms.filter(comm =>\n          new Date(comm.dateTime) >= cutoffDate\n        );\n\n        setCommunications(filtered);\n        return filtered;\n      }\n\n      setCommunications(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching recent communications:', error);\n\n      // Fallback to local storage\n      const localComms = getFromLocalStorage();\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - days);\n\n      const filtered = localComms.filter(comm =>\n        new Date(comm.dateTime) >= cutoffDate\n      );\n\n      setCommunications(filtered);\n      return filtered;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Get communication statistics\n   */\n  const getStats = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Try to fetch from backend\n      const data = await getCommunicationStats();\n\n      // If backend returns null, calculate from local storage\n      if (!data) {\n        const localComms = getFromLocalStorage();\n        const calculated = {\n          totalCalls: localComms.filter(c => c.communicationType === 'Call').length,\n          totalSMS: localComms.filter(c => c.communicationType === 'SMS').length,\n          totalEmails: localComms.filter(c => c.communicationType === 'Email').length,\n          appointmentsConfirmed: localComms.filter(c => c.status === 'Completed' && c.notes?.includes('confirmed')).length,\n          noAnswers: localComms.filter(c => c.status === 'No Answer').length,\n          voicemailsLeft: localComms.filter(c => c.status === 'Left Voicemail').length,\n        };\n\n        setStats(calculated);\n        return calculated;\n      }\n\n      setStats(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching communication stats:', error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Delete a communication\n   */\n  const removeCommunication = useCallback(async (communicationId) => {\n    setLoading(true);\n    try {\n      // Try to delete from backend\n      await deleteCommunication(communicationId);\n\n      // Update state\n      setCommunications(prev => prev.filter(c => c.id !== communicationId));\n\n      if (addNotification) {\n        addNotification('Communication deleted', 'success');\n      }\n    } catch (error) {\n      console.error('Error deleting communication:', error);\n\n      if (addNotification) {\n        addNotification('Failed to delete communication', 'error');\n      }\n\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [addNotification]);\n\n  return {\n    communications,\n    loading,\n    stats,\n    addCommunication,\n    getForLead,\n    getRecent,\n    getStats,\n    removeCommunication,\n    loadFromLocal\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}