{"ast":null,"code":"import cacheManager from './advancedCache';\nclass EnterpriseLogger {\n  constructor() {\n    this.logLevels = {\n      ERROR: 0,\n      WARN: 1,\n      INFO: 2,\n      DEBUG: 3,\n      TRACE: 4\n    };\n    this.currentLevel = this.logLevels.INFO;\n    this.logBuffer = [];\n    this.maxBufferSize = 1000;\n    this.flushInterval = 30000; // 30 seconds\n    this.endpoints = [];\n    this.metadata = this.collectMetadata();\n    this.initializeLogger();\n  }\n  initializeLogger() {\n    // Start periodic flush\n    setInterval(() => this.flushLogs(), this.flushInterval);\n\n    // Handle page unload\n    window.addEventListener('beforeunload', () => this.flushLogs(true));\n\n    // Handle visibility change\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.flushLogs(true);\n      }\n    });\n\n    // Global error handler\n    window.addEventListener('error', event => {\n      var _event$error;\n      this.error('Global Error', {\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        stack: (_event$error = event.error) === null || _event$error === void 0 ? void 0 : _event$error.stack\n      });\n    });\n\n    // Unhandled promise rejection handler\n    window.addEventListener('unhandledrejection', event => {\n      this.error('Unhandled Promise Rejection', {\n        reason: event.reason,\n        promise: event.promise\n      });\n    });\n  }\n  collectMetadata() {\n    return {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n      cookieEnabled: navigator.cookieEnabled,\n      onLine: navigator.onLine,\n      screen: {\n        width: screen.width,\n        height: screen.height,\n        colorDepth: screen.colorDepth\n      },\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight\n      },\n      url: window.location.href,\n      referrer: document.referrer,\n      timestamp: Date.now(),\n      sessionId: this.getSessionId(),\n      userId: this.getUserId()\n    };\n  }\n  getSessionId() {\n    let sessionId = sessionStorage.getItem('loggerSessionId');\n    if (!sessionId) {\n      sessionId = this.generateId();\n      sessionStorage.setItem('loggerSessionId', sessionId);\n    }\n    return sessionId;\n  }\n  getUserId() {\n    return localStorage.getItem('userId') || 'anonymous';\n  }\n  generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n  setLevel(level) {\n    if (typeof level === 'string') {\n      var _this$logLevels$level;\n      this.currentLevel = (_this$logLevels$level = this.logLevels[level.toUpperCase()]) !== null && _this$logLevels$level !== void 0 ? _this$logLevels$level : this.logLevels.INFO;\n    } else {\n      this.currentLevel = level;\n    }\n  }\n  addEndpoint(endpoint) {\n    this.endpoints.push(endpoint);\n  }\n  createLogEntry(level, message, data = {}, category = 'general') {\n    return {\n      id: this.generateId(),\n      timestamp: Date.now(),\n      level,\n      message,\n      category,\n      data: this.sanitizeData(data),\n      metadata: {\n        ...this.metadata,\n        url: window.location.href,\n        timestamp: Date.now()\n      },\n      stack: this.captureStack()\n    };\n  }\n  sanitizeData(data) {\n    try {\n      // Remove circular references and sensitive data\n      const sanitized = JSON.parse(JSON.stringify(data, (key, value) => {\n        // Remove sensitive keys\n        const sensitiveKeys = ['password', 'token', 'apiKey', 'secret', 'auth'];\n        if (sensitiveKeys.some(sk => key.toLowerCase().includes(sk))) {\n          return '[REDACTED]';\n        }\n\n        // Handle functions\n        if (typeof value === 'function') {\n          return `[Function: ${value.name || 'anonymous'}]`;\n        }\n        return value;\n      }));\n      return sanitized;\n    } catch (error) {\n      return {\n        error: 'Failed to sanitize data',\n        original: String(data)\n      };\n    }\n  }\n  captureStack() {\n    try {\n      throw new Error();\n    } catch (error) {\n      return error.stack.split('\\n').slice(3).join('\\n');\n    }\n  }\n  shouldLog(level) {\n    return this.logLevels[level] <= this.currentLevel;\n  }\n  log(level, message, data, category) {\n    if (!this.shouldLog(level)) return;\n    const logEntry = this.createLogEntry(level, message, data, category);\n\n    // Add to buffer\n    this.logBuffer.push(logEntry);\n\n    // Enforce buffer size limit\n    if (this.logBuffer.length > this.maxBufferSize) {\n      this.logBuffer = this.logBuffer.slice(-this.maxBufferSize);\n    }\n\n    // Console output with styling\n    this.outputToConsole(logEntry);\n\n    // Store in cache for persistence\n    this.storeInCache(logEntry);\n\n    // Auto-flush on errors\n    if (level === 'ERROR') {\n      setTimeout(() => this.flushLogs(true), 100);\n    }\n  }\n  outputToConsole(logEntry) {\n    const {\n      level,\n      message,\n      data,\n      timestamp\n    } = logEntry;\n    const time = new Date(timestamp).toLocaleTimeString();\n    const styles = {\n      ERROR: 'color: #dc2626; font-weight: bold;',\n      WARN: 'color: #f59e0b; font-weight: bold;',\n      INFO: 'color: #2563eb;',\n      DEBUG: 'color: #7c3aed;',\n      TRACE: 'color: #6b7280;'\n    };\n    const style = styles[level] || styles.INFO;\n    console.groupCollapsed(`%c[${level}] ${time} - ${message}`, style);\n    if (data && Object.keys(data).length > 0) {\n      console.log('Data:', data);\n    }\n    console.log('Stack:', logEntry.stack);\n    console.log('Metadata:', logEntry.metadata);\n    console.groupEnd();\n  }\n  async storeInCache(logEntry) {\n    try {\n      const key = `log:${logEntry.id}`;\n      await cacheManager.set(key, logEntry, {\n        ttl: 24 * 60 * 60 * 1000,\n        // 24 hours\n        tags: ['logs', logEntry.level.toLowerCase()]\n      });\n    } catch (error) {\n      console.warn('Failed to cache log entry:', error);\n    }\n  }\n  async flushLogs(force = false) {\n    if (this.logBuffer.length === 0) return;\n    const logsToFlush = [...this.logBuffer];\n    this.logBuffer = [];\n    try {\n      // Send to configured endpoints\n      await Promise.all(this.endpoints.map(endpoint => this.sendToEndpoint(endpoint, logsToFlush)));\n\n      // Store in persistent cache\n      await this.storeLogsInCache(logsToFlush);\n      console.log(`Flushed ${logsToFlush.length} log entries`);\n    } catch (error) {\n      console.error('Failed to flush logs:', error);\n      // Restore logs to buffer if flush failed\n      this.logBuffer.unshift(...logsToFlush);\n    }\n  }\n  async sendToEndpoint(endpoint, logs) {\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          logs,\n          metadata: this.metadata\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to send logs to ${endpoint}:`, error);\n    }\n  }\n  async storeLogsInCache(logs) {\n    try {\n      const batchKey = `logs:batch:${Date.now()}`;\n      await cacheManager.set(batchKey, logs, {\n        ttl: 7 * 24 * 60 * 60 * 1000,\n        // 7 days\n        tags: ['log-batches']\n      });\n    } catch (error) {\n      console.warn('Failed to store logs in cache:', error);\n    }\n  }\n\n  // Public logging methods\n  error(message, data, category = 'error') {\n    this.log('ERROR', message, data, category);\n  }\n  warn(message, data, category = 'warning') {\n    this.log('WARN', message, data, category);\n  }\n  info(message, data, category = 'info') {\n    this.log('INFO', message, data, category);\n  }\n  debug(message, data, category = 'debug') {\n    this.log('DEBUG', message, data, category);\n  }\n  trace(message, data, category = 'trace') {\n    this.log('TRACE', message, data, category);\n  }\n\n  // Business logic logging methods\n  business(event, data = {}) {\n    this.info(`Business Event: ${event}`, data, 'business');\n  }\n  security(event, data = {}) {\n    this.warn(`Security Event: ${event}`, data, 'security');\n  }\n  performance(operation, duration, data = {}) {\n    this.info(`Performance: ${operation}`, {\n      duration,\n      ...data\n    }, 'performance');\n  }\n  user(action, data = {}) {\n    this.info(`User Action: ${action}`, data, 'user');\n  }\n  api(method, url, status, duration, data = {}) {\n    const level = status >= 400 ? 'ERROR' : status >= 300 ? 'WARN' : 'INFO';\n    this.log(level, `API: ${method} ${url}`, {\n      status,\n      duration,\n      ...data\n    }, 'api');\n  }\n\n  // Metrics and analytics\n  async getLogStatistics(timeRange = 3600000) {\n    try {\n      const since = Date.now() - timeRange;\n      const logKeys = await cacheManager.keys('log:*');\n      const logs = await Promise.all(logKeys.map(key => cacheManager.get(key)));\n      const recentLogs = logs.filter(log => log && log.timestamp > since).filter(Boolean);\n      const stats = {\n        total: recentLogs.length,\n        byLevel: {},\n        byCategory: {},\n        timeRange: timeRange,\n        period: {\n          start: since,\n          end: Date.now()\n        }\n      };\n      recentLogs.forEach(log => {\n        stats.byLevel[log.level] = (stats.byLevel[log.level] || 0) + 1;\n        stats.byCategory[log.category] = (stats.byCategory[log.category] || 0) + 1;\n      });\n      return stats;\n    } catch (error) {\n      console.error('Failed to get log statistics:', error);\n      return null;\n    }\n  }\n  async exportLogs(filters = {}) {\n    try {\n      const {\n        level,\n        category,\n        timeRange = 24 * 60 * 60 * 1000\n      } = filters;\n      const since = Date.now() - timeRange;\n      const logKeys = await cacheManager.keys('log:*');\n      const logs = await Promise.all(logKeys.map(key => cacheManager.get(key)));\n      let filteredLogs = logs.filter(log => log && log.timestamp > since).filter(Boolean);\n      if (level) {\n        filteredLogs = filteredLogs.filter(log => log.level === level);\n      }\n      if (category) {\n        filteredLogs = filteredLogs.filter(log => log.category === category);\n      }\n\n      // Sort by timestamp\n      filteredLogs.sort((a, b) => b.timestamp - a.timestamp);\n      return {\n        logs: filteredLogs,\n        exportedAt: Date.now(),\n        filters,\n        totalCount: filteredLogs.length\n      };\n    } catch (error) {\n      console.error('Failed to export logs:', error);\n      return null;\n    }\n  }\n  async clearLogs(olderThan = 7 * 24 * 60 * 60 * 1000) {\n    try {\n      const cutoff = Date.now() - olderThan;\n      const logKeys = await cacheManager.keys('log:*');\n      let deletedCount = 0;\n      for (const key of logKeys) {\n        const log = await cacheManager.get(key);\n        if (log && log.timestamp < cutoff) {\n          await cacheManager.delete(key);\n          deletedCount++;\n        }\n      }\n      this.info('Log cleanup completed', {\n        deletedCount,\n        cutoffDate: new Date(cutoff).toISOString()\n      }, 'system');\n      return deletedCount;\n    } catch (error) {\n      console.error('Failed to clear logs:', error);\n      return 0;\n    }\n  }\n  destroy() {\n    this.flushLogs(true);\n  }\n}\n\n// Create singleton instance\nconst logger = new EnterpriseLogger();\n\n// Production environment configuration\nif (process.env.NODE_ENV === 'production') {\n  logger.setLevel('WARN');\n} else {\n  logger.setLevel('DEBUG');\n}\nexport default logger;\nexport { EnterpriseLogger };","map":{"version":3,"names":["cacheManager","EnterpriseLogger","constructor","logLevels","ERROR","WARN","INFO","DEBUG","TRACE","currentLevel","logBuffer","maxBufferSize","flushInterval","endpoints","metadata","collectMetadata","initializeLogger","setInterval","flushLogs","window","addEventListener","document","visibilityState","event","_event$error","error","message","filename","lineno","colno","stack","reason","promise","userAgent","navigator","platform","language","cookieEnabled","onLine","screen","width","height","colorDepth","viewport","innerWidth","innerHeight","url","location","href","referrer","timestamp","Date","now","sessionId","getSessionId","userId","getUserId","sessionStorage","getItem","generateId","setItem","localStorage","toString","Math","random","substr","setLevel","level","_this$logLevels$level","toUpperCase","addEndpoint","endpoint","push","createLogEntry","data","category","id","sanitizeData","captureStack","sanitized","JSON","parse","stringify","key","value","sensitiveKeys","some","sk","toLowerCase","includes","name","original","String","Error","split","slice","join","shouldLog","log","logEntry","length","outputToConsole","storeInCache","setTimeout","time","toLocaleTimeString","styles","style","console","groupCollapsed","Object","keys","groupEnd","set","ttl","tags","warn","force","logsToFlush","Promise","all","map","sendToEndpoint","storeLogsInCache","unshift","logs","response","fetch","method","headers","body","ok","status","statusText","batchKey","info","debug","trace","business","security","performance","operation","duration","user","action","api","getLogStatistics","timeRange","since","logKeys","get","recentLogs","filter","Boolean","stats","total","byLevel","byCategory","period","start","end","forEach","exportLogs","filters","filteredLogs","sort","a","b","exportedAt","totalCount","clearLogs","olderThan","cutoff","deletedCount","delete","cutoffDate","toISOString","destroy","logger","process","env","NODE_ENV"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/enterpriseLogger.js"],"sourcesContent":["import cacheManager from './advancedCache';\r\n\r\nclass EnterpriseLogger {\r\n  constructor() {\r\n    this.logLevels = {\r\n      ERROR: 0,\r\n      WARN: 1,\r\n      INFO: 2,\r\n      DEBUG: 3,\r\n      TRACE: 4\r\n    };\r\n\r\n    this.currentLevel = this.logLevels.INFO;\r\n    this.logBuffer = [];\r\n    this.maxBufferSize = 1000;\r\n    this.flushInterval = 30000; // 30 seconds\r\n    this.endpoints = [];\r\n    this.metadata = this.collectMetadata();\r\n\r\n    this.initializeLogger();\r\n  }\r\n\r\n  initializeLogger() {\r\n    // Start periodic flush\r\n    setInterval(() => this.flushLogs(), this.flushInterval);\r\n\r\n    // Handle page unload\r\n    window.addEventListener('beforeunload', () => this.flushLogs(true));\r\n\r\n    // Handle visibility change\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.visibilityState === 'hidden') {\r\n        this.flushLogs(true);\r\n      }\r\n    });\r\n\r\n    // Global error handler\r\n    window.addEventListener('error', (event) => {\r\n      this.error('Global Error', {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n        stack: event.error?.stack\r\n      });\r\n    });\r\n\r\n    // Unhandled promise rejection handler\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.error('Unhandled Promise Rejection', {\r\n        reason: event.reason,\r\n        promise: event.promise\r\n      });\r\n    });\r\n  }\r\n\r\n  collectMetadata() {\r\n    return {\r\n      userAgent: navigator.userAgent,\r\n      platform: navigator.platform,\r\n      language: navigator.language,\r\n      cookieEnabled: navigator.cookieEnabled,\r\n      onLine: navigator.onLine,\r\n      screen: {\r\n        width: screen.width,\r\n        height: screen.height,\r\n        colorDepth: screen.colorDepth\r\n      },\r\n      viewport: {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      },\r\n      url: window.location.href,\r\n      referrer: document.referrer,\r\n      timestamp: Date.now(),\r\n      sessionId: this.getSessionId(),\r\n      userId: this.getUserId()\r\n    };\r\n  }\r\n\r\n  getSessionId() {\r\n    let sessionId = sessionStorage.getItem('loggerSessionId');\r\n    if (!sessionId) {\r\n      sessionId = this.generateId();\r\n      sessionStorage.setItem('loggerSessionId', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n\r\n  getUserId() {\r\n    return localStorage.getItem('userId') || 'anonymous';\r\n  }\r\n\r\n  generateId() {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  setLevel(level) {\r\n    if (typeof level === 'string') {\r\n      this.currentLevel = this.logLevels[level.toUpperCase()] ?? this.logLevels.INFO;\r\n    } else {\r\n      this.currentLevel = level;\r\n    }\r\n  }\r\n\r\n  addEndpoint(endpoint) {\r\n    this.endpoints.push(endpoint);\r\n  }\r\n\r\n  createLogEntry(level, message, data = {}, category = 'general') {\r\n    return {\r\n      id: this.generateId(),\r\n      timestamp: Date.now(),\r\n      level,\r\n      message,\r\n      category,\r\n      data: this.sanitizeData(data),\r\n      metadata: {\r\n        ...this.metadata,\r\n        url: window.location.href,\r\n        timestamp: Date.now()\r\n      },\r\n      stack: this.captureStack()\r\n    };\r\n  }\r\n\r\n  sanitizeData(data) {\r\n    try {\r\n      // Remove circular references and sensitive data\r\n      const sanitized = JSON.parse(JSON.stringify(data, (key, value) => {\r\n        // Remove sensitive keys\r\n        const sensitiveKeys = ['password', 'token', 'apiKey', 'secret', 'auth'];\r\n        if (sensitiveKeys.some(sk => key.toLowerCase().includes(sk))) {\r\n          return '[REDACTED]';\r\n        }\r\n\r\n        // Handle functions\r\n        if (typeof value === 'function') {\r\n          return `[Function: ${value.name || 'anonymous'}]`;\r\n        }\r\n\r\n        return value;\r\n      }));\r\n\r\n      return sanitized;\r\n    } catch (error) {\r\n      return { error: 'Failed to sanitize data', original: String(data) };\r\n    }\r\n  }\r\n\r\n  captureStack() {\r\n    try {\r\n      throw new Error();\r\n    } catch (error) {\r\n      return error.stack.split('\\n').slice(3).join('\\n');\r\n    }\r\n  }\r\n\r\n  shouldLog(level) {\r\n    return this.logLevels[level] <= this.currentLevel;\r\n  }\r\n\r\n  log(level, message, data, category) {\r\n    if (!this.shouldLog(level)) return;\r\n\r\n    const logEntry = this.createLogEntry(level, message, data, category);\r\n\r\n    // Add to buffer\r\n    this.logBuffer.push(logEntry);\r\n\r\n    // Enforce buffer size limit\r\n    if (this.logBuffer.length > this.maxBufferSize) {\r\n      this.logBuffer = this.logBuffer.slice(-this.maxBufferSize);\r\n    }\r\n\r\n    // Console output with styling\r\n    this.outputToConsole(logEntry);\r\n\r\n    // Store in cache for persistence\r\n    this.storeInCache(logEntry);\r\n\r\n    // Auto-flush on errors\r\n    if (level === 'ERROR') {\r\n      setTimeout(() => this.flushLogs(true), 100);\r\n    }\r\n  }\r\n\r\n  outputToConsole(logEntry) {\r\n    const { level, message, data, timestamp } = logEntry;\r\n    const time = new Date(timestamp).toLocaleTimeString();\r\n\r\n    const styles = {\r\n      ERROR: 'color: #dc2626; font-weight: bold;',\r\n      WARN: 'color: #f59e0b; font-weight: bold;',\r\n      INFO: 'color: #2563eb;',\r\n      DEBUG: 'color: #7c3aed;',\r\n      TRACE: 'color: #6b7280;'\r\n    };\r\n\r\n    const style = styles[level] || styles.INFO;\r\n\r\n    console.groupCollapsed(`%c[${level}] ${time} - ${message}`, style);\r\n    if (data && Object.keys(data).length > 0) {\r\n      console.log('Data:', data);\r\n    }\r\n    console.log('Stack:', logEntry.stack);\r\n    console.log('Metadata:', logEntry.metadata);\r\n    console.groupEnd();\r\n  }\r\n\r\n  async storeInCache(logEntry) {\r\n    try {\r\n      const key = `log:${logEntry.id}`;\r\n      await cacheManager.set(key, logEntry, {\r\n        ttl: 24 * 60 * 60 * 1000, // 24 hours\r\n        tags: ['logs', logEntry.level.toLowerCase()]\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to cache log entry:', error);\r\n    }\r\n  }\r\n\r\n  async flushLogs(force = false) {\r\n    if (this.logBuffer.length === 0) return;\r\n\r\n    const logsToFlush = [...this.logBuffer];\r\n    this.logBuffer = [];\r\n\r\n    try {\r\n      // Send to configured endpoints\r\n      await Promise.all(\r\n        this.endpoints.map(endpoint => this.sendToEndpoint(endpoint, logsToFlush))\r\n      );\r\n\r\n      // Store in persistent cache\r\n      await this.storeLogsInCache(logsToFlush);\r\n\r\n      console.log(`Flushed ${logsToFlush.length} log entries`);\r\n    } catch (error) {\r\n      console.error('Failed to flush logs:', error);\r\n      // Restore logs to buffer if flush failed\r\n      this.logBuffer.unshift(...logsToFlush);\r\n    }\r\n  }\r\n\r\n  async sendToEndpoint(endpoint, logs) {\r\n    try {\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          logs,\r\n          metadata: this.metadata\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Failed to send logs to ${endpoint}:`, error);\r\n    }\r\n  }\r\n\r\n  async storeLogsInCache(logs) {\r\n    try {\r\n      const batchKey = `logs:batch:${Date.now()}`;\r\n      await cacheManager.set(batchKey, logs, {\r\n        ttl: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n        tags: ['log-batches']\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to store logs in cache:', error);\r\n    }\r\n  }\r\n\r\n  // Public logging methods\r\n  error(message, data, category = 'error') {\r\n    this.log('ERROR', message, data, category);\r\n  }\r\n\r\n  warn(message, data, category = 'warning') {\r\n    this.log('WARN', message, data, category);\r\n  }\r\n\r\n  info(message, data, category = 'info') {\r\n    this.log('INFO', message, data, category);\r\n  }\r\n\r\n  debug(message, data, category = 'debug') {\r\n    this.log('DEBUG', message, data, category);\r\n  }\r\n\r\n  trace(message, data, category = 'trace') {\r\n    this.log('TRACE', message, data, category);\r\n  }\r\n\r\n  // Business logic logging methods\r\n  business(event, data = {}) {\r\n    this.info(`Business Event: ${event}`, data, 'business');\r\n  }\r\n\r\n  security(event, data = {}) {\r\n    this.warn(`Security Event: ${event}`, data, 'security');\r\n  }\r\n\r\n  performance(operation, duration, data = {}) {\r\n    this.info(`Performance: ${operation}`, {\r\n      duration,\r\n      ...data\r\n    }, 'performance');\r\n  }\r\n\r\n  user(action, data = {}) {\r\n    this.info(`User Action: ${action}`, data, 'user');\r\n  }\r\n\r\n  api(method, url, status, duration, data = {}) {\r\n    const level = status >= 400 ? 'ERROR' : status >= 300 ? 'WARN' : 'INFO';\r\n    this.log(level, `API: ${method} ${url}`, {\r\n      status,\r\n      duration,\r\n      ...data\r\n    }, 'api');\r\n  }\r\n\r\n  // Metrics and analytics\r\n  async getLogStatistics(timeRange = 3600000) {\r\n    try {\r\n      const since = Date.now() - timeRange;\r\n      const logKeys = await cacheManager.keys('log:*');\r\n\r\n      const logs = await Promise.all(\r\n        logKeys.map(key => cacheManager.get(key))\r\n      );\r\n\r\n      const recentLogs = logs\r\n        .filter(log => log && log.timestamp > since)\r\n        .filter(Boolean);\r\n\r\n      const stats = {\r\n        total: recentLogs.length,\r\n        byLevel: {},\r\n        byCategory: {},\r\n        timeRange: timeRange,\r\n        period: {\r\n          start: since,\r\n          end: Date.now()\r\n        }\r\n      };\r\n\r\n      recentLogs.forEach(log => {\r\n        stats.byLevel[log.level] = (stats.byLevel[log.level] || 0) + 1;\r\n        stats.byCategory[log.category] = (stats.byCategory[log.category] || 0) + 1;\r\n      });\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      console.error('Failed to get log statistics:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async exportLogs(filters = {}) {\r\n    try {\r\n      const { level, category, timeRange = 24 * 60 * 60 * 1000 } = filters;\r\n      const since = Date.now() - timeRange;\r\n\r\n      const logKeys = await cacheManager.keys('log:*');\r\n      const logs = await Promise.all(\r\n        logKeys.map(key => cacheManager.get(key))\r\n      );\r\n\r\n      let filteredLogs = logs\r\n        .filter(log => log && log.timestamp > since)\r\n        .filter(Boolean);\r\n\r\n      if (level) {\r\n        filteredLogs = filteredLogs.filter(log => log.level === level);\r\n      }\r\n\r\n      if (category) {\r\n        filteredLogs = filteredLogs.filter(log => log.category === category);\r\n      }\r\n\r\n      // Sort by timestamp\r\n      filteredLogs.sort((a, b) => b.timestamp - a.timestamp);\r\n\r\n      return {\r\n        logs: filteredLogs,\r\n        exportedAt: Date.now(),\r\n        filters,\r\n        totalCount: filteredLogs.length\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to export logs:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async clearLogs(olderThan = 7 * 24 * 60 * 60 * 1000) {\r\n    try {\r\n      const cutoff = Date.now() - olderThan;\r\n      const logKeys = await cacheManager.keys('log:*');\r\n\r\n      let deletedCount = 0;\r\n\r\n      for (const key of logKeys) {\r\n        const log = await cacheManager.get(key);\r\n        if (log && log.timestamp < cutoff) {\r\n          await cacheManager.delete(key);\r\n          deletedCount++;\r\n        }\r\n      }\r\n\r\n      this.info('Log cleanup completed', {\r\n        deletedCount,\r\n        cutoffDate: new Date(cutoff).toISOString()\r\n      }, 'system');\r\n\r\n      return deletedCount;\r\n    } catch (error) {\r\n      console.error('Failed to clear logs:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.flushLogs(true);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst logger = new EnterpriseLogger();\r\n\r\n// Production environment configuration\r\nif (process.env.NODE_ENV === 'production') {\r\n  logger.setLevel('WARN');\r\n} else {\r\n  logger.setLevel('DEBUG');\r\n}\r\n\r\nexport default logger;\r\nexport { EnterpriseLogger };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}