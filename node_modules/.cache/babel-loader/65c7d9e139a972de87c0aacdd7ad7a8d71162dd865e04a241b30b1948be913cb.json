{"ast":null,"code":"/**\r\n * Enterprise Testing Framework for Lomanco Vent Calculation System\r\n *\r\n * This comprehensive testing framework validates the entire automation pipeline\r\n * including web automation, mathematical fallbacks, and data validation.\r\n */\n\nimport { googleSheetsService } from '../api/googleSheetsService';\nclass VentCalculationTester {\n  constructor() {\n    this.testResults = [];\n    this.isRunning = false;\n    this.currentTest = null;\n  }\n\n  /**\r\n   * Run complete test suite for vent calculation system\r\n   */\n  async runFullTestSuite(onProgress, onComplete) {\n    this.isRunning = true;\n    this.testResults = [];\n    const testSuite = [{\n      name: 'Connection Test',\n      test: this.testConnection.bind(this)\n    }, {\n      name: 'Basic Calculation Test',\n      test: this.testBasicCalculation.bind(this)\n    }, {\n      name: 'Mathematical Fallback Test',\n      test: this.testMathematicalFallback.bind(this)\n    }, {\n      name: 'Edge Cases Test',\n      test: this.testEdgeCases.bind(this)\n    }, {\n      name: 'Performance Test',\n      test: this.testPerformance.bind(this)\n    }, {\n      name: 'Data Validation Test',\n      test: this.testDataValidation.bind(this)\n    }, {\n      name: 'Error Handling Test',\n      test: this.testErrorHandling.bind(this)\n    }, {\n      name: 'Batch Processing Test',\n      test: this.testBatchProcessing.bind(this)\n    }];\n    try {\n      for (let i = 0; i < testSuite.length; i++) {\n        const testCase = testSuite[i];\n        this.currentTest = testCase.name;\n        if (onProgress) {\n          onProgress({\n            current: i + 1,\n            total: testSuite.length,\n            testName: testCase.name,\n            status: 'running'\n          });\n        }\n        try {\n          const result = await testCase.test();\n          this.testResults.push({\n            name: testCase.name,\n            status: 'passed',\n            result: result,\n            timestamp: new Date().toISOString()\n          });\n        } catch (error) {\n          this.testResults.push({\n            name: testCase.name,\n            status: 'failed',\n            error: error.message,\n            timestamp: new Date().toISOString()\n          });\n        }\n\n        // Add delay between tests to avoid rate limiting\n        await this.delay(1000);\n      }\n      const summary = this.generateSummary();\n      if (onComplete) {\n        onComplete({\n          summary: summary,\n          results: this.testResults,\n          success: summary.passed === testSuite.length\n        });\n      }\n      return {\n        success: true,\n        summary: summary,\n        results: this.testResults\n      };\n    } catch (error) {\n      if (onComplete) {\n        onComplete({\n          success: false,\n          error: error.message,\n          results: this.testResults\n        });\n      }\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      this.isRunning = false;\n      this.currentTest = null;\n    }\n  }\n\n  /**\r\n   * Test basic connection to Google Apps Script backend\r\n   */\n  async testConnection() {\n    var _response$leadsSheet, _response$jobCountShe;\n    const response = await googleSheetsService.testConnection();\n    if (!response.success) {\n      throw new Error(`Connection failed: ${response.message}`);\n    }\n    return {\n      connectionTime: Date.now(),\n      spreadsheetId: response.spreadsheetId,\n      sheetsFound: ((_response$leadsSheet = response.leadsSheet) === null || _response$leadsSheet === void 0 ? void 0 : _response$leadsSheet.exists) && ((_response$jobCountShe = response.jobCountSheet) === null || _response$jobCountShe === void 0 ? void 0 : _response$jobCountShe.exists)\n    };\n  }\n\n  /**\r\n   * Test basic vent calculation with known values\r\n   */\n  async testBasicCalculation() {\n    const testCases = [{\n      sqft: 1500,\n      expectedRange: {\n        ridgeMin: 5,\n        ridgeMax: 15,\n        turbineMin: 1,\n        turbineMax: 5\n      }\n    }, {\n      sqft: 2500,\n      expectedRange: {\n        ridgeMin: 8,\n        ridgeMax: 25,\n        turbineMin: 2,\n        turbineMax: 8\n      }\n    }, {\n      sqft: 4000,\n      expectedRange: {\n        ridgeMin: 12,\n        ridgeMax: 40,\n        turbineMin: 3,\n        turbineMax: 12\n      }\n    }];\n    const results = [];\n    for (const testCase of testCases) {\n      const response = await googleSheetsService.calculateLomacoVents(testCase.sqft);\n      if (!response.success) {\n        throw new Error(`Calculation failed for ${testCase.sqft} sqft: ${response.message}`);\n      }\n      const {\n        ridgeVents,\n        turbineVents,\n        rimeFlow\n      } = response.ventCalculations;\n      const {\n        expectedRange\n      } = testCase;\n\n      // Validate results are within expected ranges\n      const ridgeValid = ridgeVents >= expectedRange.ridgeMin && ridgeVents <= expectedRange.ridgeMax;\n      const turbineValid = turbineVents >= expectedRange.turbineMin && turbineVents <= expectedRange.turbineMax;\n      const flowValid = rimeFlow > 0;\n      if (!ridgeValid || !turbineValid || !flowValid) {\n        throw new Error(`Results outside expected range for ${testCase.sqft} sqft`);\n      }\n      results.push({\n        sqft: testCase.sqft,\n        ridgeVents: ridgeVents,\n        turbineVents: turbineVents,\n        rimeFlow: rimeFlow,\n        method: response.calculationMethod,\n        valid: true\n      });\n    }\n    return results;\n  }\n\n  /**\r\n   * Test mathematical fallback calculations\r\n   */\n  async testMathematicalFallback() {\n    // Test various SQFT values using mathematical formulas\n    const testValues = [1000, 1500, 2000, 2500, 3000, 4000, 5000];\n    const results = [];\n    for (const sqft of testValues) {\n      // Calculate expected values using industry standards\n      const expectedRidgeVents = Math.ceil(sqft / 300 * 144 / 18);\n      const expectedTurbineVents = Math.ceil(sqft / 300 * 144 / 140);\n      const expectedRimeFlow = Math.round(sqft * 0.75 * 100) / 100;\n      const response = await googleSheetsService.calculateLomacoVents(sqft);\n      if (!response.success) {\n        throw new Error(`Mathematical calculation failed for ${sqft} sqft`);\n      }\n      const {\n        ridgeVents,\n        turbineVents,\n        rimeFlow\n      } = response.ventCalculations;\n\n      // Allow for slight variations in calculation methods\n      const ridgeAccuracy = Math.abs(ridgeVents - expectedRidgeVents) <= 2;\n      const turbineAccuracy = Math.abs(turbineVents - expectedTurbineVents) <= 1;\n      const flowAccuracy = Math.abs(rimeFlow - expectedRimeFlow) <= expectedRimeFlow * 0.1;\n      results.push({\n        sqft: sqft,\n        calculated: {\n          ridgeVents,\n          turbineVents,\n          rimeFlow\n        },\n        expected: {\n          ridgeVents: expectedRidgeVents,\n          turbineVents: expectedTurbineVents,\n          rimeFlow: expectedRimeFlow\n        },\n        accurate: ridgeAccuracy && turbineAccuracy && flowAccuracy\n      });\n    }\n    return results;\n  }\n\n  /**\r\n   * Test edge cases and boundary conditions\r\n   */\n  async testEdgeCases() {\n    const edgeCases = [{\n      sqft: 1,\n      description: 'Minimum SQFT'\n    }, {\n      sqft: 100,\n      description: 'Very small house'\n    }, {\n      sqft: 10000,\n      description: 'Very large house'\n    }, {\n      sqft: 1500.5,\n      description: 'Decimal SQFT'\n    }];\n    const results = [];\n    for (const testCase of edgeCases) {\n      try {\n        const response = await googleSheetsService.calculateLomacoVents(testCase.sqft);\n        results.push({\n          sqft: testCase.sqft,\n          description: testCase.description,\n          success: response.success,\n          calculations: response.success ? response.ventCalculations : null,\n          error: response.success ? null : response.message\n        });\n      } catch (error) {\n        results.push({\n          sqft: testCase.sqft,\n          description: testCase.description,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n    return results;\n  }\n\n  /**\r\n   * Test system performance under load\r\n   */\n  async testPerformance() {\n    const testRequests = 5;\n    const sqftValue = 2500;\n    const results = [];\n\n    // Test sequential requests\n    const sequentialStart = Date.now();\n    for (let i = 0; i < testRequests; i++) {\n      const requestStart = Date.now();\n      const response = await googleSheetsService.calculateLomacoVents(sqftValue);\n      const requestTime = Date.now() - requestStart;\n      results.push({\n        requestNumber: i + 1,\n        responseTime: requestTime,\n        success: response.success,\n        method: response.success ? response.calculationMethod : null\n      });\n    }\n    const sequentialTotal = Date.now() - sequentialStart;\n\n    // Test concurrent requests\n    const concurrentStart = Date.now();\n    const concurrentPromises = Array(testRequests).fill().map((_, i) => googleSheetsService.calculateLomacoVents(sqftValue + i));\n    const concurrentResults = await Promise.allSettled(concurrentPromises);\n    const concurrentTotal = Date.now() - concurrentStart;\n    return {\n      sequential: {\n        totalTime: sequentialTotal,\n        averageTime: sequentialTotal / testRequests,\n        results: results\n      },\n      concurrent: {\n        totalTime: concurrentTotal,\n        successCount: concurrentResults.filter(r => r.status === 'fulfilled').length,\n        errorCount: concurrentResults.filter(r => r.status === 'rejected').length\n      }\n    };\n  }\n\n  /**\r\n   * Test data validation and sanitization\r\n   */\n  async testDataValidation() {\n    const invalidInputs = [{\n      input: null,\n      description: 'Null input'\n    }, {\n      input: undefined,\n      description: 'Undefined input'\n    }, {\n      input: '',\n      description: 'Empty string'\n    }, {\n      input: 'abc',\n      description: 'Text input'\n    }, {\n      input: -100,\n      description: 'Negative number'\n    }, {\n      input: 0,\n      description: 'Zero input'\n    }];\n    const results = [];\n    for (const testCase of invalidInputs) {\n      try {\n        const response = await googleSheetsService.calculateLomacoVents(testCase.input);\n\n        // These should all fail validation\n        results.push({\n          input: testCase.input,\n          description: testCase.description,\n          shouldFail: true,\n          actuallyFailed: !response.success,\n          response: response\n        });\n      } catch (error) {\n        results.push({\n          input: testCase.input,\n          description: testCase.description,\n          shouldFail: true,\n          actuallyFailed: true,\n          error: error.message\n        });\n      }\n    }\n    return results;\n  }\n\n  /**\r\n   * Test error handling and recovery\r\n   */\n  async testErrorHandling() {\n    // This test verifies that the system gracefully handles various error conditions\n    const results = {\n      connectionRecovery: false,\n      fallbackActivation: false,\n      errorReporting: false\n    };\n    try {\n      // Test with a valid request to ensure baseline functionality\n      const baselineResponse = await googleSheetsService.calculateLomacoVents(2000);\n      results.baselineSuccess = baselineResponse.success;\n\n      // Test error reporting\n      const invalidResponse = await googleSheetsService.calculateLomacoVents(-1);\n      results.errorReporting = !invalidResponse.success && invalidResponse.message;\n\n      // Test fallback mechanism by checking if both web and math methods work\n      const fallbackResponse = await googleSheetsService.calculateLomacoVents(3000);\n      if (fallbackResponse.success) {\n        results.fallbackActivation = true;\n      }\n    } catch (error) {\n      results.testError = error.message;\n    }\n    return results;\n  }\n\n  /**\r\n   * Test batch processing functionality\r\n   */\n  async testBatchProcessing() {\n    // Simulate batch processing test data\n    const testJobCounts = [{\n      id: 'test1',\n      sqft: 1500\n    }, {\n      id: 'test2',\n      sqft: 2000\n    }, {\n      id: 'test3',\n      sqft: 2500\n    }];\n    const results = [];\n    for (const jobCount of testJobCounts) {\n      try {\n        const response = await googleSheetsService.calculateLomacoVents(jobCount.sqft);\n        results.push({\n          id: jobCount.id,\n          sqft: jobCount.sqft,\n          success: response.success,\n          calculations: response.success ? response.ventCalculations : null,\n          processingTime: response.processingTime || 'unknown'\n        });\n\n        // Add delay to simulate real batch processing\n        await this.delay(500);\n      } catch (error) {\n        results.push({\n          id: jobCount.id,\n          sqft: jobCount.sqft,\n          success: false,\n          error: error.message\n        });\n      }\n    }\n    return {\n      processedCount: results.length,\n      successCount: results.filter(r => r.success).length,\n      errorCount: results.filter(r => !r.success).length,\n      results: results\n    };\n  }\n\n  /**\r\n   * Generate test summary\r\n   */\n  generateSummary() {\n    const total = this.testResults.length;\n    const passed = this.testResults.filter(r => r.status === 'passed').length;\n    const failed = this.testResults.filter(r => r.status === 'failed').length;\n    return {\n      total: total,\n      passed: passed,\n      failed: failed,\n      successRate: total > 0 ? Math.round(passed / total * 100) : 0,\n      completedAt: new Date().toISOString()\n    };\n  }\n\n  /**\r\n   * Utility function for adding delays\r\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\r\n   * Get current test results\r\n   */\n  getResults() {\n    return {\n      isRunning: this.isRunning,\n      currentTest: this.currentTest,\n      results: this.testResults,\n      summary: this.testResults.length > 0 ? this.generateSummary() : null\n    };\n  }\n}\nexport default VentCalculationTester;","map":{"version":3,"names":["googleSheetsService","VentCalculationTester","constructor","testResults","isRunning","currentTest","runFullTestSuite","onProgress","onComplete","testSuite","name","test","testConnection","bind","testBasicCalculation","testMathematicalFallback","testEdgeCases","testPerformance","testDataValidation","testErrorHandling","testBatchProcessing","i","length","testCase","current","total","testName","status","result","push","timestamp","Date","toISOString","error","message","delay","summary","generateSummary","results","success","passed","_response$leadsSheet","_response$jobCountShe","response","Error","connectionTime","now","spreadsheetId","sheetsFound","leadsSheet","exists","jobCountSheet","testCases","sqft","expectedRange","ridgeMin","ridgeMax","turbineMin","turbineMax","calculateLomacoVents","ridgeVents","turbineVents","rimeFlow","ventCalculations","ridgeValid","turbineValid","flowValid","method","calculationMethod","valid","testValues","expectedRidgeVents","Math","ceil","expectedTurbineVents","expectedRimeFlow","round","ridgeAccuracy","abs","turbineAccuracy","flowAccuracy","calculated","expected","accurate","edgeCases","description","calculations","testRequests","sqftValue","sequentialStart","requestStart","requestTime","requestNumber","responseTime","sequentialTotal","concurrentStart","concurrentPromises","Array","fill","map","_","concurrentResults","Promise","allSettled","concurrentTotal","sequential","totalTime","averageTime","concurrent","successCount","filter","r","errorCount","invalidInputs","input","undefined","shouldFail","actuallyFailed","connectionRecovery","fallbackActivation","errorReporting","baselineResponse","baselineSuccess","invalidResponse","fallbackResponse","testError","testJobCounts","id","jobCount","processingTime","processedCount","failed","successRate","completedAt","ms","resolve","setTimeout","getResults"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/ventCalculationTester.js"],"sourcesContent":["/**\r\n * Enterprise Testing Framework for Lomanco Vent Calculation System\r\n *\r\n * This comprehensive testing framework validates the entire automation pipeline\r\n * including web automation, mathematical fallbacks, and data validation.\r\n */\r\n\r\nimport { googleSheetsService } from '../api/googleSheetsService';\r\n\r\nclass VentCalculationTester {\r\n    constructor() {\r\n        this.testResults = [];\r\n        this.isRunning = false;\r\n        this.currentTest = null;\r\n    }\r\n\r\n    /**\r\n     * Run complete test suite for vent calculation system\r\n     */\r\n    async runFullTestSuite(onProgress, onComplete) {\r\n        this.isRunning = true;\r\n        this.testResults = [];\r\n\r\n        const testSuite = [\r\n            { name: 'Connection Test', test: this.testConnection.bind(this) },\r\n            { name: 'Basic Calculation Test', test: this.testBasicCalculation.bind(this) },\r\n            { name: 'Mathematical Fallback Test', test: this.testMathematicalFallback.bind(this) },\r\n            { name: 'Edge Cases Test', test: this.testEdgeCases.bind(this) },\r\n            { name: 'Performance Test', test: this.testPerformance.bind(this) },\r\n            { name: 'Data Validation Test', test: this.testDataValidation.bind(this) },\r\n            { name: 'Error Handling Test', test: this.testErrorHandling.bind(this) },\r\n            { name: 'Batch Processing Test', test: this.testBatchProcessing.bind(this) }\r\n        ];\r\n\r\n        try {\r\n            for (let i = 0; i < testSuite.length; i++) {\r\n                const testCase = testSuite[i];\r\n                this.currentTest = testCase.name;\r\n\r\n                if (onProgress) {\r\n                    onProgress({\r\n                        current: i + 1,\r\n                        total: testSuite.length,\r\n                        testName: testCase.name,\r\n                        status: 'running'\r\n                    });\r\n                }\r\n\r\n                try {\r\n                    const result = await testCase.test();\r\n                    this.testResults.push({\r\n                        name: testCase.name,\r\n                        status: 'passed',\r\n                        result: result,\r\n                        timestamp: new Date().toISOString()\r\n                    });\r\n                } catch (error) {\r\n                    this.testResults.push({\r\n                        name: testCase.name,\r\n                        status: 'failed',\r\n                        error: error.message,\r\n                        timestamp: new Date().toISOString()\r\n                    });\r\n                }\r\n\r\n                // Add delay between tests to avoid rate limiting\r\n                await this.delay(1000);\r\n            }\r\n\r\n            const summary = this.generateSummary();\r\n\r\n            if (onComplete) {\r\n                onComplete({\r\n                    summary: summary,\r\n                    results: this.testResults,\r\n                    success: summary.passed === testSuite.length\r\n                });\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                summary: summary,\r\n                results: this.testResults\r\n            };\r\n\r\n        } catch (error) {\r\n            if (onComplete) {\r\n                onComplete({\r\n                    success: false,\r\n                    error: error.message,\r\n                    results: this.testResults\r\n                });\r\n            }\r\n            return { success: false, error: error.message };\r\n        } finally {\r\n            this.isRunning = false;\r\n            this.currentTest = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test basic connection to Google Apps Script backend\r\n     */\r\n    async testConnection() {\r\n        const response = await googleSheetsService.testConnection();\r\n\r\n        if (!response.success) {\r\n            throw new Error(`Connection failed: ${response.message}`);\r\n        }\r\n\r\n        return {\r\n            connectionTime: Date.now(),\r\n            spreadsheetId: response.spreadsheetId,\r\n            sheetsFound: response.leadsSheet?.exists && response.jobCountSheet?.exists\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Test basic vent calculation with known values\r\n     */\r\n    async testBasicCalculation() {\r\n        const testCases = [\r\n            { sqft: 1500, expectedRange: { ridgeMin: 5, ridgeMax: 15, turbineMin: 1, turbineMax: 5 } },\r\n            { sqft: 2500, expectedRange: { ridgeMin: 8, ridgeMax: 25, turbineMin: 2, turbineMax: 8 } },\r\n            { sqft: 4000, expectedRange: { ridgeMin: 12, ridgeMax: 40, turbineMin: 3, turbineMax: 12 } }\r\n        ];\r\n\r\n        const results = [];\r\n\r\n        for (const testCase of testCases) {\r\n            const response = await googleSheetsService.calculateLomacoVents(testCase.sqft);\r\n\r\n            if (!response.success) {\r\n                throw new Error(`Calculation failed for ${testCase.sqft} sqft: ${response.message}`);\r\n            }\r\n\r\n            const { ridgeVents, turbineVents, rimeFlow } = response.ventCalculations;\r\n            const { expectedRange } = testCase;\r\n\r\n            // Validate results are within expected ranges\r\n            const ridgeValid = ridgeVents >= expectedRange.ridgeMin && ridgeVents <= expectedRange.ridgeMax;\r\n            const turbineValid = turbineVents >= expectedRange.turbineMin && turbineVents <= expectedRange.turbineMax;\r\n            const flowValid = rimeFlow > 0;\r\n\r\n            if (!ridgeValid || !turbineValid || !flowValid) {\r\n                throw new Error(`Results outside expected range for ${testCase.sqft} sqft`);\r\n            }\r\n\r\n            results.push({\r\n                sqft: testCase.sqft,\r\n                ridgeVents: ridgeVents,\r\n                turbineVents: turbineVents,\r\n                rimeFlow: rimeFlow,\r\n                method: response.calculationMethod,\r\n                valid: true\r\n            });\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Test mathematical fallback calculations\r\n     */\r\n    async testMathematicalFallback() {\r\n        // Test various SQFT values using mathematical formulas\r\n        const testValues = [1000, 1500, 2000, 2500, 3000, 4000, 5000];\r\n        const results = [];\r\n\r\n        for (const sqft of testValues) {\r\n            // Calculate expected values using industry standards\r\n            const expectedRidgeVents = Math.ceil((sqft / 300 * 144) / 18);\r\n            const expectedTurbineVents = Math.ceil((sqft / 300 * 144) / 140);\r\n            const expectedRimeFlow = Math.round(sqft * 0.75 * 100) / 100;\r\n\r\n            const response = await googleSheetsService.calculateLomacoVents(sqft);\r\n\r\n            if (!response.success) {\r\n                throw new Error(`Mathematical calculation failed for ${sqft} sqft`);\r\n            }\r\n\r\n            const { ridgeVents, turbineVents, rimeFlow } = response.ventCalculations;\r\n\r\n            // Allow for slight variations in calculation methods\r\n            const ridgeAccuracy = Math.abs(ridgeVents - expectedRidgeVents) <= 2;\r\n            const turbineAccuracy = Math.abs(turbineVents - expectedTurbineVents) <= 1;\r\n            const flowAccuracy = Math.abs(rimeFlow - expectedRimeFlow) <= expectedRimeFlow * 0.1;\r\n\r\n            results.push({\r\n                sqft: sqft,\r\n                calculated: { ridgeVents, turbineVents, rimeFlow },\r\n                expected: { ridgeVents: expectedRidgeVents, turbineVents: expectedTurbineVents, rimeFlow: expectedRimeFlow },\r\n                accurate: ridgeAccuracy && turbineAccuracy && flowAccuracy\r\n            });\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Test edge cases and boundary conditions\r\n     */\r\n    async testEdgeCases() {\r\n        const edgeCases = [\r\n            { sqft: 1, description: 'Minimum SQFT' },\r\n            { sqft: 100, description: 'Very small house' },\r\n            { sqft: 10000, description: 'Very large house' },\r\n            { sqft: 1500.5, description: 'Decimal SQFT' }\r\n        ];\r\n\r\n        const results = [];\r\n\r\n        for (const testCase of edgeCases) {\r\n            try {\r\n                const response = await googleSheetsService.calculateLomacoVents(testCase.sqft);\r\n\r\n                results.push({\r\n                    sqft: testCase.sqft,\r\n                    description: testCase.description,\r\n                    success: response.success,\r\n                    calculations: response.success ? response.ventCalculations : null,\r\n                    error: response.success ? null : response.message\r\n                });\r\n            } catch (error) {\r\n                results.push({\r\n                    sqft: testCase.sqft,\r\n                    description: testCase.description,\r\n                    success: false,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Test system performance under load\r\n     */\r\n    async testPerformance() {\r\n        const testRequests = 5;\r\n        const sqftValue = 2500;\r\n        const results = [];\r\n\r\n        // Test sequential requests\r\n        const sequentialStart = Date.now();\r\n        for (let i = 0; i < testRequests; i++) {\r\n            const requestStart = Date.now();\r\n            const response = await googleSheetsService.calculateLomacoVents(sqftValue);\r\n            const requestTime = Date.now() - requestStart;\r\n\r\n            results.push({\r\n                requestNumber: i + 1,\r\n                responseTime: requestTime,\r\n                success: response.success,\r\n                method: response.success ? response.calculationMethod : null\r\n            });\r\n        }\r\n        const sequentialTotal = Date.now() - sequentialStart;\r\n\r\n        // Test concurrent requests\r\n        const concurrentStart = Date.now();\r\n        const concurrentPromises = Array(testRequests).fill().map((_, i) =>\r\n            googleSheetsService.calculateLomacoVents(sqftValue + i)\r\n        );\r\n\r\n        const concurrentResults = await Promise.allSettled(concurrentPromises);\r\n        const concurrentTotal = Date.now() - concurrentStart;\r\n\r\n        return {\r\n            sequential: {\r\n                totalTime: sequentialTotal,\r\n                averageTime: sequentialTotal / testRequests,\r\n                results: results\r\n            },\r\n            concurrent: {\r\n                totalTime: concurrentTotal,\r\n                successCount: concurrentResults.filter(r => r.status === 'fulfilled').length,\r\n                errorCount: concurrentResults.filter(r => r.status === 'rejected').length\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Test data validation and sanitization\r\n     */\r\n    async testDataValidation() {\r\n        const invalidInputs = [\r\n            { input: null, description: 'Null input' },\r\n            { input: undefined, description: 'Undefined input' },\r\n            { input: '', description: 'Empty string' },\r\n            { input: 'abc', description: 'Text input' },\r\n            { input: -100, description: 'Negative number' },\r\n            { input: 0, description: 'Zero input' }\r\n        ];\r\n\r\n        const results = [];\r\n\r\n        for (const testCase of invalidInputs) {\r\n            try {\r\n                const response = await googleSheetsService.calculateLomacoVents(testCase.input);\r\n\r\n                // These should all fail validation\r\n                results.push({\r\n                    input: testCase.input,\r\n                    description: testCase.description,\r\n                    shouldFail: true,\r\n                    actuallyFailed: !response.success,\r\n                    response: response\r\n                });\r\n            } catch (error) {\r\n                results.push({\r\n                    input: testCase.input,\r\n                    description: testCase.description,\r\n                    shouldFail: true,\r\n                    actuallyFailed: true,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Test error handling and recovery\r\n     */\r\n    async testErrorHandling() {\r\n        // This test verifies that the system gracefully handles various error conditions\r\n        const results = {\r\n            connectionRecovery: false,\r\n            fallbackActivation: false,\r\n            errorReporting: false\r\n        };\r\n\r\n        try {\r\n            // Test with a valid request to ensure baseline functionality\r\n            const baselineResponse = await googleSheetsService.calculateLomacoVents(2000);\r\n            results.baselineSuccess = baselineResponse.success;\r\n\r\n            // Test error reporting\r\n            const invalidResponse = await googleSheetsService.calculateLomacoVents(-1);\r\n            results.errorReporting = !invalidResponse.success && invalidResponse.message;\r\n\r\n            // Test fallback mechanism by checking if both web and math methods work\r\n            const fallbackResponse = await googleSheetsService.calculateLomacoVents(3000);\r\n            if (fallbackResponse.success) {\r\n                results.fallbackActivation = true;\r\n            }\r\n\r\n        } catch (error) {\r\n            results.testError = error.message;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Test batch processing functionality\r\n     */\r\n    async testBatchProcessing() {\r\n        // Simulate batch processing test data\r\n        const testJobCounts = [\r\n            { id: 'test1', sqft: 1500 },\r\n            { id: 'test2', sqft: 2000 },\r\n            { id: 'test3', sqft: 2500 }\r\n        ];\r\n\r\n        const results = [];\r\n\r\n        for (const jobCount of testJobCounts) {\r\n            try {\r\n                const response = await googleSheetsService.calculateLomacoVents(jobCount.sqft);\r\n\r\n                results.push({\r\n                    id: jobCount.id,\r\n                    sqft: jobCount.sqft,\r\n                    success: response.success,\r\n                    calculations: response.success ? response.ventCalculations : null,\r\n                    processingTime: response.processingTime || 'unknown'\r\n                });\r\n\r\n                // Add delay to simulate real batch processing\r\n                await this.delay(500);\r\n            } catch (error) {\r\n                results.push({\r\n                    id: jobCount.id,\r\n                    sqft: jobCount.sqft,\r\n                    success: false,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            processedCount: results.length,\r\n            successCount: results.filter(r => r.success).length,\r\n            errorCount: results.filter(r => !r.success).length,\r\n            results: results\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generate test summary\r\n     */\r\n    generateSummary() {\r\n        const total = this.testResults.length;\r\n        const passed = this.testResults.filter(r => r.status === 'passed').length;\r\n        const failed = this.testResults.filter(r => r.status === 'failed').length;\r\n\r\n        return {\r\n            total: total,\r\n            passed: passed,\r\n            failed: failed,\r\n            successRate: total > 0 ? Math.round((passed / total) * 100) : 0,\r\n            completedAt: new Date().toISOString()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Utility function for adding delays\r\n     */\r\n    delay(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    /**\r\n     * Get current test results\r\n     */\r\n    getResults() {\r\n        return {\r\n            isRunning: this.isRunning,\r\n            currentTest: this.currentTest,\r\n            results: this.testResults,\r\n            summary: this.testResults.length > 0 ? this.generateSummary() : null\r\n        };\r\n    }\r\n}\r\n\r\nexport default VentCalculationTester;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}