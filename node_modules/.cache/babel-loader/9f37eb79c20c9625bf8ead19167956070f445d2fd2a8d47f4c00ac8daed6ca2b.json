{"ast":null,"code":"import _objectSpread from\"c:/Users/PC_User/Desktop/free-crm/bhotch-crm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Google Apps Script Web App URL\nconst COMMUNICATIONS_API_URL='https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec';/**\n * Communications Service\n * Handles all communication logging operations with Google Sheets backend\n *//**\n * Log a communication (call, SMS, email)\n * @param {Object} communication - Communication data\n * @returns {Promise<Object>} - Response from the API\n */export async function logCommunication(communication){try{const response=await fetch(\"\".concat(COMMUNICATIONS_API_URL,\"?action=addCommunication\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(communication),mode:'no-cors'// Google Apps Script requires no-cors\n});// Note: With no-cors, we can't read the response body\n// We'll assume success if no error is thrown\nconsole.log('Communication logged successfully:',communication);return{success:true,data:communication};}catch(error){console.error('Error logging communication:',error);throw new Error('Failed to log communication');}}/**\n * Get all communications for a specific lead\n * @param {string} leadId - The lead ID\n * @returns {Promise<Array>} - Array of communications\n */export async function getCommunicationsForLead(leadId){try{const response=await fetch(\"\".concat(COMMUNICATIONS_API_URL,\"?action=getCommunications&leadId=\").concat(leadId),{method:'GET',mode:'no-cors'});// With no-cors, we can't read the response\n// For now, return empty array\n// TODO: Implement CORS-enabled endpoint or use Google Sheets API directly\nconsole.log('Fetching communications for lead:',leadId);return[];}catch(error){console.error('Error fetching communications:',error);return[];}}/**\n * Get recent communications (last N days)\n * @param {number} days - Number of days to look back\n * @returns {Promise<Array>} - Array of recent communications\n */export async function getRecentCommunications(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;try{const response=await fetch(\"\".concat(COMMUNICATIONS_API_URL,\"?action=getRecentCommunications&days=\").concat(days),{method:'GET',mode:'no-cors'});console.log(\"Fetching communications from last \".concat(days,\" days\"));return[];}catch(error){console.error('Error fetching recent communications:',error);return[];}}/**\n * Get communication statistics\n * @returns {Promise<Object>} - Communication statistics\n */export async function getCommunicationStats(){try{const response=await fetch(\"\".concat(COMMUNICATIONS_API_URL,\"?action=getCommunicationStats\"),{method:'GET',mode:'no-cors'});console.log('Fetching communication statistics');return{totalCalls:0,totalSMS:0,totalEmails:0,appointmentsConfirmed:0,noAnswers:0,voicemailsLeft:0};}catch(error){console.error('Error fetching communication stats:',error);return null;}}/**\n * Delete a communication\n * @param {string} communicationId - The communication ID\n * @returns {Promise<Object>} - Response from the API\n */export async function deleteCommunication(communicationId){try{const response=await fetch(\"\".concat(COMMUNICATIONS_API_URL,\"?action=deleteCommunication&id=\").concat(communicationId),{method:'DELETE',mode:'no-cors'});console.log('Communication deleted:',communicationId);return{success:true};}catch(error){console.error('Error deleting communication:',error);throw new Error('Failed to delete communication');}}/**\n * Local storage fallback for development/offline mode\n */const LOCAL_STORAGE_KEY='crm_communications';export function saveToLocalStorage(communication){try{const communications=JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)||'[]');communications.push(_objectSpread(_objectSpread({},communication),{},{id:Date.now().toString()}));localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(communications));return{success:true,data:communication};}catch(error){console.error('Error saving to local storage:',error);throw error;}}export function getFromLocalStorage(){try{return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)||'[]');}catch(error){console.error('Error reading from local storage:',error);return[];}}export function clearLocalStorage(){try{localStorage.removeItem(LOCAL_STORAGE_KEY);return{success:true};}catch(error){console.error('Error clearing local storage:',error);throw error;}}","map":{"version":3,"names":["COMMUNICATIONS_API_URL","logCommunication","communication","response","fetch","concat","method","headers","body","JSON","stringify","mode","console","log","success","data","error","Error","getCommunicationsForLead","leadId","getRecentCommunications","days","arguments","length","undefined","getCommunicationStats","totalCalls","totalSMS","totalEmails","appointmentsConfirmed","noAnswers","voicemailsLeft","deleteCommunication","communicationId","LOCAL_STORAGE_KEY","saveToLocalStorage","communications","parse","localStorage","getItem","push","_objectSpread","id","Date","now","toString","setItem","getFromLocalStorage","clearLocalStorage","removeItem"],"sources":["c:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/services/communicationsService.js"],"sourcesContent":["// Google Apps Script Web App URL\nconst COMMUNICATIONS_API_URL = 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec';\n\n/**\n * Communications Service\n * Handles all communication logging operations with Google Sheets backend\n */\n\n/**\n * Log a communication (call, SMS, email)\n * @param {Object} communication - Communication data\n * @returns {Promise<Object>} - Response from the API\n */\nexport async function logCommunication(communication) {\n  try {\n    const response = await fetch(`${COMMUNICATIONS_API_URL}?action=addCommunication`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(communication),\n      mode: 'no-cors', // Google Apps Script requires no-cors\n    });\n\n    // Note: With no-cors, we can't read the response body\n    // We'll assume success if no error is thrown\n    console.log('Communication logged successfully:', communication);\n    return { success: true, data: communication };\n  } catch (error) {\n    console.error('Error logging communication:', error);\n    throw new Error('Failed to log communication');\n  }\n}\n\n/**\n * Get all communications for a specific lead\n * @param {string} leadId - The lead ID\n * @returns {Promise<Array>} - Array of communications\n */\nexport async function getCommunicationsForLead(leadId) {\n  try {\n    const response = await fetch(`${COMMUNICATIONS_API_URL}?action=getCommunications&leadId=${leadId}`, {\n      method: 'GET',\n      mode: 'no-cors',\n    });\n\n    // With no-cors, we can't read the response\n    // For now, return empty array\n    // TODO: Implement CORS-enabled endpoint or use Google Sheets API directly\n    console.log('Fetching communications for lead:', leadId);\n    return [];\n  } catch (error) {\n    console.error('Error fetching communications:', error);\n    return [];\n  }\n}\n\n/**\n * Get recent communications (last N days)\n * @param {number} days - Number of days to look back\n * @returns {Promise<Array>} - Array of recent communications\n */\nexport async function getRecentCommunications(days = 7) {\n  try {\n    const response = await fetch(`${COMMUNICATIONS_API_URL}?action=getRecentCommunications&days=${days}`, {\n      method: 'GET',\n      mode: 'no-cors',\n    });\n\n    console.log(`Fetching communications from last ${days} days`);\n    return [];\n  } catch (error) {\n    console.error('Error fetching recent communications:', error);\n    return [];\n  }\n}\n\n/**\n * Get communication statistics\n * @returns {Promise<Object>} - Communication statistics\n */\nexport async function getCommunicationStats() {\n  try {\n    const response = await fetch(`${COMMUNICATIONS_API_URL}?action=getCommunicationStats`, {\n      method: 'GET',\n      mode: 'no-cors',\n    });\n\n    console.log('Fetching communication statistics');\n    return {\n      totalCalls: 0,\n      totalSMS: 0,\n      totalEmails: 0,\n      appointmentsConfirmed: 0,\n      noAnswers: 0,\n      voicemailsLeft: 0,\n    };\n  } catch (error) {\n    console.error('Error fetching communication stats:', error);\n    return null;\n  }\n}\n\n/**\n * Delete a communication\n * @param {string} communicationId - The communication ID\n * @returns {Promise<Object>} - Response from the API\n */\nexport async function deleteCommunication(communicationId) {\n  try {\n    const response = await fetch(`${COMMUNICATIONS_API_URL}?action=deleteCommunication&id=${communicationId}`, {\n      method: 'DELETE',\n      mode: 'no-cors',\n    });\n\n    console.log('Communication deleted:', communicationId);\n    return { success: true };\n  } catch (error) {\n    console.error('Error deleting communication:', error);\n    throw new Error('Failed to delete communication');\n  }\n}\n\n/**\n * Local storage fallback for development/offline mode\n */\nconst LOCAL_STORAGE_KEY = 'crm_communications';\n\nexport function saveToLocalStorage(communication) {\n  try {\n    const communications = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY) || '[]');\n    communications.push({\n      ...communication,\n      id: Date.now().toString(),\n    });\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(communications));\n    return { success: true, data: communication };\n  } catch (error) {\n    console.error('Error saving to local storage:', error);\n    throw error;\n  }\n}\n\nexport function getFromLocalStorage() {\n  try {\n    return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY) || '[]');\n  } catch (error) {\n    console.error('Error reading from local storage:', error);\n    return [];\n  }\n}\n\nexport function clearLocalStorage() {\n  try {\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n    return { success: true };\n  } catch (error) {\n    console.error('Error clearing local storage:', error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}