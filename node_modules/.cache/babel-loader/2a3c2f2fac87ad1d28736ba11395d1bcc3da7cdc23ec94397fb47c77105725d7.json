{"ast":null,"code":"/**\r\n * Enterprise Security Manager\r\n *\r\n * Comprehensive security framework for protecting sensitive data,\r\n * preventing attacks, and ensuring compliance with data protection regulations.\r\n */\n\nclass SecurityManager {\n  constructor() {\n    this.encryptionKey = this.generateEncryptionKey();\n    this.rateLimiter = new Map();\n    this.securityLogs = [];\n    this.bannedIPs = new Set();\n    this.sessionTokens = new Map();\n  }\n\n  /**\r\n   * Input sanitization and validation\r\n   */\n  sanitizeInput(input, type = 'text') {\n    if (typeof input !== 'string') {\n      input = String(input);\n    }\n    switch (type) {\n      case 'sqft':\n        // Validate SQFT input for calculations\n        const cleaned = input.replace(/[^\\d.]/g, '');\n        const number = parseFloat(cleaned);\n        if (isNaN(number) || number <= 0 || number > 100000) {\n          throw new Error('Invalid SQFT value: must be between 1 and 100,000');\n        }\n        return number;\n      case 'name':\n        // Sanitize customer names\n        return input.replace(/[<>\\\"'&]/g, '').trim().slice(0, 100);\n      case 'phone':\n        // Validate and format phone numbers\n        const phoneClean = input.replace(/\\D/g, '');\n        if (phoneClean.length !== 10) {\n          throw new Error('Invalid phone number: must be 10 digits');\n        }\n        return phoneClean;\n      case 'email':\n        // Email validation\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(input)) {\n          throw new Error('Invalid email format');\n        }\n        return input.toLowerCase().trim();\n      case 'address':\n        // Address sanitization\n        return input.replace(/[<>\\\"']/g, '').trim().slice(0, 500);\n      default:\n        // General text sanitization\n        return input.replace(/[<>\\\"'&]/g, '').trim();\n    }\n  }\n\n  /**\r\n   * Rate limiting protection\r\n   */\n  checkRateLimit(identifier, maxRequests = 60, windowMs = 60000) {\n    const now = Date.now();\n    const windowStart = now - windowMs;\n    if (!this.rateLimiter.has(identifier)) {\n      this.rateLimiter.set(identifier, []);\n    }\n    const requests = this.rateLimiter.get(identifier);\n\n    // Remove old requests outside the window\n    const validRequests = requests.filter(timestamp => timestamp > windowStart);\n    if (validRequests.length >= maxRequests) {\n      this.logSecurityEvent('RATE_LIMIT_EXCEEDED', {\n        identifier,\n        requests: validRequests.length\n      });\n      throw new Error('Rate limit exceeded. Please try again later.');\n    }\n    validRequests.push(now);\n    this.rateLimiter.set(identifier, validRequests);\n    return true;\n  }\n\n  /**\r\n   * Data encryption for sensitive information\r\n   */\n  encryptSensitiveData(data) {\n    try {\n      const jsonString = JSON.stringify(data);\n      const encoded = btoa(jsonString);\n      return `encrypted_${encoded}`;\n    } catch (error) {\n      this.logSecurityEvent('ENCRYPTION_FAILED', {\n        error: error.message\n      });\n      throw new Error('Failed to encrypt sensitive data');\n    }\n  }\n\n  /**\r\n   * Data decryption\r\n   */\n  decryptSensitiveData(encryptedData) {\n    try {\n      if (!encryptedData.startsWith('encrypted_')) {\n        throw new Error('Invalid encrypted data format');\n      }\n      const encoded = encryptedData.substring(10);\n      const jsonString = atob(encoded);\n      return JSON.parse(jsonString);\n    } catch (error) {\n      this.logSecurityEvent('DECRYPTION_FAILED', {\n        error: error.message\n      });\n      throw new Error('Failed to decrypt sensitive data');\n    }\n  }\n\n  /**\r\n   * Secure session management\r\n   */\n  generateSessionToken(userId) {\n    const token = this.generateRandomString(32);\n    const expiresAt = Date.now() + 24 * 60 * 60 * 1000; // 24 hours\n\n    this.sessionTokens.set(token, {\n      userId: userId,\n      createdAt: Date.now(),\n      expiresAt: expiresAt,\n      lastAccessed: Date.now()\n    });\n    this.logSecurityEvent('SESSION_CREATED', {\n      userId,\n      token: token.substring(0, 8) + '...'\n    });\n    return token;\n  }\n\n  /**\r\n   * Validate session token\r\n   */\n  validateSession(token) {\n    if (!token || !this.sessionTokens.has(token)) {\n      this.logSecurityEvent('INVALID_SESSION_TOKEN', {\n        token: (token === null || token === void 0 ? void 0 : token.substring(0, 8)) + '...'\n      });\n      return false;\n    }\n    const session = this.sessionTokens.get(token);\n    if (Date.now() > session.expiresAt) {\n      this.sessionTokens.delete(token);\n      this.logSecurityEvent('SESSION_EXPIRED', {\n        userId: session.userId\n      });\n      return false;\n    }\n\n    // Update last accessed time\n    session.lastAccessed = Date.now();\n    this.sessionTokens.set(token, session);\n    return session;\n  }\n\n  /**\r\n   * SQL injection prevention for database queries\r\n   */\n  sanitizeQueryParameters(params) {\n    const sanitized = {};\n    for (const [key, value] of Object.entries(params)) {\n      if (typeof value === 'string') {\n        // Remove potential SQL injection patterns\n        sanitized[key] = value.replace(/['\";\\\\]/g, '').replace(/--/g, '').replace(/\\/\\*/g, '').replace(/\\*\\//g, '').trim();\n      } else {\n        sanitized[key] = value;\n      }\n    }\n    return sanitized;\n  }\n\n  /**\r\n   * XSS protection for output data\r\n   */\n  escapeHtml(unsafe) {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n  }\n\n  /**\r\n   * CSRF token generation and validation\r\n   */\n  generateCSRFToken() {\n    return this.generateRandomString(32);\n  }\n\n  /**\r\n   * Content Security Policy headers\r\n   */\n  getCSPHeaders() {\n    return {\n      'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' https://apis.google.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://script.google.com https://sheets.googleapis.com;\",\n      'X-Frame-Options': 'DENY',\n      'X-Content-Type-Options': 'nosniff',\n      'X-XSS-Protection': '1; mode=block',\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n      'Referrer-Policy': 'strict-origin-when-cross-origin'\n    };\n  }\n\n  /**\r\n   * Audit logging for security events\r\n   */\n  logSecurityEvent(eventType, details = {}) {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      eventType: eventType,\n      details: details,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n      ip: this.getClientIP(),\n      sessionId: this.getCurrentSessionId()\n    };\n    this.securityLogs.push(logEntry);\n\n    // Keep only last 1000 log entries to prevent memory issues\n    if (this.securityLogs.length > 1000) {\n      this.securityLogs = this.securityLogs.slice(-1000);\n    }\n\n    // Send critical events to monitoring system\n    if (this.isCriticalEvent(eventType)) {\n      this.sendSecurityAlert(logEntry);\n    }\n  }\n\n  /**\r\n   * Data masking for sensitive information in logs\r\n   */\n  maskSensitiveData(data) {\n    const masked = {\n      ...data\n    };\n\n    // Mask common sensitive fields\n    if (masked.phoneNumber) {\n      masked.phoneNumber = `***-***-${masked.phoneNumber.slice(-4)}`;\n    }\n    if (masked.email) {\n      const [username, domain] = masked.email.split('@');\n      masked.email = `${username.substring(0, 2)}***@${domain}`;\n    }\n    if (masked.address) {\n      masked.address = masked.address.substring(0, 10) + '***';\n    }\n    return masked;\n  }\n\n  /**\r\n   * Vulnerability scanning for input data\r\n   */\n  scanForVulnerabilities(input) {\n    const vulnerabilityPatterns = [\n    // SQL Injection patterns\n    /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,\n    // XSS patterns\n    /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n    // Command injection patterns\n    /(\\b(eval|exec|system|shell_exec|passthru|cmd)\\b)/i,\n    // Path traversal patterns\n    /(\\.\\.\\/|\\.\\.\\\\)/g,\n    // LDAP injection patterns\n    /(\\*|\\(|\\)|\\||\\&)/g];\n    for (const pattern of vulnerabilityPatterns) {\n      if (pattern.test(input)) {\n        this.logSecurityEvent('VULNERABILITY_DETECTED', {\n          pattern: pattern.toString(),\n          input: input.substring(0, 100) + '...'\n        });\n        throw new Error('Potentially malicious input detected');\n      }\n    }\n    return true;\n  }\n\n  /**\r\n   * Access control validation\r\n   */\n  validatePermissions(userId, resource, action) {\n    // Define permission matrix\n    const permissions = {\n      'job_counts': ['read', 'write', 'delete'],\n      'calculations': ['read', 'execute'],\n      'system_monitoring': ['read'],\n      'batch_processing': ['execute']\n    };\n    if (!permissions[resource] || !permissions[resource].includes(action)) {\n      this.logSecurityEvent('ACCESS_DENIED', {\n        userId,\n        resource,\n        action\n      });\n      throw new Error('Access denied: insufficient permissions');\n    }\n    return true;\n  }\n\n  /**\r\n   * Data backup encryption\r\n   */\n  encryptBackupData(data) {\n    const timestamp = Date.now();\n    const checksum = this.calculateChecksum(JSON.stringify(data));\n    const backupPackage = {\n      data: data,\n      timestamp: timestamp,\n      checksum: checksum,\n      version: '1.0'\n    };\n    return this.encryptSensitiveData(backupPackage);\n  }\n\n  /**\r\n   * Secure data export with watermarking\r\n   */\n  createSecureExport(data, userId) {\n    const exportData = {\n      ...data,\n      exportMetadata: {\n        exportedBy: userId,\n        exportedAt: new Date().toISOString(),\n        exportId: this.generateRandomString(16),\n        watermark: `CONFIDENTIAL - Exported by User ${userId}`\n      }\n    };\n    this.logSecurityEvent('DATA_EXPORTED', {\n      userId,\n      recordCount: data.length\n    });\n    return exportData;\n  }\n\n  /**\r\n   * Utility functions\r\n   */\n  generateRandomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  generateEncryptionKey() {\n    return this.generateRandomString(32);\n  }\n  calculateChecksum(data) {\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(16);\n  }\n  getClientIP() {\n    // This would typically be handled server-side\n    return 'client-ip-masked';\n  }\n  getCurrentSessionId() {\n    return sessionStorage.getItem('sessionId') || 'anonymous';\n  }\n  isCriticalEvent(eventType) {\n    const criticalEvents = ['RATE_LIMIT_EXCEEDED', 'VULNERABILITY_DETECTED', 'ACCESS_DENIED', 'ENCRYPTION_FAILED', 'SESSION_HIJACK_ATTEMPT'];\n    return criticalEvents.includes(eventType);\n  }\n  sendSecurityAlert(logEntry) {\n    // In a real implementation, this would send alerts to administrators\n    console.warn('SECURITY ALERT:', logEntry);\n  }\n\n  /**\r\n   * Get security report\r\n   */\n  getSecurityReport() {\n    const now = Date.now();\n    const last24Hours = now - 24 * 60 * 60 * 1000;\n    const recentLogs = this.securityLogs.filter(log => new Date(log.timestamp).getTime() > last24Hours);\n    const eventCounts = recentLogs.reduce((counts, log) => {\n      counts[log.eventType] = (counts[log.eventType] || 0) + 1;\n      return counts;\n    }, {});\n    return {\n      totalEvents: recentLogs.length,\n      eventBreakdown: eventCounts,\n      criticalEvents: recentLogs.filter(log => this.isCriticalEvent(log.eventType)),\n      activeSessions: this.sessionTokens.size,\n      generatedAt: new Date().toISOString()\n    };\n  }\n}\nexport default SecurityManager;","map":{"version":3,"names":["SecurityManager","constructor","encryptionKey","generateEncryptionKey","rateLimiter","Map","securityLogs","bannedIPs","Set","sessionTokens","sanitizeInput","input","type","String","cleaned","replace","number","parseFloat","isNaN","Error","trim","slice","phoneClean","length","emailRegex","test","toLowerCase","checkRateLimit","identifier","maxRequests","windowMs","now","Date","windowStart","has","set","requests","get","validRequests","filter","timestamp","logSecurityEvent","push","encryptSensitiveData","data","jsonString","JSON","stringify","encoded","btoa","error","message","decryptSensitiveData","encryptedData","startsWith","substring","atob","parse","generateSessionToken","userId","token","generateRandomString","expiresAt","createdAt","lastAccessed","validateSession","session","delete","sanitizeQueryParameters","params","sanitized","key","value","Object","entries","escapeHtml","unsafe","generateCSRFToken","getCSPHeaders","eventType","details","logEntry","toISOString","userAgent","navigator","ip","getClientIP","sessionId","getCurrentSessionId","isCriticalEvent","sendSecurityAlert","maskSensitiveData","masked","phoneNumber","email","username","domain","split","address","scanForVulnerabilities","vulnerabilityPatterns","pattern","toString","validatePermissions","resource","action","permissions","includes","encryptBackupData","checksum","calculateChecksum","backupPackage","version","createSecureExport","exportData","exportMetadata","exportedBy","exportedAt","exportId","watermark","recordCount","chars","result","i","charAt","Math","floor","random","hash","char","charCodeAt","sessionStorage","getItem","criticalEvents","console","warn","getSecurityReport","last24Hours","recentLogs","log","getTime","eventCounts","reduce","counts","totalEvents","eventBreakdown","activeSessions","size","generatedAt"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/securityManager.js"],"sourcesContent":["/**\r\n * Enterprise Security Manager\r\n *\r\n * Comprehensive security framework for protecting sensitive data,\r\n * preventing attacks, and ensuring compliance with data protection regulations.\r\n */\r\n\r\nclass SecurityManager {\r\n    constructor() {\r\n        this.encryptionKey = this.generateEncryptionKey();\r\n        this.rateLimiter = new Map();\r\n        this.securityLogs = [];\r\n        this.bannedIPs = new Set();\r\n        this.sessionTokens = new Map();\r\n    }\r\n\r\n    /**\r\n     * Input sanitization and validation\r\n     */\r\n    sanitizeInput(input, type = 'text') {\r\n        if (typeof input !== 'string') {\r\n            input = String(input);\r\n        }\r\n\r\n        switch (type) {\r\n            case 'sqft':\r\n                // Validate SQFT input for calculations\r\n                const cleaned = input.replace(/[^\\d.]/g, '');\r\n                const number = parseFloat(cleaned);\r\n                if (isNaN(number) || number <= 0 || number > 100000) {\r\n                    throw new Error('Invalid SQFT value: must be between 1 and 100,000');\r\n                }\r\n                return number;\r\n\r\n            case 'name':\r\n                // Sanitize customer names\r\n                return input.replace(/[<>\\\"'&]/g, '').trim().slice(0, 100);\r\n\r\n            case 'phone':\r\n                // Validate and format phone numbers\r\n                const phoneClean = input.replace(/\\D/g, '');\r\n                if (phoneClean.length !== 10) {\r\n                    throw new Error('Invalid phone number: must be 10 digits');\r\n                }\r\n                return phoneClean;\r\n\r\n            case 'email':\r\n                // Email validation\r\n                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n                if (!emailRegex.test(input)) {\r\n                    throw new Error('Invalid email format');\r\n                }\r\n                return input.toLowerCase().trim();\r\n\r\n            case 'address':\r\n                // Address sanitization\r\n                return input.replace(/[<>\\\"']/g, '').trim().slice(0, 500);\r\n\r\n            default:\r\n                // General text sanitization\r\n                return input.replace(/[<>\\\"'&]/g, '').trim();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rate limiting protection\r\n     */\r\n    checkRateLimit(identifier, maxRequests = 60, windowMs = 60000) {\r\n        const now = Date.now();\r\n        const windowStart = now - windowMs;\r\n\r\n        if (!this.rateLimiter.has(identifier)) {\r\n            this.rateLimiter.set(identifier, []);\r\n        }\r\n\r\n        const requests = this.rateLimiter.get(identifier);\r\n\r\n        // Remove old requests outside the window\r\n        const validRequests = requests.filter(timestamp => timestamp > windowStart);\r\n\r\n        if (validRequests.length >= maxRequests) {\r\n            this.logSecurityEvent('RATE_LIMIT_EXCEEDED', { identifier, requests: validRequests.length });\r\n            throw new Error('Rate limit exceeded. Please try again later.');\r\n        }\r\n\r\n        validRequests.push(now);\r\n        this.rateLimiter.set(identifier, validRequests);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Data encryption for sensitive information\r\n     */\r\n    encryptSensitiveData(data) {\r\n        try {\r\n            const jsonString = JSON.stringify(data);\r\n            const encoded = btoa(jsonString);\r\n            return `encrypted_${encoded}`;\r\n        } catch (error) {\r\n            this.logSecurityEvent('ENCRYPTION_FAILED', { error: error.message });\r\n            throw new Error('Failed to encrypt sensitive data');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data decryption\r\n     */\r\n    decryptSensitiveData(encryptedData) {\r\n        try {\r\n            if (!encryptedData.startsWith('encrypted_')) {\r\n                throw new Error('Invalid encrypted data format');\r\n            }\r\n\r\n            const encoded = encryptedData.substring(10);\r\n            const jsonString = atob(encoded);\r\n            return JSON.parse(jsonString);\r\n        } catch (error) {\r\n            this.logSecurityEvent('DECRYPTION_FAILED', { error: error.message });\r\n            throw new Error('Failed to decrypt sensitive data');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Secure session management\r\n     */\r\n    generateSessionToken(userId) {\r\n        const token = this.generateRandomString(32);\r\n        const expiresAt = Date.now() + (24 * 60 * 60 * 1000); // 24 hours\r\n\r\n        this.sessionTokens.set(token, {\r\n            userId: userId,\r\n            createdAt: Date.now(),\r\n            expiresAt: expiresAt,\r\n            lastAccessed: Date.now()\r\n        });\r\n\r\n        this.logSecurityEvent('SESSION_CREATED', { userId, token: token.substring(0, 8) + '...' });\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Validate session token\r\n     */\r\n    validateSession(token) {\r\n        if (!token || !this.sessionTokens.has(token)) {\r\n            this.logSecurityEvent('INVALID_SESSION_TOKEN', { token: token?.substring(0, 8) + '...' });\r\n            return false;\r\n        }\r\n\r\n        const session = this.sessionTokens.get(token);\r\n\r\n        if (Date.now() > session.expiresAt) {\r\n            this.sessionTokens.delete(token);\r\n            this.logSecurityEvent('SESSION_EXPIRED', { userId: session.userId });\r\n            return false;\r\n        }\r\n\r\n        // Update last accessed time\r\n        session.lastAccessed = Date.now();\r\n        this.sessionTokens.set(token, session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * SQL injection prevention for database queries\r\n     */\r\n    sanitizeQueryParameters(params) {\r\n        const sanitized = {};\r\n\r\n        for (const [key, value] of Object.entries(params)) {\r\n            if (typeof value === 'string') {\r\n                // Remove potential SQL injection patterns\r\n                sanitized[key] = value\r\n                    .replace(/['\";\\\\]/g, '')\r\n                    .replace(/--/g, '')\r\n                    .replace(/\\/\\*/g, '')\r\n                    .replace(/\\*\\//g, '')\r\n                    .trim();\r\n            } else {\r\n                sanitized[key] = value;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    /**\r\n     * XSS protection for output data\r\n     */\r\n    escapeHtml(unsafe) {\r\n        return unsafe\r\n            .replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&#039;\");\r\n    }\r\n\r\n    /**\r\n     * CSRF token generation and validation\r\n     */\r\n    generateCSRFToken() {\r\n        return this.generateRandomString(32);\r\n    }\r\n\r\n    /**\r\n     * Content Security Policy headers\r\n     */\r\n    getCSPHeaders() {\r\n        return {\r\n            'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline' https://apis.google.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://script.google.com https://sheets.googleapis.com;\",\r\n            'X-Frame-Options': 'DENY',\r\n            'X-Content-Type-Options': 'nosniff',\r\n            'X-XSS-Protection': '1; mode=block',\r\n            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\r\n            'Referrer-Policy': 'strict-origin-when-cross-origin'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Audit logging for security events\r\n     */\r\n    logSecurityEvent(eventType, details = {}) {\r\n        const logEntry = {\r\n            timestamp: new Date().toISOString(),\r\n            eventType: eventType,\r\n            details: details,\r\n            userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\r\n            ip: this.getClientIP(),\r\n            sessionId: this.getCurrentSessionId()\r\n        };\r\n\r\n        this.securityLogs.push(logEntry);\r\n\r\n        // Keep only last 1000 log entries to prevent memory issues\r\n        if (this.securityLogs.length > 1000) {\r\n            this.securityLogs = this.securityLogs.slice(-1000);\r\n        }\r\n\r\n        // Send critical events to monitoring system\r\n        if (this.isCriticalEvent(eventType)) {\r\n            this.sendSecurityAlert(logEntry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Data masking for sensitive information in logs\r\n     */\r\n    maskSensitiveData(data) {\r\n        const masked = { ...data };\r\n\r\n        // Mask common sensitive fields\r\n        if (masked.phoneNumber) {\r\n            masked.phoneNumber = `***-***-${masked.phoneNumber.slice(-4)}`;\r\n        }\r\n        if (masked.email) {\r\n            const [username, domain] = masked.email.split('@');\r\n            masked.email = `${username.substring(0, 2)}***@${domain}`;\r\n        }\r\n        if (masked.address) {\r\n            masked.address = masked.address.substring(0, 10) + '***';\r\n        }\r\n\r\n        return masked;\r\n    }\r\n\r\n    /**\r\n     * Vulnerability scanning for input data\r\n     */\r\n    scanForVulnerabilities(input) {\r\n        const vulnerabilityPatterns = [\r\n            // SQL Injection patterns\r\n            /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/i,\r\n            // XSS patterns\r\n            /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            // Command injection patterns\r\n            /(\\b(eval|exec|system|shell_exec|passthru|cmd)\\b)/i,\r\n            // Path traversal patterns\r\n            /(\\.\\.\\/|\\.\\.\\\\)/g,\r\n            // LDAP injection patterns\r\n            /(\\*|\\(|\\)|\\||\\&)/g\r\n        ];\r\n\r\n        for (const pattern of vulnerabilityPatterns) {\r\n            if (pattern.test(input)) {\r\n                this.logSecurityEvent('VULNERABILITY_DETECTED', {\r\n                    pattern: pattern.toString(),\r\n                    input: input.substring(0, 100) + '...'\r\n                });\r\n                throw new Error('Potentially malicious input detected');\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Access control validation\r\n     */\r\n    validatePermissions(userId, resource, action) {\r\n        // Define permission matrix\r\n        const permissions = {\r\n            'job_counts': ['read', 'write', 'delete'],\r\n            'calculations': ['read', 'execute'],\r\n            'system_monitoring': ['read'],\r\n            'batch_processing': ['execute']\r\n        };\r\n\r\n        if (!permissions[resource] || !permissions[resource].includes(action)) {\r\n            this.logSecurityEvent('ACCESS_DENIED', { userId, resource, action });\r\n            throw new Error('Access denied: insufficient permissions');\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Data backup encryption\r\n     */\r\n    encryptBackupData(data) {\r\n        const timestamp = Date.now();\r\n        const checksum = this.calculateChecksum(JSON.stringify(data));\r\n\r\n        const backupPackage = {\r\n            data: data,\r\n            timestamp: timestamp,\r\n            checksum: checksum,\r\n            version: '1.0'\r\n        };\r\n\r\n        return this.encryptSensitiveData(backupPackage);\r\n    }\r\n\r\n    /**\r\n     * Secure data export with watermarking\r\n     */\r\n    createSecureExport(data, userId) {\r\n        const exportData = {\r\n            ...data,\r\n            exportMetadata: {\r\n                exportedBy: userId,\r\n                exportedAt: new Date().toISOString(),\r\n                exportId: this.generateRandomString(16),\r\n                watermark: `CONFIDENTIAL - Exported by User ${userId}`\r\n            }\r\n        };\r\n\r\n        this.logSecurityEvent('DATA_EXPORTED', { userId, recordCount: data.length });\r\n        return exportData;\r\n    }\r\n\r\n    /**\r\n     * Utility functions\r\n     */\r\n    generateRandomString(length) {\r\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        let result = '';\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    generateEncryptionKey() {\r\n        return this.generateRandomString(32);\r\n    }\r\n\r\n    calculateChecksum(data) {\r\n        let hash = 0;\r\n        for (let i = 0; i < data.length; i++) {\r\n            const char = data.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32-bit integer\r\n        }\r\n        return hash.toString(16);\r\n    }\r\n\r\n    getClientIP() {\r\n        // This would typically be handled server-side\r\n        return 'client-ip-masked';\r\n    }\r\n\r\n    getCurrentSessionId() {\r\n        return sessionStorage.getItem('sessionId') || 'anonymous';\r\n    }\r\n\r\n    isCriticalEvent(eventType) {\r\n        const criticalEvents = [\r\n            'RATE_LIMIT_EXCEEDED',\r\n            'VULNERABILITY_DETECTED',\r\n            'ACCESS_DENIED',\r\n            'ENCRYPTION_FAILED',\r\n            'SESSION_HIJACK_ATTEMPT'\r\n        ];\r\n        return criticalEvents.includes(eventType);\r\n    }\r\n\r\n    sendSecurityAlert(logEntry) {\r\n        // In a real implementation, this would send alerts to administrators\r\n        console.warn('SECURITY ALERT:', logEntry);\r\n    }\r\n\r\n    /**\r\n     * Get security report\r\n     */\r\n    getSecurityReport() {\r\n        const now = Date.now();\r\n        const last24Hours = now - (24 * 60 * 60 * 1000);\r\n\r\n        const recentLogs = this.securityLogs.filter(log =>\r\n            new Date(log.timestamp).getTime() > last24Hours\r\n        );\r\n\r\n        const eventCounts = recentLogs.reduce((counts, log) => {\r\n            counts[log.eventType] = (counts[log.eventType] || 0) + 1;\r\n            return counts;\r\n        }, {});\r\n\r\n        return {\r\n            totalEvents: recentLogs.length,\r\n            eventBreakdown: eventCounts,\r\n            criticalEvents: recentLogs.filter(log => this.isCriticalEvent(log.eventType)),\r\n            activeSessions: this.sessionTokens.size,\r\n            generatedAt: new Date().toISOString()\r\n        };\r\n    }\r\n}\r\n\r\nexport default SecurityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}