{"ast":null,"code":"/**\r\n * Advanced Real-time Notification & Alert System\r\n *\r\n * Enterprise-grade notification management with multi-channel delivery,\r\n * smart filtering, priority queuing, and persistent storage.\r\n */\n\nclass NotificationSystem {\n  constructor() {\n    this.notifications = new Map();\n    this.subscribers = new Set();\n    this.alertRules = new Map();\n    this.notificationHistory = [];\n    this.channels = {\n      ui: true,\n      email: false,\n      sms: false,\n      webhook: false\n    };\n    this.priorities = {\n      critical: 1,\n      high: 2,\n      medium: 3,\n      low: 4,\n      info: 5\n    };\n    this.maxNotifications = 100;\n    this.maxHistorySize = 1000;\n    this.autoCleanupInterval = 300000; // 5 minutes\n\n    this.initializeSystem();\n  }\n\n  /**\r\n   * Initialize notification system\r\n   */\n  initializeSystem() {\n    // Load persisted notifications\n    this.loadNotificationsFromStorage();\n\n    // Set up auto-cleanup\n    setInterval(() => {\n      this.cleanupExpiredNotifications();\n    }, this.autoCleanupInterval);\n\n    // Set up performance monitoring\n    this.setupPerformanceMonitoring();\n\n    // Initialize alert rules\n    this.setupDefaultAlertRules();\n  }\n\n  /**\r\n   * Create and dispatch notification\r\n   */\n  createNotification(options) {\n    const notification = {\n      id: this.generateNotificationId(),\n      title: options.title || 'Notification',\n      message: options.message || '',\n      type: options.type || 'info',\n      // success, error, warning, info, critical\n      priority: options.priority || 'medium',\n      source: options.source || 'system',\n      timestamp: new Date().toISOString(),\n      read: false,\n      persistent: options.persistent || false,\n      expiresAt: options.expiresAt || this.calculateExpiration(options.type),\n      actions: options.actions || [],\n      metadata: options.metadata || {},\n      channels: options.channels || ['ui'],\n      retryCount: 0,\n      maxRetries: options.maxRetries || 3\n    };\n\n    // Apply alert rules\n    this.applyAlertRules(notification);\n\n    // Store notification\n    this.notifications.set(notification.id, notification);\n\n    // Add to history\n    this.addToHistory(notification);\n\n    // Dispatch to channels\n    this.dispatchToChannels(notification);\n\n    // Notify subscribers\n    this.notifySubscribers('notification_created', notification);\n\n    // Persist to storage\n    this.saveNotificationsToStorage();\n    return notification;\n  }\n\n  /**\r\n   * System monitoring notifications\r\n   */\n  createSystemAlert(alertType, data) {\n    const alertConfigs = {\n      automation_failure: {\n        title: 'Automation System Failure',\n        type: 'critical',\n        priority: 'critical',\n        persistent: true,\n        channels: ['ui', 'email'],\n        actions: [{\n          label: 'Run Diagnostics',\n          action: 'run_diagnostics'\n        }, {\n          label: 'Switch to Manual',\n          action: 'enable_manual_mode'\n        }]\n      },\n      calculation_error: {\n        title: 'Calculation Error Detected',\n        type: 'error',\n        priority: 'high',\n        channels: ['ui'],\n        actions: [{\n          label: 'Retry Calculation',\n          action: 'retry_calculation'\n        }, {\n          label: 'Use Fallback',\n          action: 'use_fallback'\n        }]\n      },\n      performance_degradation: {\n        title: 'Performance Degradation Alert',\n        type: 'warning',\n        priority: 'medium',\n        channels: ['ui'],\n        actions: [{\n          label: 'View Metrics',\n          action: 'view_performance'\n        }, {\n          label: 'Optimize System',\n          action: 'optimize_system'\n        }]\n      },\n      batch_complete: {\n        title: 'Batch Processing Complete',\n        type: 'success',\n        priority: 'low',\n        channels: ['ui'],\n        actions: [{\n          label: 'View Results',\n          action: 'view_batch_results'\n        }]\n      },\n      security_alert: {\n        title: 'Security Alert',\n        type: 'critical',\n        priority: 'critical',\n        persistent: true,\n        channels: ['ui', 'email'],\n        actions: [{\n          label: 'Review Logs',\n          action: 'review_security_logs'\n        }, {\n          label: 'Block IP',\n          action: 'block_suspicious_ip'\n        }]\n      }\n    };\n    const config = alertConfigs[alertType] || alertConfigs.automation_failure;\n    return this.createNotification({\n      ...config,\n      message: this.generateAlertMessage(alertType, data),\n      source: 'system_monitor',\n      metadata: {\n        alertType: alertType,\n        alertData: data,\n        systemState: this.getSystemState()\n      }\n    });\n  }\n\n  /**\r\n   * Business logic notifications\r\n   */\n  createBusinessAlert(eventType, data) {\n    const businessConfigs = {\n      new_lead: {\n        title: 'New Lead Created',\n        type: 'info',\n        priority: 'medium',\n        message: `New lead: ${data.customerName || 'Unknown'}`\n      },\n      quote_generated: {\n        title: 'Quote Generated',\n        type: 'success',\n        priority: 'medium',\n        message: `Quote of $${data.amount} generated for ${data.customerName}`\n      },\n      calculation_completed: {\n        title: 'Vent Calculation Completed',\n        type: 'success',\n        priority: 'low',\n        message: `Calculation completed for ${data.sqft} sq ft via ${data.method}`\n      },\n      high_value_quote: {\n        title: 'High Value Quote Alert',\n        type: 'warning',\n        priority: 'high',\n        message: `High value quote: $${data.amount} for ${data.customerName}`,\n        persistent: true,\n        actions: [{\n          label: 'Review Quote',\n          action: 'review_quote'\n        }, {\n          label: 'Contact Customer',\n          action: 'contact_customer'\n        }]\n      }\n    };\n    const config = businessConfigs[eventType] || businessConfigs.new_lead;\n    return this.createNotification({\n      ...config,\n      source: 'business_logic',\n      metadata: {\n        eventType: eventType,\n        eventData: data\n      }\n    });\n  }\n\n  /**\r\n   * Real-time progress notifications\r\n   */\n  createProgressNotification(processId, progress) {\n    const existingNotification = Array.from(this.notifications.values()).find(n => n.metadata.processId === processId);\n    if (existingNotification) {\n      // Update existing progress notification\n      existingNotification.message = `${progress.current}/${progress.total} - ${progress.status}`;\n      existingNotification.metadata.progress = progress;\n      existingNotification.timestamp = new Date().toISOString();\n      this.notifySubscribers('notification_updated', existingNotification);\n    } else {\n      // Create new progress notification\n      return this.createNotification({\n        title: progress.title || 'Processing...',\n        message: `${progress.current}/${progress.total} - ${progress.status}`,\n        type: 'info',\n        priority: 'low',\n        source: 'progress_tracker',\n        persistent: false,\n        metadata: {\n          processId: processId,\n          progress: progress\n        }\n      });\n    }\n  }\n\n  /**\r\n   * Smart notification filtering\r\n   */\n  applyAlertRules(notification) {\n    for (const [ruleId, rule] of this.alertRules) {\n      if (this.matchesRule(notification, rule)) {\n        // Apply rule modifications\n        if (rule.escalate) {\n          notification.priority = 'critical';\n          notification.persistent = true;\n        }\n        if (rule.suppress) {\n          notification.channels = [];\n        }\n        if (rule.addChannels) {\n          notification.channels = [...notification.channels, ...rule.addChannels];\n        }\n        if (rule.customMessage) {\n          notification.message = rule.customMessage(notification);\n        }\n      }\n    }\n  }\n\n  /**\r\n   * Multi-channel notification dispatch\r\n   */\n  async dispatchToChannels(notification) {\n    const promises = notification.channels.map(channel => {\n      switch (channel) {\n        case 'ui':\n          return this.sendUINotification(notification);\n        case 'email':\n          return this.sendEmailNotification(notification);\n        case 'sms':\n          return this.sendSMSNotification(notification);\n        case 'webhook':\n          return this.sendWebhookNotification(notification);\n        case 'browser':\n          return this.sendBrowserNotification(notification);\n        default:\n          return Promise.resolve();\n      }\n    });\n    try {\n      await Promise.allSettled(promises);\n    } catch (error) {\n      console.error('Error dispatching notification:', error);\n      this.handleDeliveryFailure(notification, error);\n    }\n  }\n\n  /**\r\n   * UI notification delivery\r\n   */\n  sendUINotification(notification) {\n    // Add visual indicators based on priority\n    const uiNotification = {\n      ...notification,\n      className: this.getUIClassName(notification),\n      icon: this.getNotificationIcon(notification.type),\n      autoHide: !notification.persistent,\n      hideDelay: this.getHideDelay(notification.priority)\n    };\n    this.notifySubscribers('ui_notification', uiNotification);\n    return Promise.resolve();\n  }\n\n  /**\r\n   * Browser push notification\r\n   */\n  async sendBrowserNotification(notification) {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const browserNotification = new Notification(notification.title, {\n        body: notification.message,\n        icon: '/favicon.ico',\n        tag: notification.id,\n        requireInteraction: notification.persistent,\n        actions: notification.actions.slice(0, 2) // Browser supports max 2 actions\n      });\n      browserNotification.onclick = () => {\n        window.focus();\n        this.markAsRead(notification.id);\n      };\n      return Promise.resolve();\n    }\n    return Promise.reject('Browser notifications not supported or permission denied');\n  }\n\n  /**\r\n   * Email notification (placeholder for actual implementation)\r\n   */\n  async sendEmailNotification(notification) {\n    // In a real implementation, this would integrate with an email service\n    console.log('Email notification would be sent:', notification);\n    return Promise.resolve();\n  }\n\n  /**\r\n   * SMS notification (placeholder for actual implementation)\r\n   */\n  async sendSMSNotification(notification) {\n    // In a real implementation, this would integrate with an SMS service\n    console.log('SMS notification would be sent:', notification);\n    return Promise.resolve();\n  }\n\n  /**\r\n   * Webhook notification (placeholder for actual implementation)\r\n   */\n  async sendWebhookNotification(notification) {\n    // In a real implementation, this would send HTTP POST to configured webhooks\n    console.log('Webhook notification would be sent:', notification);\n    return Promise.resolve();\n  }\n\n  /**\r\n   * Notification management\r\n   */\n  getNotifications(filters = {}) {\n    let notifications = Array.from(this.notifications.values());\n\n    // Apply filters\n    if (filters.unreadOnly) {\n      notifications = notifications.filter(n => !n.read);\n    }\n    if (filters.type) {\n      notifications = notifications.filter(n => n.type === filters.type);\n    }\n    if (filters.priority) {\n      notifications = notifications.filter(n => n.priority === filters.priority);\n    }\n    if (filters.source) {\n      notifications = notifications.filter(n => n.source === filters.source);\n    }\n\n    // Sort by priority and timestamp\n    notifications.sort((a, b) => {\n      const priorityDiff = this.priorities[a.priority] - this.priorities[b.priority];\n      if (priorityDiff !== 0) return priorityDiff;\n      return new Date(b.timestamp) - new Date(a.timestamp);\n    });\n    return notifications;\n  }\n\n  /**\r\n   * Mark notification as read\r\n   */\n  markAsRead(notificationId) {\n    const notification = this.notifications.get(notificationId);\n    if (notification) {\n      notification.read = true;\n      notification.readAt = new Date().toISOString();\n      this.notifySubscribers('notification_read', notification);\n      this.saveNotificationsToStorage();\n    }\n  }\n\n  /**\r\n   * Mark all notifications as read\r\n   */\n  markAllAsRead(filters = {}) {\n    const notifications = this.getNotifications(filters);\n    notifications.forEach(notification => {\n      this.markAsRead(notification.id);\n    });\n  }\n\n  /**\r\n   * Dismiss notification\r\n   */\n  dismissNotification(notificationId) {\n    const notification = this.notifications.get(notificationId);\n    if (notification && !notification.persistent) {\n      this.notifications.delete(notificationId);\n      this.notifySubscribers('notification_dismissed', notification);\n      this.saveNotificationsToStorage();\n    }\n  }\n\n  /**\r\n   * Clear all notifications\r\n   */\n  clearAllNotifications(includePersistent = false) {\n    if (includePersistent) {\n      this.notifications.clear();\n    } else {\n      for (const [id, notification] of this.notifications) {\n        if (!notification.persistent) {\n          this.notifications.delete(id);\n        }\n      }\n    }\n    this.notifySubscribers('notifications_cleared');\n    this.saveNotificationsToStorage();\n  }\n\n  /**\r\n   * Subscription management\r\n   */\n  subscribe(callback) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n  notifySubscribers(event, data) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('Error in notification subscriber:', error);\n      }\n    });\n  }\n\n  /**\r\n   * Alert rules management\r\n   */\n  setupDefaultAlertRules() {\n    // High frequency error suppression\n    this.addAlertRule('suppress_duplicate_errors', {\n      conditions: {\n        type: 'error',\n        frequency: {\n          count: 5,\n          window: 300000\n        } // 5 errors in 5 minutes\n      },\n      action: {\n        suppress: true\n      }\n    });\n\n    // Critical error escalation\n    this.addAlertRule('escalate_critical', {\n      conditions: {\n        type: 'critical'\n      },\n      action: {\n        escalate: true,\n        addChannels: ['email', 'browser']\n      }\n    });\n\n    // Business hours filtering\n    this.addAlertRule('business_hours_only', {\n      conditions: {\n        priority: 'low',\n        timeFilter: {\n          startHour: 9,\n          endHour: 17\n        }\n      },\n      action: {\n        suppress: notification => !this.isBusinessHours(),\n        customMessage: notification => `${notification.message} (Business hours only)`\n      }\n    });\n  }\n  addAlertRule(ruleId, rule) {\n    this.alertRules.set(ruleId, rule);\n  }\n  removeAlertRule(ruleId) {\n    this.alertRules.delete(ruleId);\n  }\n\n  /**\r\n   * Utility functions\r\n   */\n  generateNotificationId() {\n    return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  calculateExpiration(type) {\n    const expirationTimes = {\n      critical: null,\n      // Never expires\n      error: 24 * 60 * 60 * 1000,\n      // 24 hours\n      warning: 12 * 60 * 60 * 1000,\n      // 12 hours\n      success: 6 * 60 * 60 * 1000,\n      // 6 hours\n      info: 3 * 60 * 60 * 1000 // 3 hours\n    };\n    const expiration = expirationTimes[type] || expirationTimes.info;\n    return expiration ? new Date(Date.now() + expiration).toISOString() : null;\n  }\n  getUIClassName(notification) {\n    const baseClass = 'notification';\n    const typeClass = `notification-${notification.type}`;\n    const priorityClass = `notification-priority-${notification.priority}`;\n    return `${baseClass} ${typeClass} ${priorityClass}`;\n  }\n  getNotificationIcon(type) {\n    const icons = {\n      success: '✅',\n      error: '❌',\n      warning: '⚠️',\n      info: 'ℹ️',\n      critical: '🚨'\n    };\n    return icons[type] || icons.info;\n  }\n  getHideDelay(priority) {\n    const delays = {\n      critical: 0,\n      // Don't auto-hide\n      high: 10000,\n      // 10 seconds\n      medium: 7000,\n      // 7 seconds\n      low: 5000,\n      // 5 seconds\n      info: 3000 // 3 seconds\n    };\n    return delays[priority] || delays.info;\n  }\n  matchesRule(notification, rule) {\n    const conditions = rule.conditions;\n\n    // Check basic conditions\n    if (conditions.type && notification.type !== conditions.type) return false;\n    if (conditions.priority && notification.priority !== conditions.priority) return false;\n    if (conditions.source && notification.source !== conditions.source) return false;\n\n    // Check frequency conditions\n    if (conditions.frequency) {\n      const recentNotifications = this.getRecentNotifications(conditions.frequency.window, {\n        type: notification.type,\n        message: notification.message\n      });\n      if (recentNotifications.length < conditions.frequency.count) return false;\n    }\n\n    // Check time filters\n    if (conditions.timeFilter) {\n      const now = new Date();\n      const hour = now.getHours();\n      if (hour < conditions.timeFilter.startHour || hour > conditions.timeFilter.endHour) {\n        return false;\n      }\n    }\n    return true;\n  }\n  getRecentNotifications(windowMs, filters = {}) {\n    const cutoff = Date.now() - windowMs;\n    return this.notificationHistory.filter(notification => {\n      const notificationTime = new Date(notification.timestamp).getTime();\n      if (notificationTime < cutoff) return false;\n      if (filters.type && notification.type !== filters.type) return false;\n      if (filters.message && notification.message !== filters.message) return false;\n      return true;\n    });\n  }\n  isBusinessHours() {\n    const now = new Date();\n    const hour = now.getHours();\n    const day = now.getDay(); // 0 = Sunday, 6 = Saturday\n    return day >= 1 && day <= 5 && hour >= 9 && hour <= 17;\n  }\n  addToHistory(notification) {\n    this.notificationHistory.push({\n      id: notification.id,\n      type: notification.type,\n      message: notification.message,\n      timestamp: notification.timestamp\n    });\n\n    // Keep history size manageable\n    if (this.notificationHistory.length > this.maxHistorySize) {\n      this.notificationHistory = this.notificationHistory.slice(-this.maxHistorySize);\n    }\n  }\n  cleanupExpiredNotifications() {\n    const now = Date.now();\n    const toDelete = [];\n    for (const [id, notification] of this.notifications) {\n      if (notification.expiresAt && new Date(notification.expiresAt).getTime() < now) {\n        toDelete.push(id);\n      }\n    }\n    toDelete.forEach(id => {\n      this.notifications.delete(id);\n    });\n    if (toDelete.length > 0) {\n      this.saveNotificationsToStorage();\n    }\n  }\n  setupPerformanceMonitoring() {\n    // Monitor notification system performance\n    setInterval(() => {\n      const metrics = {\n        totalNotifications: this.notifications.size,\n        unreadNotifications: Array.from(this.notifications.values()).filter(n => !n.read).length,\n        criticalNotifications: Array.from(this.notifications.values()).filter(n => n.priority === 'critical').length,\n        memoryUsage: this.calculateMemoryUsage()\n      };\n\n      // Alert if system is overloaded\n      if (metrics.totalNotifications > this.maxNotifications) {\n        this.createSystemAlert('notification_overload', metrics);\n        this.performEmergencyCleanup();\n      }\n    }, 60000); // Check every minute\n  }\n  calculateMemoryUsage() {\n    return JSON.stringify(Array.from(this.notifications.values())).length;\n  }\n  performEmergencyCleanup() {\n    // Keep only critical and high priority notifications\n    for (const [id, notification] of this.notifications) {\n      if (!['critical', 'high'].includes(notification.priority)) {\n        this.notifications.delete(id);\n      }\n    }\n    this.saveNotificationsToStorage();\n  }\n  generateAlertMessage(alertType, data) {\n    const messages = {\n      automation_failure: `Automation system failed: ${data.error || 'Unknown error'}`,\n      calculation_error: `Calculation failed for ${data.sqft || 'unknown'} sq ft: ${data.error || 'Unknown error'}`,\n      performance_degradation: `System performance degraded: ${data.metric || 'response time'} is ${data.value || 'high'}`,\n      batch_complete: `Batch processing completed: ${data.processed || 0} items processed, ${data.errors || 0} errors`,\n      security_alert: `Security threat detected: ${data.threat || 'Unknown threat'} from ${data.source || 'unknown source'}`\n    };\n    return messages[alertType] || `System alert: ${alertType}`;\n  }\n  getSystemState() {\n    return {\n      timestamp: new Date().toISOString(),\n      notificationCount: this.notifications.size,\n      subscriberCount: this.subscribers.size,\n      alertRuleCount: this.alertRules.size\n    };\n  }\n  handleDeliveryFailure(notification, error) {\n    notification.retryCount++;\n    if (notification.retryCount < notification.maxRetries) {\n      // Schedule retry\n      setTimeout(() => {\n        this.dispatchToChannels(notification);\n      }, Math.pow(2, notification.retryCount) * 1000); // Exponential backoff\n    } else {\n      // Log failure and create alert\n      this.createSystemAlert('notification_delivery_failed', {\n        notificationId: notification.id,\n        error: error.message,\n        retryCount: notification.retryCount\n      });\n    }\n  }\n\n  /**\r\n   * Persistence\r\n   */\n  saveNotificationsToStorage() {\n    try {\n      const data = {\n        notifications: Array.from(this.notifications.entries()),\n        history: this.notificationHistory.slice(-100),\n        // Keep last 100 in storage\n        timestamp: new Date().toISOString()\n      };\n      localStorage.setItem('crm_notifications', JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to save notifications to storage:', error);\n    }\n  }\n  loadNotificationsFromStorage() {\n    try {\n      const data = localStorage.getItem('crm_notifications');\n      if (data) {\n        const parsed = JSON.parse(data);\n        this.notifications = new Map(parsed.notifications || []);\n        this.notificationHistory = parsed.history || [];\n\n        // Clean up expired notifications on load\n        this.cleanupExpiredNotifications();\n      }\n    } catch (error) {\n      console.error('Failed to load notifications from storage:', error);\n    }\n  }\n\n  /**\r\n   * Get notification statistics\r\n   */\n  getStatistics() {\n    const notifications = Array.from(this.notifications.values());\n    return {\n      total: notifications.length,\n      unread: notifications.filter(n => !n.read).length,\n      byType: notifications.reduce((acc, n) => {\n        acc[n.type] = (acc[n.type] || 0) + 1;\n        return acc;\n      }, {}),\n      byPriority: notifications.reduce((acc, n) => {\n        acc[n.priority] = (acc[n.priority] || 0) + 1;\n        return acc;\n      }, {}),\n      bySource: notifications.reduce((acc, n) => {\n        acc[n.source] = (acc[n.source] || 0) + 1;\n        return acc;\n      }, {}),\n      persistent: notifications.filter(n => n.persistent).length,\n      historySize: this.notificationHistory.length,\n      subscriberCount: this.subscribers.size,\n      alertRuleCount: this.alertRules.size\n    };\n  }\n}\nexport default NotificationSystem;","map":{"version":3,"names":["NotificationSystem","constructor","notifications","Map","subscribers","Set","alertRules","notificationHistory","channels","ui","email","sms","webhook","priorities","critical","high","medium","low","info","maxNotifications","maxHistorySize","autoCleanupInterval","initializeSystem","loadNotificationsFromStorage","setInterval","cleanupExpiredNotifications","setupPerformanceMonitoring","setupDefaultAlertRules","createNotification","options","notification","id","generateNotificationId","title","message","type","priority","source","timestamp","Date","toISOString","read","persistent","expiresAt","calculateExpiration","actions","metadata","retryCount","maxRetries","applyAlertRules","set","addToHistory","dispatchToChannels","notifySubscribers","saveNotificationsToStorage","createSystemAlert","alertType","data","alertConfigs","automation_failure","label","action","calculation_error","performance_degradation","batch_complete","security_alert","config","generateAlertMessage","alertData","systemState","getSystemState","createBusinessAlert","eventType","businessConfigs","new_lead","customerName","quote_generated","amount","calculation_completed","sqft","method","high_value_quote","eventData","createProgressNotification","processId","progress","existingNotification","Array","from","values","find","n","current","total","status","ruleId","rule","matchesRule","escalate","suppress","addChannels","customMessage","promises","map","channel","sendUINotification","sendEmailNotification","sendSMSNotification","sendWebhookNotification","sendBrowserNotification","Promise","resolve","allSettled","error","console","handleDeliveryFailure","uiNotification","className","getUIClassName","icon","getNotificationIcon","autoHide","hideDelay","getHideDelay","window","Notification","permission","browserNotification","body","tag","requireInteraction","slice","onclick","focus","markAsRead","reject","log","getNotifications","filters","unreadOnly","filter","sort","a","b","priorityDiff","notificationId","get","readAt","markAllAsRead","forEach","dismissNotification","delete","clearAllNotifications","includePersistent","clear","subscribe","callback","add","event","addAlertRule","conditions","frequency","count","timeFilter","startHour","endHour","isBusinessHours","removeAlertRule","now","Math","random","toString","substr","expirationTimes","warning","success","expiration","baseClass","typeClass","priorityClass","icons","delays","recentNotifications","getRecentNotifications","length","hour","getHours","windowMs","cutoff","notificationTime","getTime","day","getDay","push","toDelete","metrics","totalNotifications","size","unreadNotifications","criticalNotifications","memoryUsage","calculateMemoryUsage","performEmergencyCleanup","JSON","stringify","includes","messages","metric","value","processed","errors","threat","notificationCount","subscriberCount","alertRuleCount","setTimeout","pow","entries","history","localStorage","setItem","getItem","parsed","parse","getStatistics","unread","byType","reduce","acc","byPriority","bySource","historySize"],"sources":["C:/Users/PC_User/Desktop/free-crm/bhotch-crm/src/utils/notificationSystem.js"],"sourcesContent":["/**\r\n * Advanced Real-time Notification & Alert System\r\n *\r\n * Enterprise-grade notification management with multi-channel delivery,\r\n * smart filtering, priority queuing, and persistent storage.\r\n */\r\n\r\nclass NotificationSystem {\r\n    constructor() {\r\n        this.notifications = new Map();\r\n        this.subscribers = new Set();\r\n        this.alertRules = new Map();\r\n        this.notificationHistory = [];\r\n        this.channels = {\r\n            ui: true,\r\n            email: false,\r\n            sms: false,\r\n            webhook: false\r\n        };\r\n        this.priorities = {\r\n            critical: 1,\r\n            high: 2,\r\n            medium: 3,\r\n            low: 4,\r\n            info: 5\r\n        };\r\n        this.maxNotifications = 100;\r\n        this.maxHistorySize = 1000;\r\n        this.autoCleanupInterval = 300000; // 5 minutes\r\n\r\n        this.initializeSystem();\r\n    }\r\n\r\n    /**\r\n     * Initialize notification system\r\n     */\r\n    initializeSystem() {\r\n        // Load persisted notifications\r\n        this.loadNotificationsFromStorage();\r\n\r\n        // Set up auto-cleanup\r\n        setInterval(() => {\r\n            this.cleanupExpiredNotifications();\r\n        }, this.autoCleanupInterval);\r\n\r\n        // Set up performance monitoring\r\n        this.setupPerformanceMonitoring();\r\n\r\n        // Initialize alert rules\r\n        this.setupDefaultAlertRules();\r\n    }\r\n\r\n    /**\r\n     * Create and dispatch notification\r\n     */\r\n    createNotification(options) {\r\n        const notification = {\r\n            id: this.generateNotificationId(),\r\n            title: options.title || 'Notification',\r\n            message: options.message || '',\r\n            type: options.type || 'info', // success, error, warning, info, critical\r\n            priority: options.priority || 'medium',\r\n            source: options.source || 'system',\r\n            timestamp: new Date().toISOString(),\r\n            read: false,\r\n            persistent: options.persistent || false,\r\n            expiresAt: options.expiresAt || this.calculateExpiration(options.type),\r\n            actions: options.actions || [],\r\n            metadata: options.metadata || {},\r\n            channels: options.channels || ['ui'],\r\n            retryCount: 0,\r\n            maxRetries: options.maxRetries || 3\r\n        };\r\n\r\n        // Apply alert rules\r\n        this.applyAlertRules(notification);\r\n\r\n        // Store notification\r\n        this.notifications.set(notification.id, notification);\r\n\r\n        // Add to history\r\n        this.addToHistory(notification);\r\n\r\n        // Dispatch to channels\r\n        this.dispatchToChannels(notification);\r\n\r\n        // Notify subscribers\r\n        this.notifySubscribers('notification_created', notification);\r\n\r\n        // Persist to storage\r\n        this.saveNotificationsToStorage();\r\n\r\n        return notification;\r\n    }\r\n\r\n    /**\r\n     * System monitoring notifications\r\n     */\r\n    createSystemAlert(alertType, data) {\r\n        const alertConfigs = {\r\n            automation_failure: {\r\n                title: 'Automation System Failure',\r\n                type: 'critical',\r\n                priority: 'critical',\r\n                persistent: true,\r\n                channels: ['ui', 'email'],\r\n                actions: [\r\n                    { label: 'Run Diagnostics', action: 'run_diagnostics' },\r\n                    { label: 'Switch to Manual', action: 'enable_manual_mode' }\r\n                ]\r\n            },\r\n            calculation_error: {\r\n                title: 'Calculation Error Detected',\r\n                type: 'error',\r\n                priority: 'high',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'Retry Calculation', action: 'retry_calculation' },\r\n                    { label: 'Use Fallback', action: 'use_fallback' }\r\n                ]\r\n            },\r\n            performance_degradation: {\r\n                title: 'Performance Degradation Alert',\r\n                type: 'warning',\r\n                priority: 'medium',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'View Metrics', action: 'view_performance' },\r\n                    { label: 'Optimize System', action: 'optimize_system' }\r\n                ]\r\n            },\r\n            batch_complete: {\r\n                title: 'Batch Processing Complete',\r\n                type: 'success',\r\n                priority: 'low',\r\n                channels: ['ui'],\r\n                actions: [\r\n                    { label: 'View Results', action: 'view_batch_results' }\r\n                ]\r\n            },\r\n            security_alert: {\r\n                title: 'Security Alert',\r\n                type: 'critical',\r\n                priority: 'critical',\r\n                persistent: true,\r\n                channels: ['ui', 'email'],\r\n                actions: [\r\n                    { label: 'Review Logs', action: 'review_security_logs' },\r\n                    { label: 'Block IP', action: 'block_suspicious_ip' }\r\n                ]\r\n            }\r\n        };\r\n\r\n        const config = alertConfigs[alertType] || alertConfigs.automation_failure;\r\n\r\n        return this.createNotification({\r\n            ...config,\r\n            message: this.generateAlertMessage(alertType, data),\r\n            source: 'system_monitor',\r\n            metadata: {\r\n                alertType: alertType,\r\n                alertData: data,\r\n                systemState: this.getSystemState()\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Business logic notifications\r\n     */\r\n    createBusinessAlert(eventType, data) {\r\n        const businessConfigs = {\r\n            new_lead: {\r\n                title: 'New Lead Created',\r\n                type: 'info',\r\n                priority: 'medium',\r\n                message: `New lead: ${data.customerName || 'Unknown'}`\r\n            },\r\n            quote_generated: {\r\n                title: 'Quote Generated',\r\n                type: 'success',\r\n                priority: 'medium',\r\n                message: `Quote of $${data.amount} generated for ${data.customerName}`\r\n            },\r\n            calculation_completed: {\r\n                title: 'Vent Calculation Completed',\r\n                type: 'success',\r\n                priority: 'low',\r\n                message: `Calculation completed for ${data.sqft} sq ft via ${data.method}`\r\n            },\r\n            high_value_quote: {\r\n                title: 'High Value Quote Alert',\r\n                type: 'warning',\r\n                priority: 'high',\r\n                message: `High value quote: $${data.amount} for ${data.customerName}`,\r\n                persistent: true,\r\n                actions: [\r\n                    { label: 'Review Quote', action: 'review_quote' },\r\n                    { label: 'Contact Customer', action: 'contact_customer' }\r\n                ]\r\n            }\r\n        };\r\n\r\n        const config = businessConfigs[eventType] || businessConfigs.new_lead;\r\n\r\n        return this.createNotification({\r\n            ...config,\r\n            source: 'business_logic',\r\n            metadata: {\r\n                eventType: eventType,\r\n                eventData: data\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Real-time progress notifications\r\n     */\r\n    createProgressNotification(processId, progress) {\r\n        const existingNotification = Array.from(this.notifications.values())\r\n            .find(n => n.metadata.processId === processId);\r\n\r\n        if (existingNotification) {\r\n            // Update existing progress notification\r\n            existingNotification.message = `${progress.current}/${progress.total} - ${progress.status}`;\r\n            existingNotification.metadata.progress = progress;\r\n            existingNotification.timestamp = new Date().toISOString();\r\n\r\n            this.notifySubscribers('notification_updated', existingNotification);\r\n        } else {\r\n            // Create new progress notification\r\n            return this.createNotification({\r\n                title: progress.title || 'Processing...',\r\n                message: `${progress.current}/${progress.total} - ${progress.status}`,\r\n                type: 'info',\r\n                priority: 'low',\r\n                source: 'progress_tracker',\r\n                persistent: false,\r\n                metadata: {\r\n                    processId: processId,\r\n                    progress: progress\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Smart notification filtering\r\n     */\r\n    applyAlertRules(notification) {\r\n        for (const [ruleId, rule] of this.alertRules) {\r\n            if (this.matchesRule(notification, rule)) {\r\n                // Apply rule modifications\r\n                if (rule.escalate) {\r\n                    notification.priority = 'critical';\r\n                    notification.persistent = true;\r\n                }\r\n                if (rule.suppress) {\r\n                    notification.channels = [];\r\n                }\r\n                if (rule.addChannels) {\r\n                    notification.channels = [...notification.channels, ...rule.addChannels];\r\n                }\r\n                if (rule.customMessage) {\r\n                    notification.message = rule.customMessage(notification);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Multi-channel notification dispatch\r\n     */\r\n    async dispatchToChannels(notification) {\r\n        const promises = notification.channels.map(channel => {\r\n            switch (channel) {\r\n                case 'ui':\r\n                    return this.sendUINotification(notification);\r\n                case 'email':\r\n                    return this.sendEmailNotification(notification);\r\n                case 'sms':\r\n                    return this.sendSMSNotification(notification);\r\n                case 'webhook':\r\n                    return this.sendWebhookNotification(notification);\r\n                case 'browser':\r\n                    return this.sendBrowserNotification(notification);\r\n                default:\r\n                    return Promise.resolve();\r\n            }\r\n        });\r\n\r\n        try {\r\n            await Promise.allSettled(promises);\r\n        } catch (error) {\r\n            console.error('Error dispatching notification:', error);\r\n            this.handleDeliveryFailure(notification, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UI notification delivery\r\n     */\r\n    sendUINotification(notification) {\r\n        // Add visual indicators based on priority\r\n        const uiNotification = {\r\n            ...notification,\r\n            className: this.getUIClassName(notification),\r\n            icon: this.getNotificationIcon(notification.type),\r\n            autoHide: !notification.persistent,\r\n            hideDelay: this.getHideDelay(notification.priority)\r\n        };\r\n\r\n        this.notifySubscribers('ui_notification', uiNotification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Browser push notification\r\n     */\r\n    async sendBrowserNotification(notification) {\r\n        if ('Notification' in window && Notification.permission === 'granted') {\r\n            const browserNotification = new Notification(notification.title, {\r\n                body: notification.message,\r\n                icon: '/favicon.ico',\r\n                tag: notification.id,\r\n                requireInteraction: notification.persistent,\r\n                actions: notification.actions.slice(0, 2) // Browser supports max 2 actions\r\n            });\r\n\r\n            browserNotification.onclick = () => {\r\n                window.focus();\r\n                this.markAsRead(notification.id);\r\n            };\r\n\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject('Browser notifications not supported or permission denied');\r\n    }\r\n\r\n    /**\r\n     * Email notification (placeholder for actual implementation)\r\n     */\r\n    async sendEmailNotification(notification) {\r\n        // In a real implementation, this would integrate with an email service\r\n        console.log('Email notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * SMS notification (placeholder for actual implementation)\r\n     */\r\n    async sendSMSNotification(notification) {\r\n        // In a real implementation, this would integrate with an SMS service\r\n        console.log('SMS notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Webhook notification (placeholder for actual implementation)\r\n     */\r\n    async sendWebhookNotification(notification) {\r\n        // In a real implementation, this would send HTTP POST to configured webhooks\r\n        console.log('Webhook notification would be sent:', notification);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Notification management\r\n     */\r\n    getNotifications(filters = {}) {\r\n        let notifications = Array.from(this.notifications.values());\r\n\r\n        // Apply filters\r\n        if (filters.unreadOnly) {\r\n            notifications = notifications.filter(n => !n.read);\r\n        }\r\n        if (filters.type) {\r\n            notifications = notifications.filter(n => n.type === filters.type);\r\n        }\r\n        if (filters.priority) {\r\n            notifications = notifications.filter(n => n.priority === filters.priority);\r\n        }\r\n        if (filters.source) {\r\n            notifications = notifications.filter(n => n.source === filters.source);\r\n        }\r\n\r\n        // Sort by priority and timestamp\r\n        notifications.sort((a, b) => {\r\n            const priorityDiff = this.priorities[a.priority] - this.priorities[b.priority];\r\n            if (priorityDiff !== 0) return priorityDiff;\r\n            return new Date(b.timestamp) - new Date(a.timestamp);\r\n        });\r\n\r\n        return notifications;\r\n    }\r\n\r\n    /**\r\n     * Mark notification as read\r\n     */\r\n    markAsRead(notificationId) {\r\n        const notification = this.notifications.get(notificationId);\r\n        if (notification) {\r\n            notification.read = true;\r\n            notification.readAt = new Date().toISOString();\r\n            this.notifySubscribers('notification_read', notification);\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mark all notifications as read\r\n     */\r\n    markAllAsRead(filters = {}) {\r\n        const notifications = this.getNotifications(filters);\r\n        notifications.forEach(notification => {\r\n            this.markAsRead(notification.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dismiss notification\r\n     */\r\n    dismissNotification(notificationId) {\r\n        const notification = this.notifications.get(notificationId);\r\n        if (notification && !notification.persistent) {\r\n            this.notifications.delete(notificationId);\r\n            this.notifySubscribers('notification_dismissed', notification);\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all notifications\r\n     */\r\n    clearAllNotifications(includePersistent = false) {\r\n        if (includePersistent) {\r\n            this.notifications.clear();\r\n        } else {\r\n            for (const [id, notification] of this.notifications) {\r\n                if (!notification.persistent) {\r\n                    this.notifications.delete(id);\r\n                }\r\n            }\r\n        }\r\n        this.notifySubscribers('notifications_cleared');\r\n        this.saveNotificationsToStorage();\r\n    }\r\n\r\n    /**\r\n     * Subscription management\r\n     */\r\n    subscribe(callback) {\r\n        this.subscribers.add(callback);\r\n        return () => this.subscribers.delete(callback);\r\n    }\r\n\r\n    notifySubscribers(event, data) {\r\n        this.subscribers.forEach(callback => {\r\n            try {\r\n                callback(event, data);\r\n            } catch (error) {\r\n                console.error('Error in notification subscriber:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Alert rules management\r\n     */\r\n    setupDefaultAlertRules() {\r\n        // High frequency error suppression\r\n        this.addAlertRule('suppress_duplicate_errors', {\r\n            conditions: {\r\n                type: 'error',\r\n                frequency: { count: 5, window: 300000 } // 5 errors in 5 minutes\r\n            },\r\n            action: { suppress: true }\r\n        });\r\n\r\n        // Critical error escalation\r\n        this.addAlertRule('escalate_critical', {\r\n            conditions: {\r\n                type: 'critical'\r\n            },\r\n            action: { escalate: true, addChannels: ['email', 'browser'] }\r\n        });\r\n\r\n        // Business hours filtering\r\n        this.addAlertRule('business_hours_only', {\r\n            conditions: {\r\n                priority: 'low',\r\n                timeFilter: { startHour: 9, endHour: 17 }\r\n            },\r\n            action: {\r\n                suppress: (notification) => !this.isBusinessHours(),\r\n                customMessage: (notification) => `${notification.message} (Business hours only)`\r\n            }\r\n        });\r\n    }\r\n\r\n    addAlertRule(ruleId, rule) {\r\n        this.alertRules.set(ruleId, rule);\r\n    }\r\n\r\n    removeAlertRule(ruleId) {\r\n        this.alertRules.delete(ruleId);\r\n    }\r\n\r\n    /**\r\n     * Utility functions\r\n     */\r\n    generateNotificationId() {\r\n        return `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    calculateExpiration(type) {\r\n        const expirationTimes = {\r\n            critical: null, // Never expires\r\n            error: 24 * 60 * 60 * 1000, // 24 hours\r\n            warning: 12 * 60 * 60 * 1000, // 12 hours\r\n            success: 6 * 60 * 60 * 1000, // 6 hours\r\n            info: 3 * 60 * 60 * 1000 // 3 hours\r\n        };\r\n\r\n        const expiration = expirationTimes[type] || expirationTimes.info;\r\n        return expiration ? new Date(Date.now() + expiration).toISOString() : null;\r\n    }\r\n\r\n    getUIClassName(notification) {\r\n        const baseClass = 'notification';\r\n        const typeClass = `notification-${notification.type}`;\r\n        const priorityClass = `notification-priority-${notification.priority}`;\r\n        return `${baseClass} ${typeClass} ${priorityClass}`;\r\n    }\r\n\r\n    getNotificationIcon(type) {\r\n        const icons = {\r\n            success: '✅',\r\n            error: '❌',\r\n            warning: '⚠️',\r\n            info: 'ℹ️',\r\n            critical: '🚨'\r\n        };\r\n        return icons[type] || icons.info;\r\n    }\r\n\r\n    getHideDelay(priority) {\r\n        const delays = {\r\n            critical: 0, // Don't auto-hide\r\n            high: 10000, // 10 seconds\r\n            medium: 7000, // 7 seconds\r\n            low: 5000, // 5 seconds\r\n            info: 3000 // 3 seconds\r\n        };\r\n        return delays[priority] || delays.info;\r\n    }\r\n\r\n    matchesRule(notification, rule) {\r\n        const conditions = rule.conditions;\r\n\r\n        // Check basic conditions\r\n        if (conditions.type && notification.type !== conditions.type) return false;\r\n        if (conditions.priority && notification.priority !== conditions.priority) return false;\r\n        if (conditions.source && notification.source !== conditions.source) return false;\r\n\r\n        // Check frequency conditions\r\n        if (conditions.frequency) {\r\n            const recentNotifications = this.getRecentNotifications(\r\n                conditions.frequency.window,\r\n                { type: notification.type, message: notification.message }\r\n            );\r\n            if (recentNotifications.length < conditions.frequency.count) return false;\r\n        }\r\n\r\n        // Check time filters\r\n        if (conditions.timeFilter) {\r\n            const now = new Date();\r\n            const hour = now.getHours();\r\n            if (hour < conditions.timeFilter.startHour || hour > conditions.timeFilter.endHour) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getRecentNotifications(windowMs, filters = {}) {\r\n        const cutoff = Date.now() - windowMs;\r\n        return this.notificationHistory.filter(notification => {\r\n            const notificationTime = new Date(notification.timestamp).getTime();\r\n            if (notificationTime < cutoff) return false;\r\n\r\n            if (filters.type && notification.type !== filters.type) return false;\r\n            if (filters.message && notification.message !== filters.message) return false;\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    isBusinessHours() {\r\n        const now = new Date();\r\n        const hour = now.getHours();\r\n        const day = now.getDay(); // 0 = Sunday, 6 = Saturday\r\n        return day >= 1 && day <= 5 && hour >= 9 && hour <= 17;\r\n    }\r\n\r\n    addToHistory(notification) {\r\n        this.notificationHistory.push({\r\n            id: notification.id,\r\n            type: notification.type,\r\n            message: notification.message,\r\n            timestamp: notification.timestamp\r\n        });\r\n\r\n        // Keep history size manageable\r\n        if (this.notificationHistory.length > this.maxHistorySize) {\r\n            this.notificationHistory = this.notificationHistory.slice(-this.maxHistorySize);\r\n        }\r\n    }\r\n\r\n    cleanupExpiredNotifications() {\r\n        const now = Date.now();\r\n        const toDelete = [];\r\n\r\n        for (const [id, notification] of this.notifications) {\r\n            if (notification.expiresAt && new Date(notification.expiresAt).getTime() < now) {\r\n                toDelete.push(id);\r\n            }\r\n        }\r\n\r\n        toDelete.forEach(id => {\r\n            this.notifications.delete(id);\r\n        });\r\n\r\n        if (toDelete.length > 0) {\r\n            this.saveNotificationsToStorage();\r\n        }\r\n    }\r\n\r\n    setupPerformanceMonitoring() {\r\n        // Monitor notification system performance\r\n        setInterval(() => {\r\n            const metrics = {\r\n                totalNotifications: this.notifications.size,\r\n                unreadNotifications: Array.from(this.notifications.values()).filter(n => !n.read).length,\r\n                criticalNotifications: Array.from(this.notifications.values()).filter(n => n.priority === 'critical').length,\r\n                memoryUsage: this.calculateMemoryUsage()\r\n            };\r\n\r\n            // Alert if system is overloaded\r\n            if (metrics.totalNotifications > this.maxNotifications) {\r\n                this.createSystemAlert('notification_overload', metrics);\r\n                this.performEmergencyCleanup();\r\n            }\r\n        }, 60000); // Check every minute\r\n    }\r\n\r\n    calculateMemoryUsage() {\r\n        return JSON.stringify(Array.from(this.notifications.values())).length;\r\n    }\r\n\r\n    performEmergencyCleanup() {\r\n        // Keep only critical and high priority notifications\r\n        for (const [id, notification] of this.notifications) {\r\n            if (!['critical', 'high'].includes(notification.priority)) {\r\n                this.notifications.delete(id);\r\n            }\r\n        }\r\n        this.saveNotificationsToStorage();\r\n    }\r\n\r\n    generateAlertMessage(alertType, data) {\r\n        const messages = {\r\n            automation_failure: `Automation system failed: ${data.error || 'Unknown error'}`,\r\n            calculation_error: `Calculation failed for ${data.sqft || 'unknown'} sq ft: ${data.error || 'Unknown error'}`,\r\n            performance_degradation: `System performance degraded: ${data.metric || 'response time'} is ${data.value || 'high'}`,\r\n            batch_complete: `Batch processing completed: ${data.processed || 0} items processed, ${data.errors || 0} errors`,\r\n            security_alert: `Security threat detected: ${data.threat || 'Unknown threat'} from ${data.source || 'unknown source'}`\r\n        };\r\n\r\n        return messages[alertType] || `System alert: ${alertType}`;\r\n    }\r\n\r\n    getSystemState() {\r\n        return {\r\n            timestamp: new Date().toISOString(),\r\n            notificationCount: this.notifications.size,\r\n            subscriberCount: this.subscribers.size,\r\n            alertRuleCount: this.alertRules.size\r\n        };\r\n    }\r\n\r\n    handleDeliveryFailure(notification, error) {\r\n        notification.retryCount++;\r\n\r\n        if (notification.retryCount < notification.maxRetries) {\r\n            // Schedule retry\r\n            setTimeout(() => {\r\n                this.dispatchToChannels(notification);\r\n            }, Math.pow(2, notification.retryCount) * 1000); // Exponential backoff\r\n        } else {\r\n            // Log failure and create alert\r\n            this.createSystemAlert('notification_delivery_failed', {\r\n                notificationId: notification.id,\r\n                error: error.message,\r\n                retryCount: notification.retryCount\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Persistence\r\n     */\r\n    saveNotificationsToStorage() {\r\n        try {\r\n            const data = {\r\n                notifications: Array.from(this.notifications.entries()),\r\n                history: this.notificationHistory.slice(-100), // Keep last 100 in storage\r\n                timestamp: new Date().toISOString()\r\n            };\r\n            localStorage.setItem('crm_notifications', JSON.stringify(data));\r\n        } catch (error) {\r\n            console.error('Failed to save notifications to storage:', error);\r\n        }\r\n    }\r\n\r\n    loadNotificationsFromStorage() {\r\n        try {\r\n            const data = localStorage.getItem('crm_notifications');\r\n            if (data) {\r\n                const parsed = JSON.parse(data);\r\n                this.notifications = new Map(parsed.notifications || []);\r\n                this.notificationHistory = parsed.history || [];\r\n\r\n                // Clean up expired notifications on load\r\n                this.cleanupExpiredNotifications();\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to load notifications from storage:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get notification statistics\r\n     */\r\n    getStatistics() {\r\n        const notifications = Array.from(this.notifications.values());\r\n\r\n        return {\r\n            total: notifications.length,\r\n            unread: notifications.filter(n => !n.read).length,\r\n            byType: notifications.reduce((acc, n) => {\r\n                acc[n.type] = (acc[n.type] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            byPriority: notifications.reduce((acc, n) => {\r\n                acc[n.priority] = (acc[n.priority] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            bySource: notifications.reduce((acc, n) => {\r\n                acc[n.source] = (acc[n.source] || 0) + 1;\r\n                return acc;\r\n            }, {}),\r\n            persistent: notifications.filter(n => n.persistent).length,\r\n            historySize: this.notificationHistory.length,\r\n            subscriberCount: this.subscribers.size,\r\n            alertRuleCount: this.alertRules.size\r\n        };\r\n    }\r\n}\r\n\r\nexport default NotificationSystem;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,kBAAkB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACC,UAAU,GAAG,IAAIH,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACI,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,QAAQ,GAAG;MACZC,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,KAAK;MACZC,GAAG,EAAE,KAAK;MACVC,OAAO,EAAE;IACb,CAAC;IACD,IAAI,CAACC,UAAU,GAAG;MACdC,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,CAAC;MACTC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE;IACV,CAAC;IACD,IAAI,CAACC,gBAAgB,GAAG,GAAG;IAC3B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,mBAAmB,GAAG,MAAM,CAAC,CAAC;;IAEnC,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;;EAEA;AACJ;AACA;EACIA,gBAAgBA,CAAA,EAAG;IACf;IACA,IAAI,CAACC,4BAA4B,CAAC,CAAC;;IAEnC;IACAC,WAAW,CAAC,MAAM;MACd,IAAI,CAACC,2BAA2B,CAAC,CAAC;IACtC,CAAC,EAAE,IAAI,CAACJ,mBAAmB,CAAC;;IAE5B;IACA,IAAI,CAACK,0BAA0B,CAAC,CAAC;;IAEjC;IACA,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACjC;;EAEA;AACJ;AACA;EACIC,kBAAkBA,CAACC,OAAO,EAAE;IACxB,MAAMC,YAAY,GAAG;MACjBC,EAAE,EAAE,IAAI,CAACC,sBAAsB,CAAC,CAAC;MACjCC,KAAK,EAAEJ,OAAO,CAACI,KAAK,IAAI,cAAc;MACtCC,OAAO,EAAEL,OAAO,CAACK,OAAO,IAAI,EAAE;MAC9BC,IAAI,EAAEN,OAAO,CAACM,IAAI,IAAI,MAAM;MAAE;MAC9BC,QAAQ,EAAEP,OAAO,CAACO,QAAQ,IAAI,QAAQ;MACtCC,MAAM,EAAER,OAAO,CAACQ,MAAM,IAAI,QAAQ;MAClCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,IAAI,EAAE,KAAK;MACXC,UAAU,EAAEb,OAAO,CAACa,UAAU,IAAI,KAAK;MACvCC,SAAS,EAAEd,OAAO,CAACc,SAAS,IAAI,IAAI,CAACC,mBAAmB,CAACf,OAAO,CAACM,IAAI,CAAC;MACtEU,OAAO,EAAEhB,OAAO,CAACgB,OAAO,IAAI,EAAE;MAC9BC,QAAQ,EAAEjB,OAAO,CAACiB,QAAQ,IAAI,CAAC,CAAC;MAChCtC,QAAQ,EAAEqB,OAAO,CAACrB,QAAQ,IAAI,CAAC,IAAI,CAAC;MACpCuC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAEnB,OAAO,CAACmB,UAAU,IAAI;IACtC,CAAC;;IAED;IACA,IAAI,CAACC,eAAe,CAACnB,YAAY,CAAC;;IAElC;IACA,IAAI,CAAC5B,aAAa,CAACgD,GAAG,CAACpB,YAAY,CAACC,EAAE,EAAED,YAAY,CAAC;;IAErD;IACA,IAAI,CAACqB,YAAY,CAACrB,YAAY,CAAC;;IAE/B;IACA,IAAI,CAACsB,kBAAkB,CAACtB,YAAY,CAAC;;IAErC;IACA,IAAI,CAACuB,iBAAiB,CAAC,sBAAsB,EAAEvB,YAAY,CAAC;;IAE5D;IACA,IAAI,CAACwB,0BAA0B,CAAC,CAAC;IAEjC,OAAOxB,YAAY;EACvB;;EAEA;AACJ;AACA;EACIyB,iBAAiBA,CAACC,SAAS,EAAEC,IAAI,EAAE;IAC/B,MAAMC,YAAY,GAAG;MACjBC,kBAAkB,EAAE;QAChB1B,KAAK,EAAE,2BAA2B;QAClCE,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,UAAU;QACpBM,UAAU,EAAE,IAAI;QAChBlC,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;QACzBqC,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,iBAAiB;UAAEC,MAAM,EAAE;QAAkB,CAAC,EACvD;UAAED,KAAK,EAAE,kBAAkB;UAAEC,MAAM,EAAE;QAAqB,CAAC;MAEnE,CAAC;MACDC,iBAAiB,EAAE;QACf7B,KAAK,EAAE,4BAA4B;QACnCE,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE,MAAM;QAChB5B,QAAQ,EAAE,CAAC,IAAI,CAAC;QAChBqC,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,mBAAmB;UAAEC,MAAM,EAAE;QAAoB,CAAC,EAC3D;UAAED,KAAK,EAAE,cAAc;UAAEC,MAAM,EAAE;QAAe,CAAC;MAEzD,CAAC;MACDE,uBAAuB,EAAE;QACrB9B,KAAK,EAAE,+BAA+B;QACtCE,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,QAAQ;QAClB5B,QAAQ,EAAE,CAAC,IAAI,CAAC;QAChBqC,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,cAAc;UAAEC,MAAM,EAAE;QAAmB,CAAC,EACrD;UAAED,KAAK,EAAE,iBAAiB;UAAEC,MAAM,EAAE;QAAkB,CAAC;MAE/D,CAAC;MACDG,cAAc,EAAE;QACZ/B,KAAK,EAAE,2BAA2B;QAClCE,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,KAAK;QACf5B,QAAQ,EAAE,CAAC,IAAI,CAAC;QAChBqC,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,cAAc;UAAEC,MAAM,EAAE;QAAqB,CAAC;MAE/D,CAAC;MACDI,cAAc,EAAE;QACZhC,KAAK,EAAE,gBAAgB;QACvBE,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,UAAU;QACpBM,UAAU,EAAE,IAAI;QAChBlC,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;QACzBqC,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,aAAa;UAAEC,MAAM,EAAE;QAAuB,CAAC,EACxD;UAAED,KAAK,EAAE,UAAU;UAAEC,MAAM,EAAE;QAAsB,CAAC;MAE5D;IACJ,CAAC;IAED,MAAMK,MAAM,GAAGR,YAAY,CAACF,SAAS,CAAC,IAAIE,YAAY,CAACC,kBAAkB;IAEzE,OAAO,IAAI,CAAC/B,kBAAkB,CAAC;MAC3B,GAAGsC,MAAM;MACThC,OAAO,EAAE,IAAI,CAACiC,oBAAoB,CAACX,SAAS,EAAEC,IAAI,CAAC;MACnDpB,MAAM,EAAE,gBAAgB;MACxBS,QAAQ,EAAE;QACNU,SAAS,EAAEA,SAAS;QACpBY,SAAS,EAAEX,IAAI;QACfY,WAAW,EAAE,IAAI,CAACC,cAAc,CAAC;MACrC;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIC,mBAAmBA,CAACC,SAAS,EAAEf,IAAI,EAAE;IACjC,MAAMgB,eAAe,GAAG;MACpBC,QAAQ,EAAE;QACNzC,KAAK,EAAE,kBAAkB;QACzBE,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE,QAAQ;QAClBF,OAAO,EAAE,aAAauB,IAAI,CAACkB,YAAY,IAAI,SAAS;MACxD,CAAC;MACDC,eAAe,EAAE;QACb3C,KAAK,EAAE,iBAAiB;QACxBE,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,QAAQ;QAClBF,OAAO,EAAE,aAAauB,IAAI,CAACoB,MAAM,kBAAkBpB,IAAI,CAACkB,YAAY;MACxE,CAAC;MACDG,qBAAqB,EAAE;QACnB7C,KAAK,EAAE,4BAA4B;QACnCE,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,KAAK;QACfF,OAAO,EAAE,6BAA6BuB,IAAI,CAACsB,IAAI,cAActB,IAAI,CAACuB,MAAM;MAC5E,CAAC;MACDC,gBAAgB,EAAE;QACdhD,KAAK,EAAE,wBAAwB;QAC/BE,IAAI,EAAE,SAAS;QACfC,QAAQ,EAAE,MAAM;QAChBF,OAAO,EAAE,sBAAsBuB,IAAI,CAACoB,MAAM,QAAQpB,IAAI,CAACkB,YAAY,EAAE;QACrEjC,UAAU,EAAE,IAAI;QAChBG,OAAO,EAAE,CACL;UAAEe,KAAK,EAAE,cAAc;UAAEC,MAAM,EAAE;QAAe,CAAC,EACjD;UAAED,KAAK,EAAE,kBAAkB;UAAEC,MAAM,EAAE;QAAmB,CAAC;MAEjE;IACJ,CAAC;IAED,MAAMK,MAAM,GAAGO,eAAe,CAACD,SAAS,CAAC,IAAIC,eAAe,CAACC,QAAQ;IAErE,OAAO,IAAI,CAAC9C,kBAAkB,CAAC;MAC3B,GAAGsC,MAAM;MACT7B,MAAM,EAAE,gBAAgB;MACxBS,QAAQ,EAAE;QACN0B,SAAS,EAAEA,SAAS;QACpBU,SAAS,EAAEzB;MACf;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACI0B,0BAA0BA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IAC5C,MAAMC,oBAAoB,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC,CAC/DC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7C,QAAQ,CAACsC,SAAS,KAAKA,SAAS,CAAC;IAElD,IAAIE,oBAAoB,EAAE;MACtB;MACAA,oBAAoB,CAACpD,OAAO,GAAG,GAAGmD,QAAQ,CAACO,OAAO,IAAIP,QAAQ,CAACQ,KAAK,MAAMR,QAAQ,CAACS,MAAM,EAAE;MAC3FR,oBAAoB,CAACxC,QAAQ,CAACuC,QAAQ,GAAGA,QAAQ;MACjDC,oBAAoB,CAAChD,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAEzD,IAAI,CAACa,iBAAiB,CAAC,sBAAsB,EAAEiC,oBAAoB,CAAC;IACxE,CAAC,MAAM;MACH;MACA,OAAO,IAAI,CAAC1D,kBAAkB,CAAC;QAC3BK,KAAK,EAAEoD,QAAQ,CAACpD,KAAK,IAAI,eAAe;QACxCC,OAAO,EAAE,GAAGmD,QAAQ,CAACO,OAAO,IAAIP,QAAQ,CAACQ,KAAK,MAAMR,QAAQ,CAACS,MAAM,EAAE;QACrE3D,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE,KAAK;QACfC,MAAM,EAAE,kBAAkB;QAC1BK,UAAU,EAAE,KAAK;QACjBI,QAAQ,EAAE;UACNsC,SAAS,EAAEA,SAAS;UACpBC,QAAQ,EAAEA;QACd;MACJ,CAAC,CAAC;IACN;EACJ;;EAEA;AACJ;AACA;EACIpC,eAAeA,CAACnB,YAAY,EAAE;IAC1B,KAAK,MAAM,CAACiE,MAAM,EAAEC,IAAI,CAAC,IAAI,IAAI,CAAC1F,UAAU,EAAE;MAC1C,IAAI,IAAI,CAAC2F,WAAW,CAACnE,YAAY,EAAEkE,IAAI,CAAC,EAAE;QACtC;QACA,IAAIA,IAAI,CAACE,QAAQ,EAAE;UACfpE,YAAY,CAACM,QAAQ,GAAG,UAAU;UAClCN,YAAY,CAACY,UAAU,GAAG,IAAI;QAClC;QACA,IAAIsD,IAAI,CAACG,QAAQ,EAAE;UACfrE,YAAY,CAACtB,QAAQ,GAAG,EAAE;QAC9B;QACA,IAAIwF,IAAI,CAACI,WAAW,EAAE;UAClBtE,YAAY,CAACtB,QAAQ,GAAG,CAAC,GAAGsB,YAAY,CAACtB,QAAQ,EAAE,GAAGwF,IAAI,CAACI,WAAW,CAAC;QAC3E;QACA,IAAIJ,IAAI,CAACK,aAAa,EAAE;UACpBvE,YAAY,CAACI,OAAO,GAAG8D,IAAI,CAACK,aAAa,CAACvE,YAAY,CAAC;QAC3D;MACJ;IACJ;EACJ;;EAEA;AACJ;AACA;EACI,MAAMsB,kBAAkBA,CAACtB,YAAY,EAAE;IACnC,MAAMwE,QAAQ,GAAGxE,YAAY,CAACtB,QAAQ,CAAC+F,GAAG,CAACC,OAAO,IAAI;MAClD,QAAQA,OAAO;QACX,KAAK,IAAI;UACL,OAAO,IAAI,CAACC,kBAAkB,CAAC3E,YAAY,CAAC;QAChD,KAAK,OAAO;UACR,OAAO,IAAI,CAAC4E,qBAAqB,CAAC5E,YAAY,CAAC;QACnD,KAAK,KAAK;UACN,OAAO,IAAI,CAAC6E,mBAAmB,CAAC7E,YAAY,CAAC;QACjD,KAAK,SAAS;UACV,OAAO,IAAI,CAAC8E,uBAAuB,CAAC9E,YAAY,CAAC;QACrD,KAAK,SAAS;UACV,OAAO,IAAI,CAAC+E,uBAAuB,CAAC/E,YAAY,CAAC;QACrD;UACI,OAAOgF,OAAO,CAACC,OAAO,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC;IAEF,IAAI;MACA,MAAMD,OAAO,CAACE,UAAU,CAACV,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,IAAI,CAACE,qBAAqB,CAACrF,YAAY,EAAEmF,KAAK,CAAC;IACnD;EACJ;;EAEA;AACJ;AACA;EACIR,kBAAkBA,CAAC3E,YAAY,EAAE;IAC7B;IACA,MAAMsF,cAAc,GAAG;MACnB,GAAGtF,YAAY;MACfuF,SAAS,EAAE,IAAI,CAACC,cAAc,CAACxF,YAAY,CAAC;MAC5CyF,IAAI,EAAE,IAAI,CAACC,mBAAmB,CAAC1F,YAAY,CAACK,IAAI,CAAC;MACjDsF,QAAQ,EAAE,CAAC3F,YAAY,CAACY,UAAU;MAClCgF,SAAS,EAAE,IAAI,CAACC,YAAY,CAAC7F,YAAY,CAACM,QAAQ;IACtD,CAAC;IAED,IAAI,CAACiB,iBAAiB,CAAC,iBAAiB,EAAE+D,cAAc,CAAC;IACzD,OAAON,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;EACI,MAAMF,uBAAuBA,CAAC/E,YAAY,EAAE;IACxC,IAAI,cAAc,IAAI8F,MAAM,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACnE,MAAMC,mBAAmB,GAAG,IAAIF,YAAY,CAAC/F,YAAY,CAACG,KAAK,EAAE;QAC7D+F,IAAI,EAAElG,YAAY,CAACI,OAAO;QAC1BqF,IAAI,EAAE,cAAc;QACpBU,GAAG,EAAEnG,YAAY,CAACC,EAAE;QACpBmG,kBAAkB,EAAEpG,YAAY,CAACY,UAAU;QAC3CG,OAAO,EAAEf,YAAY,CAACe,OAAO,CAACsF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC;MAEFJ,mBAAmB,CAACK,OAAO,GAAG,MAAM;QAChCR,MAAM,CAACS,KAAK,CAAC,CAAC;QACd,IAAI,CAACC,UAAU,CAACxG,YAAY,CAACC,EAAE,CAAC;MACpC,CAAC;MAED,OAAO+E,OAAO,CAACC,OAAO,CAAC,CAAC;IAC5B;IACA,OAAOD,OAAO,CAACyB,MAAM,CAAC,0DAA0D,CAAC;EACrF;;EAEA;AACJ;AACA;EACI,MAAM7B,qBAAqBA,CAAC5E,YAAY,EAAE;IACtC;IACAoF,OAAO,CAACsB,GAAG,CAAC,mCAAmC,EAAE1G,YAAY,CAAC;IAC9D,OAAOgF,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;EACI,MAAMJ,mBAAmBA,CAAC7E,YAAY,EAAE;IACpC;IACAoF,OAAO,CAACsB,GAAG,CAAC,iCAAiC,EAAE1G,YAAY,CAAC;IAC5D,OAAOgF,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;EACI,MAAMH,uBAAuBA,CAAC9E,YAAY,EAAE;IACxC;IACAoF,OAAO,CAACsB,GAAG,CAAC,qCAAqC,EAAE1G,YAAY,CAAC;IAChE,OAAOgF,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;EACI0B,gBAAgBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3B,IAAIxI,aAAa,GAAGqF,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC;;IAE3D;IACA,IAAIiD,OAAO,CAACC,UAAU,EAAE;MACpBzI,aAAa,GAAGA,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAI,CAACA,CAAC,CAAClD,IAAI,CAAC;IACtD;IACA,IAAIiG,OAAO,CAACvG,IAAI,EAAE;MACdjC,aAAa,GAAGA,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACxD,IAAI,KAAKuG,OAAO,CAACvG,IAAI,CAAC;IACtE;IACA,IAAIuG,OAAO,CAACtG,QAAQ,EAAE;MAClBlC,aAAa,GAAGA,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACvD,QAAQ,KAAKsG,OAAO,CAACtG,QAAQ,CAAC;IAC9E;IACA,IAAIsG,OAAO,CAACrG,MAAM,EAAE;MAChBnC,aAAa,GAAGA,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACtD,MAAM,KAAKqG,OAAO,CAACrG,MAAM,CAAC;IAC1E;;IAEA;IACAnC,aAAa,CAAC2I,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACzB,MAAMC,YAAY,GAAG,IAAI,CAACnI,UAAU,CAACiI,CAAC,CAAC1G,QAAQ,CAAC,GAAG,IAAI,CAACvB,UAAU,CAACkI,CAAC,CAAC3G,QAAQ,CAAC;MAC9E,IAAI4G,YAAY,KAAK,CAAC,EAAE,OAAOA,YAAY;MAC3C,OAAO,IAAIzG,IAAI,CAACwG,CAAC,CAACzG,SAAS,CAAC,GAAG,IAAIC,IAAI,CAACuG,CAAC,CAACxG,SAAS,CAAC;IACxD,CAAC,CAAC;IAEF,OAAOpC,aAAa;EACxB;;EAEA;AACJ;AACA;EACIoI,UAAUA,CAACW,cAAc,EAAE;IACvB,MAAMnH,YAAY,GAAG,IAAI,CAAC5B,aAAa,CAACgJ,GAAG,CAACD,cAAc,CAAC;IAC3D,IAAInH,YAAY,EAAE;MACdA,YAAY,CAACW,IAAI,GAAG,IAAI;MACxBX,YAAY,CAACqH,MAAM,GAAG,IAAI5G,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC9C,IAAI,CAACa,iBAAiB,CAAC,mBAAmB,EAAEvB,YAAY,CAAC;MACzD,IAAI,CAACwB,0BAA0B,CAAC,CAAC;IACrC;EACJ;;EAEA;AACJ;AACA;EACI8F,aAAaA,CAACV,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,MAAMxI,aAAa,GAAG,IAAI,CAACuI,gBAAgB,CAACC,OAAO,CAAC;IACpDxI,aAAa,CAACmJ,OAAO,CAACvH,YAAY,IAAI;MAClC,IAAI,CAACwG,UAAU,CAACxG,YAAY,CAACC,EAAE,CAAC;IACpC,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACIuH,mBAAmBA,CAACL,cAAc,EAAE;IAChC,MAAMnH,YAAY,GAAG,IAAI,CAAC5B,aAAa,CAACgJ,GAAG,CAACD,cAAc,CAAC;IAC3D,IAAInH,YAAY,IAAI,CAACA,YAAY,CAACY,UAAU,EAAE;MAC1C,IAAI,CAACxC,aAAa,CAACqJ,MAAM,CAACN,cAAc,CAAC;MACzC,IAAI,CAAC5F,iBAAiB,CAAC,wBAAwB,EAAEvB,YAAY,CAAC;MAC9D,IAAI,CAACwB,0BAA0B,CAAC,CAAC;IACrC;EACJ;;EAEA;AACJ;AACA;EACIkG,qBAAqBA,CAACC,iBAAiB,GAAG,KAAK,EAAE;IAC7C,IAAIA,iBAAiB,EAAE;MACnB,IAAI,CAACvJ,aAAa,CAACwJ,KAAK,CAAC,CAAC;IAC9B,CAAC,MAAM;MACH,KAAK,MAAM,CAAC3H,EAAE,EAAED,YAAY,CAAC,IAAI,IAAI,CAAC5B,aAAa,EAAE;QACjD,IAAI,CAAC4B,YAAY,CAACY,UAAU,EAAE;UAC1B,IAAI,CAACxC,aAAa,CAACqJ,MAAM,CAACxH,EAAE,CAAC;QACjC;MACJ;IACJ;IACA,IAAI,CAACsB,iBAAiB,CAAC,uBAAuB,CAAC;IAC/C,IAAI,CAACC,0BAA0B,CAAC,CAAC;EACrC;;EAEA;AACJ;AACA;EACIqG,SAASA,CAACC,QAAQ,EAAE;IAChB,IAAI,CAACxJ,WAAW,CAACyJ,GAAG,CAACD,QAAQ,CAAC;IAC9B,OAAO,MAAM,IAAI,CAACxJ,WAAW,CAACmJ,MAAM,CAACK,QAAQ,CAAC;EAClD;EAEAvG,iBAAiBA,CAACyG,KAAK,EAAErG,IAAI,EAAE;IAC3B,IAAI,CAACrD,WAAW,CAACiJ,OAAO,CAACO,QAAQ,IAAI;MACjC,IAAI;QACAA,QAAQ,CAACE,KAAK,EAAErG,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOwD,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC7D;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;EACItF,sBAAsBA,CAAA,EAAG;IACrB;IACA,IAAI,CAACoI,YAAY,CAAC,2BAA2B,EAAE;MAC3CC,UAAU,EAAE;QACR7H,IAAI,EAAE,OAAO;QACb8H,SAAS,EAAE;UAAEC,KAAK,EAAE,CAAC;UAAEtC,MAAM,EAAE;QAAO,CAAC,CAAC;MAC5C,CAAC;MACD/D,MAAM,EAAE;QAAEsC,QAAQ,EAAE;MAAK;IAC7B,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC4D,YAAY,CAAC,mBAAmB,EAAE;MACnCC,UAAU,EAAE;QACR7H,IAAI,EAAE;MACV,CAAC;MACD0B,MAAM,EAAE;QAAEqC,QAAQ,EAAE,IAAI;QAAEE,WAAW,EAAE,CAAC,OAAO,EAAE,SAAS;MAAE;IAChE,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC2D,YAAY,CAAC,qBAAqB,EAAE;MACrCC,UAAU,EAAE;QACR5H,QAAQ,EAAE,KAAK;QACf+H,UAAU,EAAE;UAAEC,SAAS,EAAE,CAAC;UAAEC,OAAO,EAAE;QAAG;MAC5C,CAAC;MACDxG,MAAM,EAAE;QACJsC,QAAQ,EAAGrE,YAAY,IAAK,CAAC,IAAI,CAACwI,eAAe,CAAC,CAAC;QACnDjE,aAAa,EAAGvE,YAAY,IAAK,GAAGA,YAAY,CAACI,OAAO;MAC5D;IACJ,CAAC,CAAC;EACN;EAEA6H,YAAYA,CAAChE,MAAM,EAAEC,IAAI,EAAE;IACvB,IAAI,CAAC1F,UAAU,CAAC4C,GAAG,CAAC6C,MAAM,EAAEC,IAAI,CAAC;EACrC;EAEAuE,eAAeA,CAACxE,MAAM,EAAE;IACpB,IAAI,CAACzF,UAAU,CAACiJ,MAAM,CAACxD,MAAM,CAAC;EAClC;;EAEA;AACJ;AACA;EACI/D,sBAAsBA,CAAA,EAAG;IACrB,OAAO,gBAAgBO,IAAI,CAACiI,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAClF;EAEAhI,mBAAmBA,CAACT,IAAI,EAAE;IACtB,MAAM0I,eAAe,GAAG;MACpB/J,QAAQ,EAAE,IAAI;MAAE;MAChBmG,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC5B6D,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC9BC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC7B7J,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,MAAM8J,UAAU,GAAGH,eAAe,CAAC1I,IAAI,CAAC,IAAI0I,eAAe,CAAC3J,IAAI;IAChE,OAAO8J,UAAU,GAAG,IAAIzI,IAAI,CAACA,IAAI,CAACiI,GAAG,CAAC,CAAC,GAAGQ,UAAU,CAAC,CAACxI,WAAW,CAAC,CAAC,GAAG,IAAI;EAC9E;EAEA8E,cAAcA,CAACxF,YAAY,EAAE;IACzB,MAAMmJ,SAAS,GAAG,cAAc;IAChC,MAAMC,SAAS,GAAG,gBAAgBpJ,YAAY,CAACK,IAAI,EAAE;IACrD,MAAMgJ,aAAa,GAAG,yBAAyBrJ,YAAY,CAACM,QAAQ,EAAE;IACtE,OAAO,GAAG6I,SAAS,IAAIC,SAAS,IAAIC,aAAa,EAAE;EACvD;EAEA3D,mBAAmBA,CAACrF,IAAI,EAAE;IACtB,MAAMiJ,KAAK,GAAG;MACVL,OAAO,EAAE,GAAG;MACZ9D,KAAK,EAAE,GAAG;MACV6D,OAAO,EAAE,IAAI;MACb5J,IAAI,EAAE,IAAI;MACVJ,QAAQ,EAAE;IACd,CAAC;IACD,OAAOsK,KAAK,CAACjJ,IAAI,CAAC,IAAIiJ,KAAK,CAAClK,IAAI;EACpC;EAEAyG,YAAYA,CAACvF,QAAQ,EAAE;IACnB,MAAMiJ,MAAM,GAAG;MACXvK,QAAQ,EAAE,CAAC;MAAE;MACbC,IAAI,EAAE,KAAK;MAAE;MACbC,MAAM,EAAE,IAAI;MAAE;MACdC,GAAG,EAAE,IAAI;MAAE;MACXC,IAAI,EAAE,IAAI,CAAC;IACf,CAAC;IACD,OAAOmK,MAAM,CAACjJ,QAAQ,CAAC,IAAIiJ,MAAM,CAACnK,IAAI;EAC1C;EAEA+E,WAAWA,CAACnE,YAAY,EAAEkE,IAAI,EAAE;IAC5B,MAAMgE,UAAU,GAAGhE,IAAI,CAACgE,UAAU;;IAElC;IACA,IAAIA,UAAU,CAAC7H,IAAI,IAAIL,YAAY,CAACK,IAAI,KAAK6H,UAAU,CAAC7H,IAAI,EAAE,OAAO,KAAK;IAC1E,IAAI6H,UAAU,CAAC5H,QAAQ,IAAIN,YAAY,CAACM,QAAQ,KAAK4H,UAAU,CAAC5H,QAAQ,EAAE,OAAO,KAAK;IACtF,IAAI4H,UAAU,CAAC3H,MAAM,IAAIP,YAAY,CAACO,MAAM,KAAK2H,UAAU,CAAC3H,MAAM,EAAE,OAAO,KAAK;;IAEhF;IACA,IAAI2H,UAAU,CAACC,SAAS,EAAE;MACtB,MAAMqB,mBAAmB,GAAG,IAAI,CAACC,sBAAsB,CACnDvB,UAAU,CAACC,SAAS,CAACrC,MAAM,EAC3B;QAAEzF,IAAI,EAAEL,YAAY,CAACK,IAAI;QAAED,OAAO,EAAEJ,YAAY,CAACI;MAAQ,CAC7D,CAAC;MACD,IAAIoJ,mBAAmB,CAACE,MAAM,GAAGxB,UAAU,CAACC,SAAS,CAACC,KAAK,EAAE,OAAO,KAAK;IAC7E;;IAEA;IACA,IAAIF,UAAU,CAACG,UAAU,EAAE;MACvB,MAAMK,GAAG,GAAG,IAAIjI,IAAI,CAAC,CAAC;MACtB,MAAMkJ,IAAI,GAAGjB,GAAG,CAACkB,QAAQ,CAAC,CAAC;MAC3B,IAAID,IAAI,GAAGzB,UAAU,CAACG,UAAU,CAACC,SAAS,IAAIqB,IAAI,GAAGzB,UAAU,CAACG,UAAU,CAACE,OAAO,EAAE;QAChF,OAAO,KAAK;MAChB;IACJ;IAEA,OAAO,IAAI;EACf;EAEAkB,sBAAsBA,CAACI,QAAQ,EAAEjD,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,MAAMkD,MAAM,GAAGrJ,IAAI,CAACiI,GAAG,CAAC,CAAC,GAAGmB,QAAQ;IACpC,OAAO,IAAI,CAACpL,mBAAmB,CAACqI,MAAM,CAAC9G,YAAY,IAAI;MACnD,MAAM+J,gBAAgB,GAAG,IAAItJ,IAAI,CAACT,YAAY,CAACQ,SAAS,CAAC,CAACwJ,OAAO,CAAC,CAAC;MACnE,IAAID,gBAAgB,GAAGD,MAAM,EAAE,OAAO,KAAK;MAE3C,IAAIlD,OAAO,CAACvG,IAAI,IAAIL,YAAY,CAACK,IAAI,KAAKuG,OAAO,CAACvG,IAAI,EAAE,OAAO,KAAK;MACpE,IAAIuG,OAAO,CAACxG,OAAO,IAAIJ,YAAY,CAACI,OAAO,KAAKwG,OAAO,CAACxG,OAAO,EAAE,OAAO,KAAK;MAE7E,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EAEAoI,eAAeA,CAAA,EAAG;IACd,MAAME,GAAG,GAAG,IAAIjI,IAAI,CAAC,CAAC;IACtB,MAAMkJ,IAAI,GAAGjB,GAAG,CAACkB,QAAQ,CAAC,CAAC;IAC3B,MAAMK,GAAG,GAAGvB,GAAG,CAACwB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,OAAOD,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,CAAC,IAAIN,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE;EAC1D;EAEAtI,YAAYA,CAACrB,YAAY,EAAE;IACvB,IAAI,CAACvB,mBAAmB,CAAC0L,IAAI,CAAC;MAC1BlK,EAAE,EAAED,YAAY,CAACC,EAAE;MACnBI,IAAI,EAAEL,YAAY,CAACK,IAAI;MACvBD,OAAO,EAAEJ,YAAY,CAACI,OAAO;MAC7BI,SAAS,EAAER,YAAY,CAACQ;IAC5B,CAAC,CAAC;;IAEF;IACA,IAAI,IAAI,CAAC/B,mBAAmB,CAACiL,MAAM,GAAG,IAAI,CAACpK,cAAc,EAAE;MACvD,IAAI,CAACb,mBAAmB,GAAG,IAAI,CAACA,mBAAmB,CAAC4H,KAAK,CAAC,CAAC,IAAI,CAAC/G,cAAc,CAAC;IACnF;EACJ;EAEAK,2BAA2BA,CAAA,EAAG;IAC1B,MAAM+I,GAAG,GAAGjI,IAAI,CAACiI,GAAG,CAAC,CAAC;IACtB,MAAM0B,QAAQ,GAAG,EAAE;IAEnB,KAAK,MAAM,CAACnK,EAAE,EAAED,YAAY,CAAC,IAAI,IAAI,CAAC5B,aAAa,EAAE;MACjD,IAAI4B,YAAY,CAACa,SAAS,IAAI,IAAIJ,IAAI,CAACT,YAAY,CAACa,SAAS,CAAC,CAACmJ,OAAO,CAAC,CAAC,GAAGtB,GAAG,EAAE;QAC5E0B,QAAQ,CAACD,IAAI,CAAClK,EAAE,CAAC;MACrB;IACJ;IAEAmK,QAAQ,CAAC7C,OAAO,CAACtH,EAAE,IAAI;MACnB,IAAI,CAAC7B,aAAa,CAACqJ,MAAM,CAACxH,EAAE,CAAC;IACjC,CAAC,CAAC;IAEF,IAAImK,QAAQ,CAACV,MAAM,GAAG,CAAC,EAAE;MACrB,IAAI,CAAClI,0BAA0B,CAAC,CAAC;IACrC;EACJ;EAEA5B,0BAA0BA,CAAA,EAAG;IACzB;IACAF,WAAW,CAAC,MAAM;MACd,MAAM2K,OAAO,GAAG;QACZC,kBAAkB,EAAE,IAAI,CAAClM,aAAa,CAACmM,IAAI;QAC3CC,mBAAmB,EAAE/G,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC,CAACmD,MAAM,CAACjD,CAAC,IAAI,CAACA,CAAC,CAAClD,IAAI,CAAC,CAAC+I,MAAM;QACxFe,qBAAqB,EAAEhH,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC,CAACmD,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACvD,QAAQ,KAAK,UAAU,CAAC,CAACoJ,MAAM;QAC5GgB,WAAW,EAAE,IAAI,CAACC,oBAAoB,CAAC;MAC3C,CAAC;;MAED;MACA,IAAIN,OAAO,CAACC,kBAAkB,GAAG,IAAI,CAACjL,gBAAgB,EAAE;QACpD,IAAI,CAACoC,iBAAiB,CAAC,uBAAuB,EAAE4I,OAAO,CAAC;QACxD,IAAI,CAACO,uBAAuB,CAAC,CAAC;MAClC;IACJ,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;EACf;EAEAD,oBAAoBA,CAAA,EAAG;IACnB,OAAOE,IAAI,CAACC,SAAS,CAACrH,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC+F,MAAM;EACzE;EAEAkB,uBAAuBA,CAAA,EAAG;IACtB;IACA,KAAK,MAAM,CAAC3K,EAAE,EAAED,YAAY,CAAC,IAAI,IAAI,CAAC5B,aAAa,EAAE;MACjD,IAAI,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC2M,QAAQ,CAAC/K,YAAY,CAACM,QAAQ,CAAC,EAAE;QACvD,IAAI,CAAClC,aAAa,CAACqJ,MAAM,CAACxH,EAAE,CAAC;MACjC;IACJ;IACA,IAAI,CAACuB,0BAA0B,CAAC,CAAC;EACrC;EAEAa,oBAAoBA,CAACX,SAAS,EAAEC,IAAI,EAAE;IAClC,MAAMqJ,QAAQ,GAAG;MACbnJ,kBAAkB,EAAE,6BAA6BF,IAAI,CAACwD,KAAK,IAAI,eAAe,EAAE;MAChFnD,iBAAiB,EAAE,0BAA0BL,IAAI,CAACsB,IAAI,IAAI,SAAS,WAAWtB,IAAI,CAACwD,KAAK,IAAI,eAAe,EAAE;MAC7GlD,uBAAuB,EAAE,gCAAgCN,IAAI,CAACsJ,MAAM,IAAI,eAAe,OAAOtJ,IAAI,CAACuJ,KAAK,IAAI,MAAM,EAAE;MACpHhJ,cAAc,EAAE,+BAA+BP,IAAI,CAACwJ,SAAS,IAAI,CAAC,qBAAqBxJ,IAAI,CAACyJ,MAAM,IAAI,CAAC,SAAS;MAChHjJ,cAAc,EAAE,6BAA6BR,IAAI,CAAC0J,MAAM,IAAI,gBAAgB,SAAS1J,IAAI,CAACpB,MAAM,IAAI,gBAAgB;IACxH,CAAC;IAED,OAAOyK,QAAQ,CAACtJ,SAAS,CAAC,IAAI,iBAAiBA,SAAS,EAAE;EAC9D;EAEAc,cAAcA,CAAA,EAAG;IACb,OAAO;MACHhC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnC4K,iBAAiB,EAAE,IAAI,CAAClN,aAAa,CAACmM,IAAI;MAC1CgB,eAAe,EAAE,IAAI,CAACjN,WAAW,CAACiM,IAAI;MACtCiB,cAAc,EAAE,IAAI,CAAChN,UAAU,CAAC+L;IACpC,CAAC;EACL;EAEAlF,qBAAqBA,CAACrF,YAAY,EAAEmF,KAAK,EAAE;IACvCnF,YAAY,CAACiB,UAAU,EAAE;IAEzB,IAAIjB,YAAY,CAACiB,UAAU,GAAGjB,YAAY,CAACkB,UAAU,EAAE;MACnD;MACAuK,UAAU,CAAC,MAAM;QACb,IAAI,CAACnK,kBAAkB,CAACtB,YAAY,CAAC;MACzC,CAAC,EAAE2I,IAAI,CAAC+C,GAAG,CAAC,CAAC,EAAE1L,YAAY,CAACiB,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC,MAAM;MACH;MACA,IAAI,CAACQ,iBAAiB,CAAC,8BAA8B,EAAE;QACnD0F,cAAc,EAAEnH,YAAY,CAACC,EAAE;QAC/BkF,KAAK,EAAEA,KAAK,CAAC/E,OAAO;QACpBa,UAAU,EAAEjB,YAAY,CAACiB;MAC7B,CAAC,CAAC;IACN;EACJ;;EAEA;AACJ;AACA;EACIO,0BAA0BA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMG,IAAI,GAAG;QACTvD,aAAa,EAAEqF,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuN,OAAO,CAAC,CAAC,CAAC;QACvDC,OAAO,EAAE,IAAI,CAACnN,mBAAmB,CAAC4H,KAAK,CAAC,CAAC,GAAG,CAAC;QAAE;QAC/C7F,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC;MACDmL,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAEjB,IAAI,CAACC,SAAS,CAACnJ,IAAI,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOwD,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IACpE;EACJ;EAEA1F,4BAA4BA,CAAA,EAAG;IAC3B,IAAI;MACA,MAAMkC,IAAI,GAAGkK,YAAY,CAACE,OAAO,CAAC,mBAAmB,CAAC;MACtD,IAAIpK,IAAI,EAAE;QACN,MAAMqK,MAAM,GAAGnB,IAAI,CAACoB,KAAK,CAACtK,IAAI,CAAC;QAC/B,IAAI,CAACvD,aAAa,GAAG,IAAIC,GAAG,CAAC2N,MAAM,CAAC5N,aAAa,IAAI,EAAE,CAAC;QACxD,IAAI,CAACK,mBAAmB,GAAGuN,MAAM,CAACJ,OAAO,IAAI,EAAE;;QAE/C;QACA,IAAI,CAACjM,2BAA2B,CAAC,CAAC;MACtC;IACJ,CAAC,CAAC,OAAOwF,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACtE;EACJ;;EAEA;AACJ;AACA;EACI+G,aAAaA,CAAA,EAAG;IACZ,MAAM9N,aAAa,GAAGqF,KAAK,CAACC,IAAI,CAAC,IAAI,CAACtF,aAAa,CAACuF,MAAM,CAAC,CAAC,CAAC;IAE7D,OAAO;MACHI,KAAK,EAAE3F,aAAa,CAACsL,MAAM;MAC3ByC,MAAM,EAAE/N,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAI,CAACA,CAAC,CAAClD,IAAI,CAAC,CAAC+I,MAAM;MACjD0C,MAAM,EAAEhO,aAAa,CAACiO,MAAM,CAAC,CAACC,GAAG,EAAEzI,CAAC,KAAK;QACrCyI,GAAG,CAACzI,CAAC,CAACxD,IAAI,CAAC,GAAG,CAACiM,GAAG,CAACzI,CAAC,CAACxD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACpC,OAAOiM,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACNC,UAAU,EAAEnO,aAAa,CAACiO,MAAM,CAAC,CAACC,GAAG,EAAEzI,CAAC,KAAK;QACzCyI,GAAG,CAACzI,CAAC,CAACvD,QAAQ,CAAC,GAAG,CAACgM,GAAG,CAACzI,CAAC,CAACvD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5C,OAAOgM,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACNE,QAAQ,EAAEpO,aAAa,CAACiO,MAAM,CAAC,CAACC,GAAG,EAAEzI,CAAC,KAAK;QACvCyI,GAAG,CAACzI,CAAC,CAACtD,MAAM,CAAC,GAAG,CAAC+L,GAAG,CAACzI,CAAC,CAACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACxC,OAAO+L,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACN1L,UAAU,EAAExC,aAAa,CAAC0I,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAACjD,UAAU,CAAC,CAAC8I,MAAM;MAC1D+C,WAAW,EAAE,IAAI,CAAChO,mBAAmB,CAACiL,MAAM;MAC5C6B,eAAe,EAAE,IAAI,CAACjN,WAAW,CAACiM,IAAI;MACtCiB,cAAc,EAAE,IAAI,CAAChN,UAAU,CAAC+L;IACpC,CAAC;EACL;AACJ;AAEA,eAAerM,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}